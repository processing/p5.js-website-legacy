Skip-To-Content: Ir al contenido
Language-Settings: Preferencias de idioma
Sidebar-Title: Navegación del sitio
Home: Inicio
Editor: Editor
Download: Descargar
Donate: Donar
Start: Empezar
Reference: Referencia
Libraries: Bibliotecas
Learn: Aprender
Teach: Enseñar
Examples: Ejemplos
Books: Libros
Community: Comunidad
Contribute: Contribuir
Forum: Foro
Showcase: Showcase
footerxh1: Créditos
footer1: 'p5.js está actualmente dirigido por '
footer3: ' y fue creado por '
footer4: '. p5.js es desarrollado por una comunidad de colaboradores, con el apoyo de '
footer5: ' y '
footer6: '. Identidad y diseño gráfico por '
footer7: '. '
footer8: Info
footer9: .
tagline1: la diversión de Processing x la excentricidad de JavaScript
tagline2: la simplicidad de Processing x la flexibilidad de JavaScript
tagline3: la intuición de Processing x el poder de JavaScript
tagline4: la creatividad de Processing x el dinamismo de JavaScript
tagline5: la comunidad de Processing x la comunidad de JavaScript
tagline6: el poder de procesamiento de Processing x el alcance de JavaScript
tagline7: La comunidad de p5.jS se solidariza con Black Lives Matter.
home:
  search-bar: Buscar en p5js.org
  start-creating: ¡Empieza a crear con el Editor de p5!
  p1xh1: ¡Hola!
  p1x1: >-
    ¡p5.js es una biblioteca de JavaScript para la programación creativa que
    se enfoque en que programación sea accesible e inclusivo para artistas,
    diseñadores, educadores, principiantes y cualquier otra persona! p5.js es
    gratuito y de código abierto porque creemos que el software y las
    herramientas para aprenderlo deben ser accesibles para todos.
  p1x2: >-
    Usando la metáfora de bosquejear, p5.js tiene un conjunto completo de
    funcionalidades de dibujo. Sin embargo, no limita solo a dibujar
    en tu lienzo. Puedes tomar toda la página del navegador como tu bosquejo,
    incluyendo los objetos HTML5 para texto, entrada, video, cámara web y
    sonido.
  p2xh2: Comunidad
  p2x1: >-
    Somos una comunidad de, y en solidaridad con, personas de todas las
    identidades y expresiones de género, orientación sexual, raza, etnia,
    idioma, tipo neurológico, tamaño, discapacidad, clase, religión, cultura,
    subcultura, opinión política, edad, nivel de habilidad, ocupación y
    antecedentes. Sabemos que no todas las personas tienen el tiempo, los medios
    financieros o la capacidad para participar activamente, pero reconocemos y
    incentivamos cualquier tipo de participación. Facilitamos y fomentamos el acceso y
    el empoderamiento. Todos somos aprendices.
  p2x2: 'p5.js es una interpretación '
  p2x3: ' para la web. Realizamos eventos y operamos con el apoyo de '
  p2x4: .
  p2x5: 'Conoce más sobre '
  p2x6: nuestra comunidad
  p2x7: .
  p3xh2: Empezar
  p3xp1: 'Crea tu primer bosquejo en el '
  p3xp2: '. Aprende más sobre cómo dibujar con p5.js en la '
  p3xp3: página de empezar
  p3xp4: ' y sobre todo lo que puedes hacer en la '
  p3xp5: referencia
  p3xp6: .
  p4xh2: Participa
  p4xp1: 'Existen muchas formas de contribuir a p5.js:'
  p4xp2: Opciones para participar
  p4xp3: ¡Comparte algo que hayas creado!
  p4xp4: Imparte un taller o una clase.
  p4xp5: Organiza una reunión.
  p4xp6: Contribuye al código fuente.
  sketch_credits: Sketch Credits
  sketch_info: Hunminjeongeum2020 created by Seonghyeon Kim
copyright:
  copyright-title: Información de Copyright
  copyright1: >-
    La biblioteca p5.js es software libre; puedes redistribuirla y/o modificarla
    según los términos de la 
  copyright2: ' publicada por la Free Software Foundation, versión 2.1.'
  copyright3: 'La Referencia del lenguaje se encuentra bajo una  '
  copyright4: ' licencia que permite reusar este contenido para propósitos no-comerciales si se otorga el crédito correspondiente.'
get started:
  get-started-title: Empezar
  get-started1: >-
    Esta página te guía para configurar un proyecto p5.js y crear tu primer
    bosquejo.
  get-started2: 'La forma más fácil de comenzar es usando el '
  get-started3: editor p5.js
  get-started4: ', puedes abrir el editor web y dirigirte a la sección '
  get-started5: tu primer bosquejo
  get-started6: '. Si deseas trabajar en la versión de escritorio de p5.js, puedes ir a las '
  get-started7: instrucciones de descarga
  get-started-button: 'Copy'
  settingUp-title: Configura p5.js con un editor en tu computadora
  download-title: Descarga una copia de la biblioteca p5.js
  hosted-title: Utiliza una versión alojada de la biblioteca p5.js
  download1: La manera más simple de empezar es usando el ejemplo en blanco que incluye
  download2: p5.js completo
  download3: disponible en el sitio.
  download8: >-
    Después de la descarga, es necesario configurar un servidor local. Mira las
    instrucciones 
  download9: aquí
  download10: >-
    . Ejecuta tu servidor local dentro de la carpeta descargada y en tu
    navegador, ves a 
  download11: 'http://localhost:{your-port-num}/empty-example'
  download4: >-
    Si miras al archivo index.html, verás que tiene un enlace al
    archivo p5.js. Si estás buscando usar la versión reducida (comprimida para
    que las páginas carguen más rápidamente), cambia el enlace a p5.min.js.
  download5: >-
    De forma alternativa, puedes enlazar a un archivo p5.js alojado online.
    Todas las versiones de p5.js están almacenadas en un CDN (Red de distribución de contenidos o Content Delivery Network). Encontrarás historial de estas versiones aquí: 
  download6: '. En este caso, puedes cambiar el enlace a: '
  download7: 'Una página HTML de ejemplo podría verse así:'
  environment-title: Ambiente
  environment1: 'Puedes usar el '
  environmentlink: 'https://es.wikipedia.org/wiki/Editor_de_codigo_fuente'
  environment2: ' editor de código '
  environment3: 'que prefieras. Las instrucciones para usar y configurar  '
  environment4: ' están incluidas a continuación, otras buenas opciones de editores incluyen '
  environment5: ' y '
  environment6: >-
    Si estás utilizando un lector de pantalla y no usas el editor de p5, te
    recomendamos usar 
  environment7: ' o '
  environment8: >-
    Abre Sublime. Despliega el menú File (archivo) y elige Open (abrir) ... y
    selecciona el directorio donde se encuentran tus archivos html y js. En la
    barra lateral izquierda, podrás encontrar el nombre del directorio en la
    parte superior, y a continuación una lista con los archivos contenidos en el
    directorio.
  environment9: >-
    Haz click en tu archivo sketch.js y éste se abrirá a la derecha de tu
    pantalla, donde podrás editarlo. 
  environment10: el código de inicio de p5 en el editor sublime.
  environment11: >-
    Abre el archivo index.html en tu navegador haciendo doble click en él o
    escribiendo:
  environment12: 'file:///la/ubicacion/de/tu/archivo/html'
  environment14: ' (o '
  environment15: 'http://localhost:{your-port-num}/empty-example'
  environment16: ' si estás usando un servidor local)'
  environment13: ' en la barra de direcciones de tu navegador para ver tu bosquejo.'
  your-first-sketch-title: Tu primer bosquejo
  your-first-sketch-intro1: 'En el '
  your-first-sketch-intro2: 'https://editor.p5js.org/'
  your-first-sketch-intro3: editor web p5.js
  your-first-sketch-intro4: ' vas a encontrar el siguiente código:'
  your-first-sketch1: 'Despúes de '
  your-first-sketch2: ' incluye esta línea de código: '
  your-first-sketch3: 'Ahora tu código debe estar así: '
  your-first-sketch4: >-
    La línea que acabas de añadir dibuja una elipse, con su centro a 50
    píxeles del borde izquierdo y 50 píxeles del borde superior del bosquejo,
    con un ancho y un alto de 80 píxeles.
  your-first-sketch5: ¡Presiona play en el editor para ejecutar el código!
  your-first-sketch6: >-
    Si estás utilizando un lector de pantalla, tienes que activar las salidas
    accesibles en el editor, fuera del editor tienes que añadir la biblioteca
    de accesibilidad a tu html. Para aprender más visita el 
  your-first-sketch7: ' tutorial usando p5 con un lector de pantalla'
  your-first-sketch8: >-
    Si escribiste todo correctamente, esto aparecerá en tu ventana de
    visualización:
  your-first-sketch9: canvas tiene un circulo de ancho y alto 50 en la posición 80 x y 80 ye
  your-first-sketch10: >-
    Si no aparece nada, el editor puede estar teniendo problemas entendiendo lo
    que escribiste. Si esto sucede, asegúrate de haber copiado el ejemplo de
    código tal y como está: los números deben estar separados por comas y
    contenidos entre paréntesis, la línea debe terminar con punto y coma, y la
    palabra "ellipse" debe estar escrita como en inglés.
  your-first-sketch11: >-
    Una de las cosas más difíciles de comenzar a programar es que debes ser muy
    específico con la sintaxis. El navegador no siempre es lo suficientemente
    inteligente como para saber lo que quieres decir, y puede ser bastante
    exigente con respecto a la ubicación de la puntuación. Ya te acostrumbrarás,
    sólo toma un poco de práctica. En la parte inferior izquierda del editor vas
    a encontrar la sección de consola. Aquí, encontrarás mensajes del editor con
    detalles de cualquier error que se encuentre.
  your-first-sketch12: >-
    Ahora, vamos a crear un bosquejo que es un poco más interesante. Modifica el
    ejemplo anterior para probar lo siguiente:
  your-first-sketch13: >-
    Este programa crea un canvas que es de 400 píxeles de ancho y 400 píxeles de
    alto, y luego empieza a dibujar círculos blancos en la posición del ratón.
    Cuando algún botón del ratón es presionado, el color del círculo cambia a
    negro. Ejecuta el código, mueve el cursor, y haz click para experimentarlo.
  your-first-sketch14: >-
    canvas tiene múltiples círculos dibujados que siguen los movimientos del
    cursor
  first-sketch-heading1: Bloque de código con elipse
  first-sketch-heading2: Nota para usuarios de lectores de pantalla
  first-sketch-heading3: Bloque de código con Interacción
  what-next-title: ¿Qué viene después?
  learn1: 'Visita las páginas '
  learn2: aprender
  learn3: ' y '
  learn4: ejemplos
  learn5: ' para conocer la biblioteca.'
  learn6: 'Mira los video tutoriales de '
  learn7: The Coding Train
  learn8: ' y '
  learn9: Kadenze
  learn10: .
  reference1: 'Visita la '
  reference2: ' referencia'
  reference3: ' para explorar la documentación completa.'
  learn11: 'Si deseas utilizar p5 con un lector de pantalla, visita el '
  learn12: tutorial p5 con un lector de pantalla
  processing-transition1: 'Si has usado Processing en el pasado, lee el '
  processing-transition2: 'https://github.com/processing/p5.js/wiki/Processing-transition'
  processing-transition3: tutorial de transición desde Processing
  processing-transition4: ' para aprender cómo convertir programas de Processing a p5.js, y cuáles son las principales diferencias entre estos.'
  book1: >-
    Partes de este tutorial fueron adaptadas de "Getting Started with p5.js" por
    Lauren McCarthy, Casey Reas y Ben Fry, O'Reilly / Make 2015. Copyright ©
    2015. Todos los derechos reservados. Última modificación en la Conferencia
    de Contribuyentes p5.js 2019.
download:
  Download: Descargar
  download-intro: >-
    ¡Bienvenidos! Aunque esta página se titula "Descargar", en realidad contiene
    una colección de enlaces para descargar la biblioteca o comenzar a trabajar
    online. Hemos tratado de ordenar cosas desde lo que un principiante podría
    desear explorar primero, a los recursos que los programadores más
    experimentados pueden estar buscando.
  editor-title: Editor
  p5.js-editor: Editor de p5.js
  p5.js-editor-intro: >-
    Este enlace te redirige al Editor p5.js en línea para que puedas comenzar a
    usar p5.js de inmediato.
  editor-includes: 'Empieza a programar usando el Editor de p5.js, ¡no requiere instalación!'
  complete-library-title: Biblioteca completa
  complete-library-intro1: >-
    Esta es una descarga contiene el archivo de la biblioteca p5.js, el
    complemento p5.sound y un proyecto de ejemplo. No contiene un editor.
    Explora 
  complete-library-intro2: Empezar
  complete-library-intro3: ' para aprender cómo crear un proyecto de p5.js.'
  p5.js-complete: p5.js completo
  includes-1: 'Incluye:'
  includes-2: 'p5.js, p5.sound.js y un proyecto de ejemplo'
  includes-3: 'Versión '
  single-files-title: Archivos por separado
  single-files-intro: >-
    Estas son descargas o enlaces al archivo de biblioteca p5.js. No incluyen
    contenidos adicionales.
  single-file: 'Archivo: '
  p5.js-uncompressed: ' versión completa sin compresión'
  compressed: versión comprimida
  link: 'Enlace: '
  statically-hosted-file: archivo almacenado estáticamente
  etc-title: Recursos de GitHub
  older-releases: 'Versiones antiguas / bitácora de cambios '
  github-repository: Repositorio de Código (GitHub)
  report-bugs: 'Reporta errores '
  supported-browsers: 'Navegadores soportados '
  support-title: ¡Apoya a p5.js!
  support-options: Opciones de apoyo
  support-1: >-
    ¡Necesitamos tu ayuda! p5.js es un software gratuito y de código abierto. 
    Queremos hacer nuestra comunidad lo más abierta e inclusiva posible.  Puedes
    apoyar nuestro trabajo haciendo una donación a 
  support-2: >-
    , la organización que soporta p5.js. Tu donación ayudará al desarrollo de
    software para p5.js, recursos educativos como ejemplos de código y
    tutoriales,
  support-3: becarios
  support-4: ', y '
  support-5: eventos para la comunidad.
  support-17: >-
    Conferencia de contribuyentes de p5.js en el CMU STUDIO for Creative Inquiry
    en Pittsburgh (crédito de imagen: Taeyoon Choi)
  support-18: >-
    Saskia Freeke, becaria Processing, organiza talleres Code Liberation x
    Processing en Londres (crédito de imagen: Code Liberation Foundation)
  support-19: >-
    Conferencia Learning to Teach, Teaching to Learn en conjunto con SFPC
    (crédito de imagen: Kira Simon-Kennedy)
  support-20: >-
    Taller de Cassie Tarakajian, becaria de Processing Foundation, en Code Art
    Miami (crédito de imagen: Christian Arévalo Photography)
  support-21: >-
    Taeyoon Choi y un intérprete de señas en el taller Signing Coders de p5.js
    (crédito de imagen: Taeyoon Choi)
  support-22: 'Lanzamiento de Google Summer of Code (crédito de imagen: Taeyoon Choi)'
  support-23: >-
    Cassie Tarakajian, becaria de Processing Foundation, realiza un taller en
    Code Art Miami (crédito de imagen: Christian Arévalo Photography)
  support-24: >-
    Luisa Pereira y Yeseul Song ayudan en la realización de un taller de p5.js
    basado en lenguaje de señas, enseñado por Taeyoon Choi (crédito de imagen:
    Taeyoon Choi)
  support-25: >-
    Conferencia de contribuyentes de p5.js en el CMU STUDIO for Creative Inquiry
    en Pittsburgh (crédito de imagen: Taeyoon Choi)
  support-26: >-
    Digital Citizens Lab, becarios Processing, participan eun panel sobre
    enseñanza STEM en el International Center of Photography (crédito de imagen:
    International Center of Photography)
  support-27: >-
    Participantes de un taller de p5.js in Santiago, Chile, dictado por Aarón
    Montoya-Moraga (crédito de imagen: Aarón Montoya-Moraga.)
  support-28: >-
    Claire Kearney-Volpe ayuda en la realización de un taller de p5.js basado en
    lenguaje de señas, enseñado por Taeyoon Choi (crédito de imagen: Taeyoon
    Choi)
  support-29: >-
    DIY Girls, becarios de la Processing Foundation, realizan un curso de
    programación creativa en Los Angeles (crédito de imagen: DIY Girls)
  support-30: Processing Fellow Digital Citizens Lab
  support-31: Junta bicostal de p5.js entre UCLA DMA y NYU ITP
  support-32: The Processing Foundation
  support-33: ' fue fundada en 2012 después de más de de una década de trabajo con el software original de Processing. La misión de la fundación es promover la alfabetización de software dentro de las artes visuales, y la alfabetización visual dentro de las disciplinas relacionadas a la tecnología - y hacer estas disciplinas accesibles a comunidades más diversas. Nuestra meta es empoderar a gente de diversos intereses para que aprenda a programar y que realice trabajo creativo con código, especialmente aquellos que de otra forma no hubieran tenido acceso a estas herramientas y recursos.'
  support-17-alt: >-
    p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in
    Pittsburgh
  support-18-alt: >-
    Processing Fellow Saskia Freeke organizing Code Liberation x Processing
    workshops in London
  support-19-alt: 'Learning to Teach, Teaching to Learn conference with SFPC'
  support-20-alt: Processing Foundation Fellow Cassie Tarakajian's workshop at Code Art Miami
  support-21-alt: Taeyoon Choi and ASL interpretor at Signing Coders p5.js workshop
  support-22-alt: Google Summer of Code kickoff participants
  support-23-alt: Processing Foundation Fellow Cassie Tarakajian's workshop at Code Art Miami
  support-24-alt: >-
    Luisa Pereira and Yeseul Song facilitate a sign language based p5.js
    workshop
  support-25-alt: >-
    p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in
    Pittsburgh
  support-26-alt: >-
    Processing Fellow Digital Citizens Lab panel on STEM teaching at the
    International Center of Photography
  support-27-alt: 'Participants at p5.js workshop in Santiago, Chile'
  support-28-alt: Claire Kearney-Volpe helping facilitate a sign language based p5.js workshop
  support-29-alt: >-
    Processing Foundation Fellow DIY Girls run a creative coding program in Los
    Angeles
  support-30-alt: Processing Fellow Digital Citizens Lab
  support-31-alt: Bicoastal p5.js meetup at UCLA DMA and NYU ITP
learn:
  learn-title: Aprender
  teach-title2: Enseñar
  learn1: >-
    Estos tutoriales proveen una revisión en mayor profundidad o paso a paso
    sobre temas particulares. Revisa la 
  learn2: página de ejemplos
  learn3: ' para explorar demostraciones cortas sobre diversos temas de p5.js.'
  introduction-to-p5js-title: Introducción a p5.js
  hello-p5js-title: Hola p5.js
  hello-p5js: >-
    Este corto video te introducirá a la biblioteca y lo que puedes hacer con
    ella.
  getting-started-title: Empezar
  getting-started: >-
    ¡Bienvenido a p5.js!<br>Esta introducción cubre lo básico de cómo configurar
    un proyecto con p5.js
  p5js-overview-title: Panorámica de p5.js
  p5js-overview: Una panorámica de las principales características de p5.js
  p5js-processing-title: p5.js y Processing
  p5js-processing: 'Las principales diferencias entre ambos, y cómo convertir de uno a otro.'
  p5-screen-reader-title: p5 con un lector de pantalla
  p5-screen-reader: >-
    Configurando p5 para que pueda ser usado fácilmente con un lector de
    pantalla.
  using-local-server-title: Usando un servidor local
  labeling-canvases-title: How to label your p5.js code
  labeling-canvases: Using labels to make your code accessible to screen readers.
  labeling-canvases-intro-1: This tutorial will teach you how to use the
  labeling-canvases-intro-2: and
  labeling-canvases-intro-3: >-
    functions in your code so your canvases are readible by screen readers and
    other assistive technology.
  labeling-canvases-what-is-labeling: What is screen reader labeling?
  labeling-canvases-what-is-labeling-1: >-
    The canvas HTML element compresses the visuals created by your p5 code into
    a bitmap (a rastered graphic composed of pixels). This  bitmap on its own
    doesn't provide any significant meaning or description about its contents
    to  screen readers. That’s why the p5.js <a class = "code"
    href="https://p5js.org/reference/#/p5/describe">describe()</a>,  <a class =
    "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,
    <a class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>,  and <a
    class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions
    exist— these allow you to manually add screen reader-accessible descriptions
    to your  code so that screen reader technologies can describe the canvas’
    content in a meaningful way.
  labeling-canvases-what-is-labeling-2: >-
    Because a screen reader cannot naturally interpret the contents of a canvas
    bitmap, these functions  add labels into your code that instruct the screen
    reader on how to describe certain elements within your canvas.
  labeling-canvases-what-is-labeling-3: 'For more information about p5.js screen reader accessibility, please read '
  labeling-canvases-available-labels: Screen reader labels for p5.js
  labeling-canvases-available-labels-1: p5.js offers four different functions for labeling your canvas
  labeling-canvases-available-labels-li-1: >-
    <a class = "code"
    href="https://p5js.org/reference/#/p5/describe">describe()</a> provides an
    overall description of the canvas contents. This function's parameters
    include: <span class= "code">text</span>,  which affords a string of text
    for the label; and <span class = "code">display</span>, an optional
    parameter to set the visibility of the label.
  labeling-canvases-available-labels-li-2: >-
    <a class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    describes a specific element or a specific grouping of elements in a
    canvas.  This function's parameters include: <span class =
    "code">name</span>, which affords a string naming the element described;
    <span class = "code">text</span>, which affords a string of text as the
    label description;  and <span class="code">display</span>, an optional
    parameter to set the visibility of the label.
  labeling-canvases-available-labels-li-3: >-
    <a class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> generates
    a list providing a canvas description and its visual elements, including the
    canvas' size,  canvas color, as well as each visual element’s color,
    position, and the amount of area the element covers within the canvas. This
    function's only parameter is <span class = "code">display</span>, which is
    an optional  parameter to set the visibility of the label.
  labeling-canvases-available-labels-li-4: >-
    <a class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, like <a
    class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a>,
    generates a list of the canvas and its (visual) elements, only this
    function  arranges its output in a HTML table that plots the spatial
    location of each shape within the canvas. It also provides a basic 
    description of the canvas, including the canvas' size, canvas color, the
    number of visual elements, and the different visual element types inside the
    canvas. This function's only parameter is <span class =
    "code">display</span>, which is an optional  parameter to set the visibility
    of the label.
  labeling-canvases-best-practices: Labeling best practices
  labeling-canvases-best-practices-what-requires-labeling: What requires labeling?
  labeling-canvases-best-practices-what-requires-labeling-1: >-
    As a good rule of thumb, any visual element that is important to the overall
    context or purpose  of the canvas should be mentioned by the <a class =
    "code" href="https://p5js.org/reference/#/p5/describe">describe()</a> and/or
    <a class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    functions.
  labeling-canvases-best-practices-what-requires-labeling-2: >-
    Consider the overall purpose of the p5.js canvas and its contents in
    question, and label them in a way that makes  sense for the message,
    functionality, and/or purpose of the canvas and its elements. In the code
    block below, a heart is made within the canvas by placing two circles on top
    of a triangle.  Instead of individually labeling each shape used to make the
    heart, you should use one <a class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    function to describe  the overall shape you made.
  labeling-canvases-best-practices-what-requires-labeling-3: >-
    If, at any point, an element in your canvas undergoes a change or alteration
    in its visual appearance (and this change is  important to the overall
    meaning and context of the canvas), it’s best to also update the <a class =
    "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    label when that  change occurs.
  labeling-canvases-best-practices-what-requires-labeling-4: >-
    The canvas HTML element will also rasterize any text within it. Use the <a
    class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    function to translate any significant  text within your canvas.
  labeling-canvases-best-practices-what-requires-labeling-5: >-
    In short, any significant visual, textual, or animated information within
    the canvas should be labeled with a screen reader label.
  labeling-canvases-best-practices-dont-label: What DOESN'T need labeling
  labeling-canvases-best-practices-dont-label-1: >-
    Individual interactive elements, such as HTML buttons, dropdowns, or inputs,
    <i>do not</i> need to be labeled.  In the DOM, these elements are built
    outside of the p5.js canvas, and therefore can be interpreted by screen
    readers.
  labeling-canvases-best-practices-dont-label-2: >-
    This means the <a class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and <a
    class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions
    will not provide any information about these interactive inputs in their 
    reports of the canvas, should you use them.
  labeling-canvases-best-practices-using-labels: How to use labels
  labeling-canvases-best-practices-using-labels-all-canvases: For all canvases
  labeling-canvases-best-practices-using-labels-all-canvases-1: >-
    No matter the canvas’ purpose or contents, you should <i>always</i> use a
    label to supply an overall summary of the canvas. Most often,  you’ll use
    the <a class = "code"
    href="https://p5js.org/reference/#/p5/describe">describe()</a> function for
    this summary.
  labeling-canvases-best-practices-using-labels-all-canvases-2: >-
    The summary should provide a general understanding of the visuals inside the
    canvas.
  labeling-canvases-best-practices-using-labels-simple: 'For simple, non-animated canvases'
  labeling-canvases-best-practices-using-labels-simple-1: >-
    For canvases without any changing, moving, or interactive elements, you may
    use either the <a class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, or <a
    class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    functions to label the canvas’ visual content. However, keep in mind that <a
    class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and <a
    class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> generate
    their information based on  the rudimentary code of the visual element, such
    as its size, color, and shape. These functions won’t be able to interpret
    your  intention in using such a shape within a larger visual built using
    multiple shapes.
  labeling-canvases-best-practices-using-labels-simple-2: >-
    Keep in mind the context and objective of the canvas’ contents when choosing
    which function(s) to use. Is it better to describe the flower  as eight
    circles and a rectangle, or as a flower with red petals and a green stem?
    What kind of labeling will provide the best  description of your canvas?
  labeling-canvases-best-practices-using-labels-simple-3: >-
    If you are creating larger, multi-shaped visuals, then it would be best to
    use <a class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    to define each visual grouping  present within the canvas.
  labeling-canvases-best-practices-using-labels-interactive: For interactive or animated canvases
  labeling-canvases-best-practices-using-labels-interactive-1: >-
    If your canvas contains any animated elements or elements that change their
    visual form via user input (the click of a button, a  dropdown selection,
    etc.), be sure that any descriptions of such elements update with their
    changes or animations. If you are using  <a class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> or <a
    class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> to
    describe the contents of your canvas, so long as these functions are placed
    within the <a class = "code" href
    ="https://p5js.org/reference/#/p5/draw">draw()</a> function, they  will
    automatically update with the shape’s new information. If you are using <a
    class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,
    use concatenation or another form of  variable input to update the element’s
    description.
  labeling-canvases-best-practices-using-labels-interactive-2: >-
    If this interaction or animation is crucial to the overall purpose and/or
    message of the canvas, be sure to mention in either the <a class = "code"
    href="https://p5js.org/reference/#/p5/describe">describe()</a>  label or the
    individual element’s label that this element is (or can be) animated.
  labeling-canvases-best-practices-using-labels-interactive-3: >-
    Naturally-interactive HTML elements, such as buttons or inputs, <i>do
    not</i> need to have a label. Instead, follow the proper role and ID  syntax
    for these elements when possible. For more information about how to properly
    label and ID HTML  interactive elements, visit <a href=
    "https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML">Mozilla’s
    HTML: A good basis for accessibility</a>.
  labeling-canvases-best-practices-using-labels-complex: For complex canvases
  labeling-canvases-best-practices-using-labels-complex-1: >-
    The p5 functions listed above do not afford the more complicated features of
    ARIA labeling, such as <span class="code">aria-live</span> or <span
    class="code">aria-atomic</span>.  For advanced canvases, using vanilla ARIA
    labeling and custom-built fallback content might better convey the canvas’ 
    information to screen readers. Some cases where the canvas’ content cannot
    be accurately described (or represented) through p5.js’ supplied  screen
    reader labels include:
  labeling-canvases-best-practices-using-labels-complex-ul-1: >-
    Canvases with content that changes extensively via external interactive
    elements.
  labeling-canvases-best-practices-using-labels-complex-ul-2: >-
    Canvases with content that requires the user’s attention if it is changed or
    altered by another element, especially if that element is not  embedded in
    the canvas’ code.
  labeling-canvases-best-practices-using-labels-complex-ul-3: >-
    Canvases with complex element layouts that cannot be accurately represented
    using the <a class = "code"
    href="https://p5js.org/reference/#/p5/describe">describe()</a>, <a class =
    "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, or <a
    class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>
    functions.
  labeling-canvases-best-practices-using-labels-complex-2: >-
    For more information about fallback content, visit <a
    href="https://www.w3.org/html/wg/wiki/DefinitionFallBackContent">W3C’s
    Wiki</a>. For more information about complex ARIA labeling,  visit <a
    href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes">Mozilla’s
    ARIA states and properties</a>.
  labeling-canvases-how-not-to-use-labels: How NOT to use labels
  labeling-canvases-how-not-to-use-labels-sub: As a substitution for poorly organized code
  labeling-canvases-how-not-to-use-labels-sub-1: >-
    Screen reader labels should not be used as a way of commenting your code.
    These labels  should only be used to summarize the resulting visual elements
    within a canvas.
  labeling-canvases-how-not-to-use-labels-info-overkill: As information overkill
  labeling-canvases-how-not-to-use-labels-info-overkill-1: >-
    If you overuse screen reader labels in your code, you may end up overly
    complicating the screen reader’s interpretation of the canvas rather than
    helping it.
  labeling-canvases-how-not-to-use-labels-info-overkill-2: >-
    Within reason, less is more with screen reader labeling. Be concise,
    accurate, and short with your label descriptions.
  labeling-canvases-how-not-to-use-labels-info-overkill-3: >-
    Do not use both the <a class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and <a
    class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions
    in the same canvas. You only need to use one or the other to describe the
    canvas elements.  Using both will cause redundancy in the screen readers’
    translation of your code. This also pertains to using <a class = "code"
    href="https://p5js.org/reference/#/p5/textOutput">textOutput()</a> or  <a
    class = "code"
    href="https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> with
    additional <a class = "code"
    href="https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    labels. It’s best to choose one strategy of labeling for your entire canvas,
    and stick with it.
  labeling-canvases-testing-labels: Testing labels during development
  labeling-canvases-testing-labels-1: >-
    All these functions have a display parameter that either keeps its output
    only available to screen readers <span class="code">(FALLBACK)</span> or
    presents the output as text  adjacent to the canvas <span
    class="code">(LABEL)</span>. If you would like to see the output during
    development, add <span class="code">LABEL</span> as the last parameter for
    the function. <span class="code">FALLBACK</span> is the default parameter.
  labeling-canvases-testing-labels-2: >-
    When testing your labels, consider the following questions: Do your canvas
    labels provide enough information for someone to understand its purpose? If
    this canvas  exists on a website, or among any other content, would someone
    have a good understanding of how the canvas’ content interacts and/or
    pertains to the surrounding context?
  labeling-canvases-testing-labels-3: >-
    In order to reduce redundancy, be sure to reset the display parameter to
    <span class="code">FALLBACK</span> once you’ve tested the output. With <span
    class="code">LABEL</span> active, screen readers will read the fallback
    text  and the visible label text when focused on the canvas.
  labeling-canvases-note: >-
    Notice any errors or typos? Please let us know. If you would like to
    contribute to this tutorial, feel free to issue a <a href =
    "https://github.com/processing/p5.js-website">pull request</a>!
  using-local-server: 'Cómo configurar un servidor local en Mac OS X, Windows o Linux.'
  p5js-wiki-title: p5.js wiki
  p5js-wiki: Documentación adicional y tutoriales aportados por la comunidad.
  connecting-p5js-title: Conectando p5.js
  creating-libraries-title: Crear bibliotecas
  creating-libraries: Creando bibliotecas adicionales para p5.js.
  nodejs-and-socketio-title: node.js y socket.io
  nodejs-and-socketio: Uso de un servidor node.js con p5.js y comunicación vía socket.io.
  programming-topics-title: Tópicos de programación
  beyond-the-canvas-title: Más allá del lienzo
  beyond-the-canvas: 'Creación y manipulación de elementos en la página, más allá del lienzo.'
  getting-started-in-webgl-other-tutorials-title: Other Tutorials
  getting-started-in-webgl-other-tutorials-p: >-
    This tutorial is part of a series about the basics of using WebGL in p5.js.
    Check out each of these other tutorials below.
  getting-started-in-webgl-other-tutorials-tut1: Coordinates and Transformations
  getting-started-in-webgl-other-tutorials-tut2: Creating Custom Geometry in WebGL
  getting-started-in-webgl-other-tutorials-tut3: Styling and Appearance
  getting-started-in-webgl-other-tutorials-tut4: Introduction to Shaders
  getting-started-in-webgl-other-tutorials-you-are-here: (you are here)
  getting-started-in-webgl-title: Getting Started in WebGL
  getting-started-in-webgl-glossary-title: Glossary
  getting-started-in-webgl-coords-and-transform-title: Coordinates and Transformations
  getting-started-in-webgl-coords-and-transform: 'Basics of 3D setup, coordinates, and transformations'
  getting-started-in-webgl-coords-and-transform-p1x1: >-
    p5.js is a powerful tool for creating 2D graphics but it's also capable of
    3D graphics. To get started in 3D there are some new concepts to learn and
    this document will introduce some ideas that will be important to any 3D
    sketch.
  getting-started-in-webgl-coords-and-transform-toc-title: Table of Contents
  getting-started-in-webgl-coords-and-transform-heading1: What is WebGL
  getting-started-in-webgl-coords-and-transform-p2x1: >-
    WebGL is a library that gives us the tools we need to create 3D graphics
    within a web browser. To put it simply, it allows us to do all kinds of math
    that help arrange and display objects in 3D. p5.js makes it easier to work
    with WebGL through its special WebGL mode.
  getting-started-in-webgl-coords-and-transform-p3x1: >-
    Working in 3D introduces a lot of complexity, especially when a sketch
    involves motion, texture, lighting, and more. Luckily for us, computers have
    special hardware that is particularly well suited to performing those
    calculations, the graphics processing unit (GPU). The GPU is capable of
    processing many things simultaneously, which is especially important when
    we're dealing with pixels and many shapes in space.
  getting-started-in-webgl-coords-and-transform-p4x1: >-
    Let's get started by setting up the p5.js to use WebGL, by passing a third
    parameter into <a class="code">createCanvas()</a>.
  getting-started-in-webgl-coords-and-transform-heading2: '3D Coordinate Space: Positioning in 3D'
  getting-started-in-webgl-coords-and-transform-info1x1: >-
    If coordinates systems aren't making sense it might be helpful to revisit
    the tutorial titled <a
    href="{{root}}/learn/coordinate-system-and-shapes.html">Coordinate System
    and Shapes</a>.
  getting-started-in-webgl-coords-and-transform-info1x2: Coordinate System and Shapes
  getting-started-in-webgl-coords-and-transform-p5x1: >-
    One of the most fundamental differences between working in 2D and working in
    3D is the most obvious: there is one more dimension to work with. In
    addition to the horizontal and vertical position (x and y axes) of an
    element in our drawing, 3D adds depth, the z-axis. 
  getting-started-in-webgl-coords-and-transform-p6x1: >-
    When drawing in 2D, the point (0,0) is located at the top left corner of the
    screen. In WebGL mode, the origin of the sketch (0,0,0) is located in the
    middle of the screen. By default, the x-axis goes left-to-right, y-axis goes
    up-to-down, and the z-axis goes from further-to-closer.
  getting-started-in-webgl-coords-and-transform-heading3: 'Transformations: Position and Size of 3D Shapes'
  getting-started-in-webgl-coords-and-transform-p7x1: >-
    p5.js has a few methods, <a class="code"
    href="{{root}}/reference/#/p5/translate">translate()</a>, <a class="code"
    href="{{root}}/reference/#/p5/rotate">rotate()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/scale">scale()</a>, that we can use to
    position and orient objects within space. Each of these methods affect what
    is known as the <em>model matrix</em>. Collectively these are known as the
    <em>transformation</em> of an object. These methods are available for both
    2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-p7x2: 'and '
  getting-started-in-webgl-coords-and-transform-p7x3: >-
    that we can use to position and orient objects within space. Each of these
    methods affect what is known as the <em>model matrix</em>. Collectively
    these are known as the <em>transformation</em> of an object. These methods
    are available for both 2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-subheading1: 'translate(): Moving Objects in Space'
  getting-started-in-webgl-coords-and-transform-p8x1: >-
    <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a>
    moves the origin in a given direction. Anything drawn after we call <a
    class="code">translate()</a> will be positioned relative to that point. <a
    class="code">translate()</a> accepts arguments for x, y, and z values. Use
    the sliders in the sketch above to change the translation of the box and see
    how it moves along each axis. The code below demonstrates simple translation
    on a <a class="code">box()</a> shape.
  getting-started-in-webgl-coords-and-transform-subheading2: 'rotate(): Orienting Objects in Space'
  getting-started-in-webgl-coords-and-transform-p9x1: >-
    <a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a> reorients
    whatever is drawn after it.
  getting-started-in-webgl-coords-and-transform-p10x1: >-
    There are a few methods that can be used to rotate an object in 3D. Most of
    the time it's easiest to call methods like like <a class="code"
    href="{{root}}/reference/#/p5/rotateX">rotateX()</a>, <a class="code"
      href="{{root}}/reference/#/p5/rotateY">rotateY()</a>, and <a class="code"
      href="{{root}}/reference/#/p5/rotateZ">rotateZ()</a>, which each allow for rotation around a specific axis.
    Each of these methods accept a single argument specifying the angle of
    rotation. Try moving the sliders in the example above to see how rotation is
    performed on each axis. The code below shows each of these methods in use.
  getting-started-in-webgl-coords-and-transform-p10x2: 'and '
  getting-started-in-webgl-coords-and-transform-p10x3: >-
    , which each allow for rotation around a specific axis. Each of these
    methods accept a single argument specifying the angle of rotation. Try
    moving the sliders in the example above to see how rotation is performed on
    each axis. The code below shows each of these methods in use.
  getting-started-in-webgl-coords-and-transform-p11x1: >-
    By default p5.js will expect angles to be in radians. Radians use numbers
    from 0 - <a class="code">TWO_PI</a> to specify an angle. To use degrees,
    either convert degrees to radians using <a class="code">radians()</a>, or
    use <a class="code">angleMode(DEGREES)</a>.
  getting-started-in-webgl-coords-and-transform-info2x1: >-
    <p>You can also use <a class="code"
    href="{{root}}/reference/#/p5/rotate">rotate()</a>, which allows you to
    specify which axis you'd like to rotate around using a vector as the second
    argument.</p>
  getting-started-in-webgl-coords-and-transform-info2x2: >-
    , which allows you to specify which axis you'd like to rotate around using a
    vector as the second argument.
  getting-started-in-webgl-coords-and-transform-subheading3: 'scale(): Size in Space'
  getting-started-in-webgl-coords-and-transform-p12x1: >-
    <a class="code" href="{{root}}/reference/#/p5/scale">scale()</a> changes the
    size of whatever is drawn after it. Like the other methods described so far,
    it accepts arguments for x, y, and z values.
  getting-started-in-webgl-coords-and-transform-heading4: The Order of Transformations Matters!
  getting-started-in-webgl-coords-and-transform-p13x1: >-
    Something that can feel unpredictable at first is the order of
    transformations. Each transformation always affects the next one. For
    example, if <a class="code">rotate()</a> is called, followed by <a
    class="code">translate()</a>, the direction of that translation will be
    affected by the rotation. The entire coordinate system is rotating and
    moving, not just the shape itself. 
  getting-started-in-webgl-coords-and-transform-p14x1: >-
    Transformations can be performed in any order, but using
    <strong>translate</strong>, <strong>rotate</strong>, and then
    <strong>scale</strong> will be the most intuitive. Translation, followed by
    rotation, produces the effect of moving the shape <em>and then</em> rotating
    around that new location.
  getting-started-in-webgl-coords-and-transform-p15x1: >-
    In the below example, try changing the order of <a
    class="code">translate()</a> and <a class="code">rotateY()</a> and see how
    it affects where the object is drawn.
  getting-started-in-webgl-coords-and-transform-p16x1: >-
    p5.js also has some methods that can control when transformations are
    applied: <a class="code" href="{{root}}/reference/#/p5/push">push()</a> and
    <a class="code" href="{{root}}/reference/#/p5/pop">pop()</a>. <a
    class="code">push()</a> and <a class="code">pop()</a> make it easier to move
    objects individually. The <a class="code">push()</a> method saves and sets
    aside the current transformations. The <a class="code">pop()</a> method
    restores those transformations. Whatever transformations that are made
    between <a class="code">push()</a> and <a class="code">pop()</a> will be
    isolated to that portion of the code. If you don’t use <a
    class="code">push()</a> and <a class="code">pop()</a>, you have to keep
    track of whatever transformations have already taken place, which can get
    complicated and difficult to follow. Consider this following example, which
    places two boxes in our sketch. To position the second box without <a
    class="code">push()</a> and <a class="code">pop()</a>, you have to account
    for the first transformation. This  can be a lot to keep track of in a more
    complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p16x2: and
  getting-started-in-webgl-coords-and-transform-p16x3: >-
    . <a class="code">push()</a> and <a class="code">pop()</a> make it easier to
    move objects individually. The <a class="code">push()</a> method saves the
    current transformations and  style settings. Then, after performing new
    transformations, the <a class="code">pop()</a> method is used to restore us
    to the the original transformations. The result is that  whatever
    transformations or styling changes that are made between <a
    class="code">push() </a> and <a class="code">pop()</a> are isolated to that
    portion of the code. If you don’t  use <a class="code">push()</a> and <a
    class="code">pop()</a>, you have to keep track of whatever transformations
    have already taken place, which can get complicated and difficult to follow.
    Consider this following example, which places two boxes in our sketch. To
    position the second box without <a class="code">push()</a> and <a
    class="code">pop()</a>, you have to account for the first transformation.
    This  can be a lot to keep track of in a more complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p17x1: >-
    Now, let's try the same code with <a class="code">push()</a> and <a
    class="code">pop()</a>. Now we can just translate the object where we want
    it, without having to remember where our coordinate system lies.
  getting-started-in-webgl-coords-and-transform-info3x1: >-
    <p>While this is a more advanced topic, each of these transformations affect
    what is called the model matrix. The transformation matrix is combined with
    the view matrix and the projection matrix, both of which help simulate the
    view of a camera, and this combination results in our 3D scene! </p> <a
    href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">
    Learn more about Model View Projection </a>
  getting-started-in-webgl-coords-and-transform-p18x1: >-
    In the below example, try removing <a class="code">push()</a> and <a
    class="code">pop()</a> to see how the transformations affect the second
    object that is drawn. 
  getting-started-in-webgl-coords-and-transform-heading5: Basic Shapes in 3D
  getting-started-in-webgl-coords-and-transform-p19x1: >-
    So far we have only been using <a class="code">box()</a> but p5.js has seven
    different predefined geometries that you can use in your sketch. These basic
    predefined geometries are often referred to as 'primitives'.
  getting-started-in-webgl-coords-and-transform-p20x1: >-
    These primitive shape methods are: <a class="code"
    href="{{root}}/reference/#/p5/box">box()</a>, <a class="code"
    href="{{root}}/reference/#/p5/plane">plane()</a>, <a class="code"
    href="{{root}}/reference/#/p5/sphere">sphere()</a>, <a class="code"
    href="{{root}}/reference/#/p5/ellipsoid">ellipsoid()</a>, <a class="code"
    href="{{root}}/reference/#/p5/cone">cone()</a>, <a class="code"
    href="{{root}}/reference/#/p5/cylinder">cylinder()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/torus">torus()</a>.
  getting-started-in-webgl-coords-and-transform-p20x2: and
  getting-started-in-webgl-coords-and-transform-p21x1: >-
    It is also possible to create custom geometry, either from scratch or from
    3D models created in another program. More information about custom geometry
    can be found the <a
    href="{{root}}/learn/getting-started-in-webgl-custom-geometry.html">Custom
    Geometry tutorial</a>.
  getting-started-in-webgl-coords-and-transform-p21x2: 'Custom Geometry tutorial    '
  getting-started-in-webgl-coords-and-transform-heading6: Conclusion
  getting-started-in-webgl-coords-and-transform-p22x1: >-
    By having basic control over a 3D coordinate space, transformations,  and
    basic shapes, you should be able to begin creating basic scenes in 3D. The
    tutorials that follow this in the Getting Started in WebGL series will
    introduce custom geometries, allow you to tweak the appearance of  the
    scene, and introduce you to some basic shader programming to push your
    sketches further.
  getting-started-in-webgl-coords-and-transform-glossary-term1-title: GPU
  getting-started-in-webgl-coords-and-transform-glossary-term1-definition: >-
    The GPU (Graphics Processing Unit) is a piece of hardware that is
    particularly well suited for performing many calculations in parallel,
    making it powerful for 3D graphics.
  getting-started-in-webgl-coords-and-transform-glossary-term2-title: Model
  getting-started-in-webgl-coords-and-transform-glossary-term2-definition: A custom 3D geometry that can be saved and loaded from a file.
  getting-started-in-webgl-coords-and-transform-glossary-term3-title: Matrix
  getting-started-in-webgl-coords-and-transform-glossary-term3-definition: >-
    A special array that can hold information about the transformation of a
    geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term4-title: Camera
  getting-started-in-webgl-coords-and-transform-glossary-term4-definition: The viewpoint of a 3D scene.
  getting-started-in-webgl-coords-and-transform-glossary-term5-title: Transform
  getting-started-in-webgl-coords-and-transform-glossary-term5-definition: >-
    Also referred to as <em>transformation</em>, this refers to the combined
    scale, rotation, and translation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term6-title: Vertex
  getting-started-in-webgl-coords-and-transform-glossary-term6-definition: 'A point in 3D space, with an x, y, z position.'
  getting-started-in-webgl-coords-and-transform-glossary-term7-title: Face
  getting-started-in-webgl-coords-and-transform-glossary-term7-definition: A collection of three points that create a solid surface.
  getting-started-in-webgl-custom-geometry-title: Creating Custom Geometry in WebGL
  getting-started-in-webgl-custom-geometry: Creating custom geometry in WebGL
  getting-started-in-webgl-custom-geometry-p1x1: >-
    p5.js has a number of basic shapes, like <a class="code">box()</a> or <a
    class="code">sphere()</a>, but p5.js is also capable of rendering complex
    custom geometry, both from 3D model files or from code. This tutorial will
    walk through how to import 3D models into p5.js, as well as how to create
    geometry from scratch.
  getting-started-in-webgl-custom-geometry-info1x1: >-
    If you are new to 3D check out the  <a
    href="{{root}}/learn/getting-started-in-webgl-coords-and-transform.html">
    Coordinates and Transformations</a> tutorial.
  getting-started-in-webgl-custom-geometry-info1x2: tutorial.
  getting-started-in-webgl-custom-geometry-toc-title: Table of Contents
  getting-started-in-webgl-custom-geometry-heading1: Loading 3D Models from File
  getting-started-in-webgl-custom-geometry-p2x1: >-
    Custom geometry can be imported into p5.js using either OBJ or STL files.
    These files are usually generated in a 3D modeling tool like Blender, which
    offers much more control when constructing a 3D scene. This is done using
    the <a class="code" href="{{root}}/reference/#/p5/loadModel">loadModel()</a>
    method, which should be used within <a class="code">preload()</a>.
  getting-started-in-webgl-custom-geometry-p2x2: >-
    method, which should be used within <a class="code">preload()</a>. Then you
    can use the 
  getting-started-in-webgl-custom-geometry-p2x3: 'function to draw the model, as demonstrated in the example below.'
  getting-started-in-webgl-custom-geometry-p3x1: >-
    A common issue that can come up with custom models is scaling. Depending on
    how the model is constructed, it might be a much different size when
    rendered in p5.js, or even be too small to be rendered at all. The <a
    class="code">loadModel()</a> method includes a normalize parameter that will
    resize the model to something that works better in p5.js.
  getting-started-in-webgl-custom-geometry-info2x1: >-
    Note that there is currently no support for STL files with color, although
    you can add color using materials or textures, which you can learn about in
    the <a
    href="{{root}}/learn/getting-started-in-webgl-appearance.html">Styling and
    Appearance</a> tutorial.
  getting-started-in-webgl-custom-geometry-info2x2: 'Styling and Appearance    '
  getting-started-in-webgl-custom-geometry-info2x3: tutorial.
  getting-started-in-webgl-custom-geometry-heading2: Creating Basic Procedural Geometry
  getting-started-in-webgl-custom-geometry-p4x1: >-
    Geometry can also be defined procedurally using code. This is a great way to
    create geometry that moves or is formed using your own set of rules. There
    are a number of methods that can be used to create 3D geometry in a way that
    is similar to 2D drawing in p5.js. For example, methods like <a
    class="code">quad()</a>, <a class="code">triangle()</a>, <a
    class="code">rect()</a>, and <a class="code">circle()</a> each have extra
    parameters that make it possible to use them in 3D.
  getting-started-in-webgl-custom-geometry-p5x1: >-
    There are other methods that offer greater control of the geometry. A shape
    can be defined point-by-point using <a class="code"
    href="{{root}}/reference/#/p5/beginShape">beginShape()</a>, <a class="code"
    href="{{root}}/reference/#/p5/vertex">vertex()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/endShape">endShape()</a>. This following
    example shows how these methods can be used to construct a 3D shape
    mathematically.
  getting-started-in-webgl-custom-geometry-p5x2: 'and '
  getting-started-in-webgl-custom-geometry-p5x3: >-
    This following example shows how these methods can be used to construct a 3D
    shape mathematically.
  getting-started-in-webgl-custom-geometry-p6x1: >-
    There is also a powerful class, <a class="code"
    href="{{root}}/reference/#/p5/p5.Geometry">p5.Geometry</a>, which p5 uses
    internally for <a class="code">loadModel()</a> but can also be used to
    define custom geometry, offering tools that can be helpful in calculating
    faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x1_: >-
    , which p5.js uses internally for <a class="code">loadModel()</a> but can
    also be used to define custom geometry, offering tools that can be helpful
    in calculating faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x2: >-
    In 3D, a face refers to a collection of three or four points that make up a
    surface, giving our geometry the appearance of being solid. A normal is the
    direction that is perpendicular to the face, which helps p5.js calculate
    lighting across the surface.
  getting-started-in-webgl-custom-geometry-p6x3: >-
    In the following example, <a class="code">p5.Geometry</a> is used to plot a
    grid of points for the geometry. Then, <a class="code">computeFaces()</a> is
    used to give the geometry a solid appearance and <a
    class="code">computeNormals()</a> allows our geometry to have proper
    lighting.
  getting-started-in-webgl-custom-geometry-heading3: Conclusion
  getting-started-in-webgl-custom-geometry-p7x1: >-
    Now you should be able to create custom geometry, making it possible to
    create unique shapes, both from other tools and from code. Spend some time
    working with a variety of 3D modeling tools so you can find the one that
    works best for you.
  getting-started-in-webgl-custom-geometry-glossary-term1-title: Procedural
  getting-started-in-webgl-custom-geometry-glossary-term1-definition: >-
    Meaning that something is defined mathematically, instead of from stored
    data, like a file.
  getting-started-in-webgl-custom-geometry-glossary-term2-title: Model
  getting-started-in-webgl-custom-geometry-glossary-term2-definition: A representation of geometry.
  getting-started-in-webgl-custom-geometry-glossary-term3-title: STL
  getting-started-in-webgl-custom-geometry-glossary-term3-definition: >-
    STL (most often standing for "standard tesselation language") is a file
    format for 3D models.  It only stores information about the geometry.
  getting-started-in-webgl-custom-geometry-glossary-term4-title: OBJ
  getting-started-in-webgl-custom-geometry-glossary-term4-definition: >-
    OBJ is an open file format that stores geometry data as well as some
    material and texture data. In p5.js, we are limited to its geometry,
    although an image can still be mapped to the surface using textures.
  getting-started-in-webgl-custom-geometry-glossary-term5-title: Faces
  getting-started-in-webgl-custom-geometry-glossary-term5-definition: The solid surface that is generated between three points.
  getting-started-in-webgl-custom-geometry-glossary-term6-title: Normals
  getting-started-in-webgl-custom-geometry-glossary-term6-definition: >-
    The direction that is perpendicular to a face, which is often needed when
    calculating lighting or using materials.
  getting-started-in-webgl-custom-geometry-glossary-term7-title: Normalization
  getting-started-in-webgl-custom-geometry-glossary-term7-definition: Changing something so that it fits within a standard range.
  getting-started-in-webgl-appearance-title: Styling and Appearance
  getting-started-in-webgl-appearance: The basics of materials and lighting in WebGL
  getting-started-in-webgl-appearance-p0x1: >-
    Creating in 3D is about more than just geometry. Cameras, lights, and
    materials are an important part of creating a visually interesting 3D scene.
    p5.js has a number of tools that make it possible to transform the
    appearance of our geometry.
  getting-started-in-webgl-appearance-toc-title: Table of Contents
  getting-started-in-webgl-appearance-heading1: Camera and View
  getting-started-in-webgl-appearance-p1x1: >-
    The camera is an essential piece of a 3D scene; it gives us the sense of
    space and dimension that we are often looking for in 3D. In p5.js, the WebGL
    mode provides us with a perspective camera by default, but we can change
    this using <a class="code"
    href="{{root}}/reference/#/p5/perspective">perspective()</a> or <a
      class="code" href="{{root}}/reference/#/p5/ortho">ortho()</a>.
  getting-started-in-webgl-appearance-p1x2: 'or '
  getting-started-in-webgl-appearance-p2x1: >-
    A <em>perspective camera</em> skews objects so they appear to get smaller as
    they get further away, vanishing at a single point in the distance. This is
    in contrast to an <em>orthographic camera</em>, where the  geometry stays
    the same size as it gets further away and has no vanishing point. 
  getting-started-in-webgl-appearance-p3x1: >-
    One setting that we can change with a perspective camera is the
    <em>field-of-view</em>, or FOV. This is the  term that is used to describe
    how much our camera can see, measured as an angle. In simple examples it
    might appear to have a zoom-like effect, but it will change way that shapes
    will change size in the distance.
  getting-started-in-webgl-appearance-p4x1: >-
    Another important term when working with cameras in 3D is the camera
    <em>frustum</em>. The frustum of the camera the shape of the camera's view,
    a pyramid-like shape within which geometry can be displayed. The frustum
    includes a <em>near and far plane</em>. The near plane defines the minimum
    distance that geometry must be from the camera to be rendered. The far plane
    defines the maximum distance that the geometry can be from the camera. Each
    of these can be changed to affect how close and how far the camera can see.
    This process of selectively including geometry is sometimes referred to as
    'clipping'.
  getting-started-in-webgl-appearance-p5x1: >-
    Cameras can be moved by passing arguments to <a class="code">camera()</a>,
    but constantly moving and adjusting the camera in code can be tedious,
    especially when you are experimenting with ideas. p5.js has a special camera
    method, <a class="code"
      href="{{root}}/reference/#/p5/orbitControl">orbitControl()</a>, that can be used to zoom, pan,
    and position the camera using the mouse.
  getting-started-in-webgl-appearance-p5x2: ', that can be used to zoom, pan, and position the camera using the mouse.'
  getting-started-in-webgl-appearance-p6x1: >-
    A scene can have multiple cameras, but only one camera can be active at a
    time. Sketches in p5.js will default to having a single perspective camera,
    but that can be changed by calling either <a
      class="code">perspective()</a>
    (with new parameters) or <a class="code">ortho()</a>. <a
    class="code">camera()</a> can be used to change the position of the active
    camera and the position that the camera is looking at. Try it out in the
    sketch below.
  getting-started-in-webgl-appearance-heading2: Lighting
  getting-started-in-webgl-appearance-p7x1: >-
    Lighting is another essential part of a 3D scene. To be able to convey shape
    and depth in 3D is necessary to have a light source. p5.js has a few
    different types of light that can be used in a sketch.
  getting-started-in-webgl-appearance-lighting-list1: >-
    Ambient light makes everything display a little brighter, with no
    consideration for light position or direction.
  getting-started-in-webgl-appearance-lighting-list2: >-
    A directional light shines from one direction, which can be especially
    useful for communicating depth in a scene, or when a scene needs a 'sun'
    light. This method accepts a color and direction.
  getting-started-in-webgl-appearance-lighting-list3: >-
    A point light emits from a single point in all directions, similar to
    something like a lightbulb. This method accepts a color and a position for
    the light.
  getting-started-in-webgl-appearance-lighting-list4: >-
    A spot light emits from a single point in a single direction. This light is
    cast in a conical shape and it's radius and concentration can be adjusted.
  getting-started-in-webgl-appearance-lighting-list5: >-
    noLights() makes it so that all subsequent geometry is rendered without any
    lighting. This can be useful when you want flat, unshaded geometry.
  getting-started-in-webgl-appearance-p8x1: >-
    These lights should be used within <a class="code">draw()</a>. Up to 5
    lights can be used in a scene simultaneously, allowing you to compose a
    scene with varied and complex lighting sources.  Try checking and unchecking
    the boxes in the following interactive example to see how lighting can be
    blended together. For each active light source there are visual indicators
    of their position or direction, just know that these are here for
    illustrative purposes!
  getting-started-in-webgl-appearance-p9x1: >-
    In this next example, try commenting and uncommenting each light and
    experiment with their parameters.
  getting-started-in-webgl-appearance-heading3: Materials and Textures
  getting-started-in-webgl-appearance-p10x1: >-
    Objects can appear differently based on their material. Materials dictate
    how light interacts with the geometry and how color (or texture) gets
    applied to the object. Materials can be varied, making objects shiny, rough,
    or even textured with images.
  getting-started-in-webgl-appearance-p11x1: >-
    In this interactive example, try selecting each of the different materials
    to see how they affect the appearance of the geometry. You can move your
    mouse and see the effect that a directional light has on the material. 
  getting-started-in-webgl-appearance-p12x1: 'Try commenting and uncommenting the different lights in this example:'
  getting-started-in-webgl-appearance-p13x1: >-
    More custom materials can be achieved through using <a
    class="code">texture()</a>. In short, these are images that can be mapped
    onto the surface of a geometry. These textures can be imported from an image
    and can even be generated within code using shaders. To map a texture to
    your geometry, use <a class="code">loadImage()</a>  within <a
    class="code">preload()</a>, then call <a class="code">texture()</a> before
    drawing your shape.
  getting-started-in-webgl-appearance-info1x1: >-
    While they are useful for changing the appearance of your geometry, shaders
    are a bit beyond the scope of this  tutorial, so make sure to check out the
    <a href="{{root}}/learn/introduction-to-shaders.html">Introduction to
    Shaders</a>  page when you are ready. 
  getting-started-in-webgl-appearance-info1x2: Introduction to Shaders
  getting-started-in-webgl-appearance-info1x3: 'page when you are ready. '
  getting-started-in-webgl-appearance-heading4: Conclusion
  getting-started-in-webgl-appearance-p14x1: >-
    Being able to have control over the camera, lighting, and materials will
    give you much more flexibility to decide how your sketch looks, and it will
    open up the possibilities for you to introduce your own style to your 3D
    sketches. The following tutorial in the Getting Started in WebGL series will
    introduce you to shaders, which will make it possible to change the
    appearance of your sketch in even more interesting ways.
  getting-started-in-webgl-appearance-glossary-term1-title: Camera
  getting-started-in-webgl-appearance-glossary-term1-definition: The viewpoint of a 3D scene
  getting-started-in-webgl-appearance-glossary-term2-title: Perspective
  getting-started-in-webgl-appearance-glossary-term2-definition: >-
    A projection that gives the appearance of depth, achieved by making objects
    in the distance appear smaller.
  getting-started-in-webgl-appearance-glossary-term3-title: Orthographic
  getting-started-in-webgl-appearance-glossary-term3-definition: >-
    A projection that is <em>orthogonal</em> and unaffected by depth. It gives
    the appearance of being two-dimensional.
  getting-started-in-webgl-appearance-glossary-term4-title: Field-of-View
  getting-started-in-webgl-appearance-glossary-term4-definition: The angle representing how much can be seen by the camera.
  getting-started-in-webgl-appearance-glossary-term5-title: Frustum
  getting-started-in-webgl-appearance-glossary-term5-definition: >-
    The geometric shape representing the full area that can be viewed by the
    camera.
  getting-started-in-webgl-appearance-glossary-term6-title: Near and Far Plane
  getting-started-in-webgl-appearance-glossary-term6-definition: >-
    The near plane represents the minimum distance a geometry must be from the
    camera to be displayed, while the far plane represents the maximum distance.
  getting-started-in-webgl-appearance-glossary-term7-title: Clipping
  getting-started-in-webgl-appearance-glossary-term7-definition: >-
    Selectively showing some geometry and not others, such as when geometry
    falls outside of the camera frustum.
  getting-started-in-webgl-shaders-title: Introduction to Shaders
  getting-started-in-webgl-shaders: The basics of creating shaders within p5js using WebGL
  getting-started-in-webgl-shaders-p0x1: >-
    Shaders are special programs that run on the graphics processing unit, or
    GPU, that can do some incredible things. They take advantage of the GPU to
    process many pixels at once, making them fast and particularly well suited
    for certain tasks, like generating noise, applying filters like blur, or
    shading polygons. Shader programming can feel daunting at first, requiring a
    different approach than the 2D drawing of p5.js. This document will outline
    the basics  of shader programming and point you towards other resources.
  getting-started-in-webgl-shaders-toc-title: Table of Contents
  getting-started-in-webgl-shaders-heading1: Setup
  getting-started-in-webgl-shaders-p1x1: >-
    p5.js is a great tool for working with shaders because it handles a lot of
    the WebGL setup so you can focus on the shader code itself. Before we can
    get started with shaders we have to set up our canvas so that it uses p5.js
    WebGL model.
  getting-started-in-webgl-shaders-p2x1: >-
    A shader program consists of two parts, a <strong>vertex shader</strong> and
    a <strong>fragment
      shader</strong>. The vertex shader affects where the 3D geometry is drawn on the screen and the fragment
    shader is responsible for affecting the color output. Each of these live in
    separate files and are loaded into p5.js using <a
    class="code">loadShader()</a>. Once a shader is loaded it can be used within
    <a
      class="code">draw()</a>. The following example will show
    how to set up a basic shader within p5.js:
  getting-started-in-webgl-shaders-heading2: Shading Language (GLSL)
  getting-started-in-webgl-shaders-p3x1: >-
    So now you might be wondering what we actually write in these shader files!
    Shader files are written in Graphics Library Shading Language, or GLSL, and
    have a very different syntax and structure than we are familiar with. GLSL
    has a syntax that resembles C, which means it comes with a handful of
    concepts that aren't present in JavaScript.
  getting-started-in-webgl-shaders-p4x1: >-
    For one, the shading language is much more strict about types. Each variable
    you create has to be labeled with the kind of data it is storing. Here is a
    list of some of the common types:
  getting-started-in-webgl-shaders-typelist: |
    vec2(x,y)     // a vector of two floats
    vec3(r,g,b)   // a vector of three floats
    vec4(r,g,b,a) // a vector of four floats
    float         // a number with decimal points
    int           // a whole number without decimal points
    sampler2D     // a reference to a texture
  getting-started-in-webgl-shaders-p5x1: >-
    In general the shading language is much more strict than JavaScript. A
    missing semicolon for example is not allowed and will result in an error
    message. You can't use different types of numbers, like floats or integers
    interchangeably.
  getting-started-in-webgl-shaders-p6x1: 'First let''s look at a basic vertex shader:'
  getting-started-in-webgl-shaders-p7x1: >-
    This vertex shader begins with an <em>attribute</em>, which p5.js uses to
    share vertex position information with the shader. This attribute is a <a
    class="code">vec3</a>, meaning it contains a value for x, y, and z.
    Attributes are special variable types that are only used in the vertex
    shader and are typically provided by p5.js.
  getting-started-in-webgl-shaders-p8x1: >-
    All vertex shaders require a function, <a class="code">main()</a>, within
    which we position our vertices. In this example, the vertex shader
    repositions our vertices so that the shader output takes up the full sketch.
    At the end of <a
      class="code">main()</a>,
    we have to assign a value to <a class="code">gl_Position</a>.
  getting-started-in-webgl-shaders-p9x1: >-
    Don't worry if this doesn't make a ton of sense yet. The vertex shader plays
    an important role but it is often just responsible for making sure what we
    create in our fragment shader displays properly on the geometry. You'll
    probably find yourself reusing the same vertex shaders in many of your
    projects. The fragment shader on the other hand is responsible for the color
    output of our shader and is where we will do a lot of our shader
    programming. Here is a very simple fragment shader that will just display
    the color red:
  getting-started-in-webgl-shaders-p10x1: >-
    The fragment shader begins with a line specifying the float 'precision'.
    this value you can either be lowp, mediump, or highp, although you will
    likely use mediump, or highp in certain situations.
  getting-started-in-webgl-shaders-p11x1: >-
    And similar to the vertex shader, our fragment shader also requires a <a
    class="code">main()</a> function, but instead of setting <a
    class="code">gl_Position</a>, we will assign a color to <a
    class="code">gl_FragColor</a>.
  getting-started-in-webgl-shaders-p12x1: >-
    The variable, <a class="code">myColor</a>, is defined as a <a
    class="code">vec4</a>, meaning it stores 4 values. Since we are dealing with
    color, those four values are red, green, blue, and alpha. Shaders don't use
    0 - 255 for colors like our sketches do, instead they use values between 0.0
    and 1.0.
  getting-started-in-webgl-shaders-p13x1: >-
    Now that we have a vertex shader and a fragment shader, these can be saved
    to separate files (shader.vert and shader.frag respectively), and loaded
    into our sketch using <a class="code">loadShader()</a>.
  getting-started-in-webgl-shaders-heading3: 'Uniforms: Passing data from sketch to shader'
  getting-started-in-webgl-shaders-p14x1: >-
    A simple shader like this can be useful by itself, but there are times when
    it's necessary to communicate variables from the p5.js sketch to a shader.
    This is when uniforms come in. Uniforms are special variables that can be
    sent from a sketch to a shader. These make it possible to have much more
    control over a shader. For example, you could use the p5.js method <a
    class="code">millis()</a> to pass a 'time' uniform to our sketch to
    introduce motion. In the shader, uniforms are defined at the top of the
    file, outside of <a class="code">main()</a>. In this following fragment
    shader we are creating a color uniform, <a class="code">myColor</a>, that
    will allow us to change the color from our sketch.
  getting-started-in-webgl-shaders-p15x1: >-
    Back in our p5.js sketch, this color can now be sent using <a
    class="code">setUniform()</a>:
  getting-started-in-webgl-shaders-p16x1: >-
    There are also <em>attributes</em>, which are usually used to share certain
    data about the geometry between the sketch and the vertex shader, and
    <em>varying</em> variables, which share data between the vertex shader and
    the fragment shader. This makes it possible to use position or other
    geometry data within our fragment shaders.
  getting-started-in-webgl-shaders-p17x1: >-
    Now with the texture coordinate attribute assigned to the varying variable,
    we can use the texture coordinate in our fragment shader. The result in the
    example below is a blue and magenta visualization of our texture
    coordinates.
  getting-started-in-webgl-shaders-info1x1: >-
    p5.js handles a lot of attributes and uniforms for us, and <a
    href="https://github.com/processing/p5.js/blob/374acfb44588bfd565c54d61264df197d798d121/contributor_docs/webgl_mode_architecture.md">you
    can view a list of all of the attributes that p5.js sends to the shader</a>.
  getting-started-in-webgl-shaders-heading4: Conclusion
  getting-started-in-webgl-shaders-p18x1: >-
    With these skills you will be able to create some basic shaders, but shader
    programming can go incredibly deep, and there are many shader topics that go
    beyond this tutorial. Shaders in p5.js can be a powerful tool for creating
    visuals, effects, and even textures that can be mapped to your 3D geometry.
  getting-started-in-webgl-shaders-p19x1: Want to keep learning more about shaders? Check out some of these websites!
  getting-started-in-webgl-shaders-resources: >-
    <li><a href="https://thebookofshaders.com/">The Book of Shaders</a>, a
    shader guide by Patricio Gonzalez Vivo
      and
      Jen Lowe.</li>
    <li><a href="https://itp-xstory.github.io/p5js-shaders/#/">P5.js
    shaders</a>, a shader guide by Casey Conchinha
      and
      Louise Lessél.</li>
    <li><a href="https://www.shadertoy.com/">Shadertoy</a>, a massive online
    collection of shaders that are written in a browser editor.</li> <li><a
    href="https://github.com/aferriss/p5jsShaderExamples">p5jsShaderExamples</a>,
    a collection of resources
      by
      Adam Ferriss.</li>
  getting-started-in-webgl-shaders-glossary-term1-title: Shader
  getting-started-in-webgl-shaders-glossary-term1-definition: >-
    A special graphics card program that can efficiently produce many visual
    effects and filters.
  getting-started-in-webgl-shaders-glossary-term2-title: GLSL
  getting-started-in-webgl-shaders-glossary-term2-definition: >-
    Graphics Library Shader Language (GLSL) is a programming language that is
    used to write shaders.
  getting-started-in-webgl-shaders-glossary-term3-title: Uniform
  getting-started-in-webgl-shaders-glossary-term3-definition: A variable that is passed from your sketch to a shader
  getting-started-in-webgl-shaders-glossary-term4-title: Vector
  getting-started-in-webgl-shaders-glossary-term4-definition: >-
    A data type that stores a group of numbers, most commonly two, three, or
    four, to represent colors, positions, and more.
  getting-started-in-webgl-shaders-glossary-term5-title: Float
  getting-started-in-webgl-shaders-glossary-term5-definition: >-
    A data type that stores floating point numbers, which can have a decimal
    point.
  getting-started-in-webgl-shaders-glossary-term6-title: Int
  getting-started-in-webgl-shaders-glossary-term6-definition: 'A data type that stores integers, which are whole numbers without a decimal.'
  getting-started-in-webgl-shaders-glossary-term7-title: Sampler
  getting-started-in-webgl-shaders-glossary-term7-definition: A data type that represents a texture being passed into the shader.
  getting-started-in-webgl-shaders-glossary-term8-title: Attribute
  getting-started-in-webgl-shaders-glossary-term8-definition: >-
    A GLSL variable that is generated in the p5.js sketch and made available in
    the vertex shader. For most situations these are provided by p5.js.
  getting-started-in-webgl-shaders-glossary-term9-title: Texture
  getting-started-in-webgl-shaders-glossary-term9-definition: An image that passed into a shader program.
  getting-started-in-webgl-shaders-glossary-term10-title: Type
  getting-started-in-webgl-shaders-glossary-term10-definition: >-
    A label describing the characterics of a piece of data, such as an int, a
    float, a vector, etc.
  getting-started-in-webgl-shaders-glossary-term11-title: Vertex Shader
  getting-started-in-webgl-shaders-glossary-term11-definition: >-
    The part of a shader program that is responsible for positioning geometry in
    3D space.
  getting-started-in-webgl-shaders-glossary-term12-title: Fragment Shader
  getting-started-in-webgl-shaders-glossary-term12-definition: >-
    The part of a shader program that is responsible for the color and
    appearance of each pixel output by the shader.
  getting-started-in-webgl-framebuffers-title: Layered Rendering with Framebuffers
  getting-started-in-webgl-framebuffers: >-
    Setting up sketches that draw in multiple stages or access 3D depth
    information.
  color-title: Color
  color: Una introducción al color digital.
  coordinate-system-and-shapes-title: Sistema de Coordenadas y Figuras
  coordinate-system-and-shapes: Dibuja figuras simples utilizando el sistema de coordenadas.
  interactivity-title: Interactividad
  interactivity: Introducción a interactividad con el ratón y el teclado.
  program-flow-title: Flujo de programa
  program-flow: Introducción al control del flujo de programa en p5.js.
  curves-title: Curvas
  curves: >-
    Una introducción a los tres tipos de curvas en p5.js: arcos, curvas spline y
    curvas Bézier.
  becoming-a-better-programmer-title: Cómo programar mejor
  debugging-title: Depurar
  debugging: Guía de cómo depurar tu código para todo público.
  optimizing-title: Optimizar código para mejor rendimiento
  optimizing: >-
    Un tutorial de consejos y trucos para optimizar tu código para que corra más
    rápida y fluidamente.
  test-driven-development-title: Unit testing y desarrollo según pruebas
  test-driven-development: >-
    Sálvate de la agonía al instalar. ¿Qué es unit testing y cómo usarlo? Por
    Andy Timmons.
  contributing-to-the-community-title: Contribuir a la comunidad
  development-title: Desarrollo
  development: Introducción y panorámica general sobre cómo contribuir al desarrollo.
  looking-inside-title: Adentro de p5
  looking-inside: >-
    Una introducción a la estructura de archivos y herramientas para el
    desarrollo con p5.js, por Luisa Pereira.
  writing-tutorial-title: Escribir un tutorial
  writing-tutorial: Una guía sobre cómo crear un tutorial de programación en p5.js.
  writing-a-tutorial-title: Guía para contribuir con tutoriales de p5.js
  writing-a-tutorial-author: Este tutorial fue escrito por Tega Brain.
  writing-a-tutorial-1: >-
    Invitamos a los educadores, colaboradores y entusiastas en general a
    contribuir con tutoriales de p5js. El proyecto de p5js hace que la
    programación creativa y el desarrollo de código abierto sean más accesibles
    para una comunidad diversa y estamos muy emocionados de publicar tutoriales
    sobre todos los aspectos del proceso de desarrollo. Nuestros materiales de
    aprendizaje hasta el momento incluyen guías sobre el aprendizaje de p5, la
    técnica de programación y cómo contribuir a un proyecto de código abierto.
  writing-a-tutorial-2: >-
    Le damos la bienvenida a la contribución de nuevos tutoriales escritos y
    esta guía describe los pasos para proponer, preparar y contribuir con un
    tutorial.
  writing-a-tutorial-how-start-title: 'Cómo empezar:'
  writing-a-tutorial-how-start-1: >-
    Comprueba que el tema que hayas propuesto no haya sido cubierto antes.
    Puedes encontrar 
  writing-a-tutorial-how-start-2: una lista aquí
  writing-a-tutorial-how-start-3: >-
    con los tutoriales que están en progreso. Si tu tema está marcado en esta
    lista como en progreso, tal vez puedes añadir al trabajo que se está
    llevando a cabo y cooperar preparando el trabajo ya existente para su
    publicación así que por favor contáctate con nosotros.
  writing-a-tutorial-how-start-4: >-
    Si tu tema no está cubierto y no está enlistado como en progreso, por favor
    escribe unas líneas sobre lo que propones cubrir y mándanos un email con
    esta descripción a education@p5js.org.
  writing-a-tutorial-how-prepare-title: 'Cómo preparar un tutorial de p5js para su publicación en línea:'
  writing-a-tutorial-how-prepare-1: >-
    Cuando tu tutorial esté listo para ser publicado, por favor sigue los
    siguientes pasos para preparar tu contenido para el sitio de p5js.
  writing-a-tutorial-how-prepare-2: 'Guarda el contenido de tu tutorial en un archivo tutorial-name.hbs con '
  writing-a-tutorial-how-prepare-3: esta estructura básica.
  writing-a-tutorial-how-prepare-4: ' Como se muestra en este archivo, tiene que contener un un encabezado como se muestra a continuación:'
  writing-a-tutorial-how-prepare-5: >-
    La carpeta que contiene tu tutorial se colocará en la carpeta 'tutoriales'
    del sitio de p5js. El archivo llamado index.hbs es la 
  writing-a-tutorial-how-prepare-6: 'página de destino de los tutoriales de p5js,'
  writing-a-tutorial-how-prepare-7: y el archivo test-tutorial.hbs es el tutorial de prueba.
  writing-a-tutorial-how-prepare-8: 'Todos los contenidos deben de ir en las:'
  writing-a-tutorial-how-prepare-9: >-
    etiquetas de la página, con el fórmato definido por las etiquetas &lt;h1&gt;
    y &lt;h2&gt; y las etiquetas de párrafo &lt;p&gt; como se muestra en la 
  writing-a-tutorial-how-prepare-10: ' página del tutorial de prueba.'
  writing-a-tutorial-how-prepare-11: >-
    Si tu tutorial contiene imágenes, deben colocarse en la carpeta 'assets' del
    sitio p5, en la ubicación src / assets / learn / test-tutorial / images,
    como se muestra a continuación.
  writing-a-tutorial-how-prepare-12: >-
    Para formatear correctamente el código en el html de la página, utiliza la
    etiqueta:
  writing-a-tutorial-embedding-title: Incorporar bosquejos p5.js
  writing-a-tutorial-embedding-1: >-
    Usar  p5js significa que puedes ilustrar tu tutorial con ejemplos de código
    animados, interactivos o editables para demostrar conceptos de programación.
    Tus ejemplos deben estar preparados como bosquejos p5.js y pueden ser
    incorporados en el tutorial de dos maneras.
  writing-a-tutorial-embedding-2: Si el ejemplo es editable como en
  writing-a-tutorial-embedding-3: ' las páginas de referencia'
  writing-a-tutorial-embedding-4: >-
    del sitio de p5js, el bosquejo p5js debe ser incorporado en la página html
    usando el widget p5js. Sigue
  writing-a-tutorial-embedding-5: ' esta guía '
  writing-a-tutorial-embedding-6: 'sobre cómo incorporar bosquejos p5js usando el widget escrito por '
  writing-a-tutorial-embedding-7: '. También puedes encontrar esto en la '
  writing-a-tutorial-embedding-8: ' página del tutorial de prueba'
  writing-a-tutorial-embedding-9: .
  writing-a-tutorial-embedding-10: >-
    Si el ejemplo es animado y/o interactivo pero no editable, entonces el
    bosquejo p5js debe de ser incorporado en la página como un iframe como se
    describe a continuación.
  writing-a-tutorial-iframe-title: Incorporar un bosquejo p5js usando un iframe
  writing-a-tutorial-iframe-1: >-
    Un iframe es cómo crear una ventana a través de la cual puedes ver otra
    página, aislada del resto de tú página. En este caso va a ser una ventana al
    archivo index.html que contiene tu bosquejo p5js. 
  writing-a-tutorial-iframe-2: >-
    Coloca tus bosquejos p5 en la carpeta /src/assets/learn del sitio, en una
    carpeta etiquetada con el nombre de tu bosquejo como se muestra en la
    captura de pantalla. Aquí es donde todas las imágenes y bosquejos p5
    enlazados por el iframe deben de estar guardados. 
  writing-a-tutorial-iframe-3: >-
    En las subcarpetas que contienen tus ejemplos p5 debe de haber un archivo
    sketch.js y otro embed.html para tu bosquejo. 
  writing-a-tutorial-iframe-4: >-
    Asegúrate que tu archivo embed.html tenga la ruta correcta hacia las
    librerías p5 del sitio. Si la estructura de tus archivos es igual a la de
    arriba, la ruta hacia las librerías p5 debe ser "../../../js/p5.min.js".
  writing-a-tutorial-iframe-5: >-
    Una vez comprobado esto, ya puedes incorporar los archivos 'index' de p5js
    como iframes en el archivo .hbs que contiene el contenido de tu tutorial. El
    código de inserción para el iframe sería entonces:
  writing-a-tutorial-iframe-6: >-
    Estilo para el iframe (esto podría directamente en la entrada o en una hoja
    de estilos):
  writing-a-tutorial-iframe-7: 'Aquí puedes explorar el bosquejo puro en ejecución: '
  writing-a-tutorial-iframe-8: 'Y aquí está incorporado en el sitio p5 usando el código a continuación: '
  writing-a-tutorial-iframe-9: >-
    Una cosa a recalcar es que necesitas ajustar manualmente el tamaño del
    iframe para que funcione de la mejor manera posible si las cosas son de
    tamaño estándar.
  writing-a-tutorial-iframe-10: >-
    También nota que los enlaces a los archivos de las librerías de p5.js no
    provienen de la página con extensión .eps con todo el contenido del
    tutorial. En su lugar, van a estar localizados en la página html que está
    procesando tu bosquejo (en este caso se llama embed.html).
  writing-a-tutorial-iframe-11: >-
    Más información sobre cómo incorporar bosquejos de p5.js se pueden
    encontrar 
  writing-a-tutorial-embed-iframe-12: aquí.
  writing-a-tutorial-finishing-title: Los últimos detalles
  writing-a-tutorial-finishing-1: >-
    Una vez que hayas terminado de escribir tu tutorial y tu contenido haya sido
    aprobado, copia (fork) desde GitHub el repositorio del sitio de p5.js,
    prepara tu contenido como lo hemos descrito anteriormente y finalmente crea
    una solicitud de (pull request) al repositorio del sitio de p5.js para que
    podamos agregar tu contenido y publicar tu contribución. ¡Felicidades!
  writing-a-tutorial-finishing-2: ¡Muchas gracias!
  color-description1: >-
    Este tutorial proviene del libro Learning Processing de Daniel Shiffman,
    publicado por Morgan Kaufmann, © 2008 Elsevier Inc. Todos los derechos
    reservados. Fue transcrito a p5 por Kelly Chang. Si detectas algún error o
    tienes comentarios, 
  color-description2: ' por favor escríbenos.'
  color-p1x1: >-
    En el mundo digital hablar de color requiere precisión. No basta con decir,
    por ejemplo: ¿Puedes hacer un círculo verde azulado?, ya que el color se
    define como un arreglo de números. Comencemos con el caso más simple: negro,
    blanco y escala de grises. 0 significa negro, 255 significa blanco. Entre
    medio, cualquier otro número -50, 87, 162, 209, etc- es un tono gris que va
    entre negro y blanco.
  color-p2x1: 'Al agregar las funciones '
  color-p2x2: ' y '
  color-p2x3: ' antes de dibujar podemos definir el color de cualquier forma deseada. También existe la función '
  color-p2x4: >-
    , que define el color del lienzo en nuestra pantalla. A continuación hay un
    ejemplo.
  color-code1: |-
    background(255);    // Define el color del lienzo como blanco 
     stroke(0);          // Define el contorno de la forma (stroke) como negro 
     fill(150);          // Define el interior de la forma (fill) como gris 
     rect(50,50,75,100); // Dibuja un rectángulo
  color-p3x1: >-
    Tanto el contorno como el interior de la forma pueden ser eliminados con las
    funciones: 
  color-p3x2: ' y '
  color-p3x3: >-
    . Instintivamente podríamos pensar en utilizar "stroke(0)" para eliminar el
    contorno, sin embargo, es importante recordar que 0 no significa "nada",
    sino que indica un color negro. Además, recuerda no eliminar ambos, con 
  color-p3x4: ' y '
  color-p3x5: ', porque ¡nada aparecerá!'
  color-p4x1: >-
    Adicionalmente si dibujamos dos figuras, p5.js siempre utilizará la última
    especificación de contorno y llenado, leyendo el código de arriba a abajo.
  color-rgb-title: Color RGB
  color-rgb-p1x1: >-
    ¿Alguna vez pintaste con las manos? Al mezclar los colores "primarios"
    podías generar cualquier otro color. Mezclar todos los colores resultaba en
    un color café fango, y mientras más pintura añadías más oscuro era el
    resultado. En el mundo digital los colores también se construyen mezclando
    los tres colores primarios, pero funciona un poco diferente. Primero, los
    tres colores primarios son otros: rojo, verde y azul (en inglés red, green
    and blue, es decir, "RGB"). Luego, con los colores en tu pantalla estás
    mezclando luz, no pintura, por lo que las reglas de esta mezcla también son
    otras.
  color-rgb-li1: Rojo + Verde = Amarillo
  color-rgb-li2: Rojo + Azul = Púrpura
  color-rgb-li3: Verde + Azul = Cian (azul-verde)
  color-rgb-li4: Rojo + Verde + Azul = Blanco
  color-rgb-li5: Ausencia de colores = Negro
  color-rgb-p2x1: >-
    Lo anterior presupone que los colores son tan brillantes como sea posible,
    pero por supuesto, hay un rango de color disponible, por lo que un poco de
    rojo más un poco de verde y azul genera gris, mientras que un poco de rojo
    más un poco de azul genera púrpura oscuro. 
     Si bien puede tomar tiempo acostumbrarte a esto, mientras más programes y experimentes con color RGB, más rápido se hará instintivo, como mezclar pintura con los dedos. 
     Y por supuesto no puedes decir "Mezcla un poco de de rojo con un poco de azul", debes proveer una cantidad. Así como en la escala de grises, los elementos de color son expresados en rangos desde 0 (ausencia del color) hasta 255 (presencia máxima del color), y son listados en orden R (rojo), G (verde) y B (azul). Obtendrás el resultado de mezclar color RGB por experimentación, pero en adelante cubriremos mediante ejercicios colores más comunes.
  color-transparency-title: Transparencia
  color-transparency-p1x1: >-
    Además de los componentes rojo, verde y azul de cada color, existe un cuarto
    componente opcional denominado "alfa" (alpha, en inglés). Alfa significa
    transparencia y es particularmente útil cuando deseas dibujar figuras que se
    superponen y a través de las cuales quieres ver. Los valores de alfa de una
    imagen son llamados también "canal alfa" de una imagen.
  color-transparency-p2x1: >-
    Es importante notar que los pixeles no son literalmente transparentes, esto
    es simplemente una ilusión lograda al mezclar colores. Tras bambalinas p5.js
    toma los valores de cada color y les asigna un porcentaje, creando una
    percepción óptica de la mezcla (Si estás interesado en programar vidrios
    "color rosa", aquí es donde debes comenzar).
  color-transparency-p3x1: >-
    Los valores de alfa también se definen en un rango de 0 a 255, donde 0 es
    completamente transparente (es decir, 0% de opacidad) y 255 es completamente
    opaco (es decir, 100% opaco).
  color-custom-ranges-title: Rangos de Color Personalizados
  color-custom-ranges-p1x1: >-
    El modo RGB con rangos de 0 a 255 no es la única forma en que podemos
    manipular color en p5.js, de hecho p5.js nos permite pensar el color de la
    manera que deseemos. Por ejemplo, tu podrías preferir pensar el color en
    rangos de 0 a 100 (como un porcentaje). Esto lo puedes hacer especificando
    un modo específico de color con la función 
  color-custom-ranges-p2x1: >-
    La expresión anterior dice: "Ok, queremos pensar el color en términos de
    rojo, verde y azul, o RGB, en que el rango de cada color pueda estar entre
    0  100."
  color-custom-ranges-p3x1: >-
    Aunque rara vez sea conveniente, tu también puedes definir distintos rangos
    para cada componente de color:
  color-custom-ranges-p4x1: >-
    Con la expresión anterior queremos decir: "Rango valores en color rojo va de
    0 a 100, verde de 0 a 500, azul de 0 a 10 y alfa de 0 a 255."
  color-custom-ranges-p5x1: >-
    Finalmente, si bien es probable que tu código requiera sólamente el modo de
    color RGB, también puedes especificar colores en el modo HSB (tono,
    saturación y brillo). Sin entrar mayormente en detalle, el color HSB
    funciona como sigue:
  color-custom-ranges-li1x1: Tono o Matiz
  color-custom-ranges-li1x2: '—El tipo de color, valores por definición van de 0 a 360.'
  color-custom-ranges-li2x1: Saturación
  color-custom-ranges-li2x2: '—La vivacidad del color, 0 a 100 por definición.'
  color-custom-ranges-li3x1: Brillo
  color-custom-ranges-li3x2: '—Es el brillo del color, 0 a 100 por definición.'
  color-custom-ranges-p6x1: 'Con '
  color-custom-ranges-p6x2: ' puedes definir tu propio rango de valores. Algunos prefieren un rango de 0-360 para el tono (piensa en los 360 grados de la rueda de color) y 0-100 para la saturación y brillo (piensa en 0-100%).'
  coordinate-system-description1: 'Este tutorial proviene del libro '
  coordinate-system-description2: Learning Processing
  coordinate-system-description3: ' de Daniel Shiffman, publicado por Morgan Kaufmann, © 2008 Elsevier Inc. Todos los derechos reservados. Fue transcrito a p5.js por Alex Yixuan Xu. Si detectas algún error o tienes comentarios, por favor '
  coordinate-system-description4: escríbenos
  coordinate-system-description5: .
  coordinate-system-description-title: Sistema Coordenado y Figuras
  coordinate-system-description-p1x1: >-
    Antes de comenzar a programar con p5.js debemos primero remontarnos a
    nuestra infancia, tomar un trozo de papel y dibujar una línea. La distancia
    más corta entre dos puntos es una línea y ese es nuestro punto de partida,
    con dos puntos en un gráfico.
  coordinate-system-description-p2x1: >-
    La figura anterior muestra una línea que une un punto A (1,0) y un punto B
    (4,5). Si le hubieras pedido a un amigo que dibujara la línea por ti,
    tendrías que haberle dado las indicaciones "traza una línea desde el punto
    uno coma cero hasta el punto cuatro coma cinco, por favor". Bueno, por el
    momento imagina que tu amigo era un computador al que solicitaste dibujar la
    misma línea en su pantalla. El mismo comando aplica (solo que en esta caso
    puedes obviar formalidades y deberás utilizar un formato preciso). Aquí la
    instrucción es como sigue:
  coordinate-system-description-p3x1: >-
    Aun sin haber estudiado la sintaxis, la expresión anterior debiera haberte
    hecho sentido. Estamos entregando a la máquina un comando llamado "línea"
    (al que nos referiremos como "función") para ser ejecutado. Adicionalmente
    estamos espcificando argumentos que indican cómo la línea debería ser
    dibujada, desde un punto A (1,0) hasta un punto B (4,5). Si pensamos una
    línea de código como una frase, la función es un verbo y los argumentos son
    los objetos de la frase. La frase de código termina con un punto y coma en
    vez de un punto final.
  coordinate-system-description-p4x1: >-
    La clave aquí es darse cuenta que la pantalla del computador es la
    abstracción de un trozo de papel. Cada pixel de la pantalla es una
    coordenada -dos números, "x" (horizontal) e "y" (vertical)- que determinan
    la ubicación de un punto en el espacio. Y es nuestro trabajo especificar qué
    figuras y colores debieran apareceren en dicha coordenada de pixeles.
  coordinate-system-description-p5x1: >-
    Sin embargo hay una trampa. El gráfico que nos enseñaron cuando chicos
    ("Sistema Coordenado Cartesiano") ubicaba el punto (0,0) en el centro con el
    "eje y" apuntando hacia arriba, y el "eje x" apuntando hacia la derecho
    (hacia los números positivos, los negativos hacia la izquierda y abajo). El
    sistema coordenado para pixeles en una pantalla de computador, en cambio,
    está invertido en el eje y. (0,0) se ubica en la parte superior izquierda
    con la dirección positiva apuntando horizontalmente hacia la derecha y
    abajo.
  coordinate-system-simple-shapes-title: Formas Primitivas
  coordinate-system-simple-shapes-p1x1: >-
    La mayoría de los ejemplos en p5.js son de naturaleza visual. Ellos implican
    principalmente dibujar figuras y definir coordenadas de pixeles. Comencemos
    observando las cuatro formas primitivas.
  coordinate-system-simple-shapes-p2x1: >-
    Para cada figura nos debemos preguntar qué información requerimos para
    especificar su ubicación y tamaño (y luego su color) y entender cómo p5.js
    espera recibir dicha información. En cada uno de los siguientes diagramas
    asumiremos una ventana de 100 pixeles de ancho y 100 pixeles de alto.
  coordinate-system-simple-shapes-p3x1: 'Un '
  coordinate-system-simple-shapes-p3x2: ' es la forma más simple y un buen lugar para comenzar. Para dibujar un punto solo necesitamos un par ordenado (x,y).'
  coordinate-system-simple-shapes-p4x1: 'Una '
  coordinate-system-simple-shapes-p4x2: ' tampoco es terriblemente compleja y solo requiere dos puntos: (x1,y1) y (x2,y2):'
  coordinate-system-simple-shapes-p5x1: 'Una vez que llegamos a dibujar un '
  coordinate-system-simple-shapes-p5x2: >-
    , las cosas se tornan un poco más complejas. En p5.js un rectángulo se
    especifica con las coordenadas de su esquina superior izquierda, así como
    ancho y alto.
  coordinate-system-simple-shapes-p6x1: >-
    Una segunda manera de dibujar un rectángulo requiere especificar su punto
    central junto con su ancho y alto. Si preferimos este método, debemos
    indicar previamente que queremos utilizar el modo 
  coordinate-system-simple-shapes-p6x2: ' antes de la instrucción del propio rectángulo. Notemos que p5.js es sensible a cada caso.'
  coordinate-system-simple-shapes-p7x1: >-
    Finalmente podemos dibujar un rectángulo con dos puntos (la esquina superior
    izquierda y la esquina superior derecha). El modo en este caso es 
  coordinate-system-simple-shapes-p7x2: >-
    . Notar que este ejemplo entrega el mismo resultado en pantalla que el
    ejemplo anterior.
  coordinate-system-simple-shapes-p8x1: >-
    Una vez que nos hemos familiarizado con el concepto de dibujar un
    rectángulo, una 
  coordinate-system-simple-shapes-p8x2: ' es muy sencilla de dibujar. De hecho es idéntica al '
  coordinate-system-simple-shapes-p8x3: ' con la diferencia de que la elipse se dibuja donde la caja que contiene al rectángulo debiera estar. El modo por defecto para la '
  coordinate-system-simple-shapes-p8x4: ' es '
  coordinate-system-simple-shapes-p8x5: ', en vez de '
  coordinate-system-simple-shapes-p8x6: .
  coordinate-system-simple-shapes-p9x1: >-
    Ahora observemos una aplicación un poco más realista, con una pantalla de
    dimensiones 200 por 200. Notemos el uso de la función createCanvas() para
    especificar el tamaño de la ventana.
  curves-description1: >-
    This tutorial is written by J David Eisenberg and ported by Sally Chen. If
    you see any errors or have comments, 
  curves-description2: ' please let us know.'
  curves-description3: 'This work is licensed under a '
  curves-description4: ' Creative Commons Attribution-NonCommercial-ShareAlinke 4.0 International License.'
  curves-p1x1: >-
    This short tutorial introduces you to the three types of curves in p5.js:
    arcs, spline curves, and Bézier curves.
  curves-arcs-title: ' Arcs '
  curves-arcs-p1x1: >-
    Arcs are the simplest curves to draw, it is defined an arc as a section of
    an ellipse. You call the function with these parameters:
  curves-arcs-p2x1: 'arc (x, y, w, h, start, stop, [mode])'
  curves-arcs-p3x1: >-
    The first four parameters (x,y,w,h) define the boundary box for your arc and
    the next two (start, stop), are the start and stop angles for the arc. These
    angles are given in radians and are measured clockwise with zero degrees
    pointing east and PI radians equals 180°.
  curves-spline-curves-title: Spline Curves
  curves-spline-curves-p1x1: >-
    Arcs are fine, but they’re plain. The next function, curve(), lets you draw
    curves that aren’t necessarily part of an arc. This function draws what is
    technically called a Rom-Catmull Spline. To draw the curve, you must specify
    the (x, y) coordinates of the points where the curve starts and ends. You
    must also specify two control points which determine the direction and
    amount of curvature. The first two and last two parameters are the control
    points of the curve. A call to curve() uses these parameters:
  curves-spline-curves-p2x1: 'curve (cpx1, cpy1, x1, y1, x2, y2, cpx2, cpy2);'
  curves-spline-curves-p3x1: How do the control points affect the way the curve looks?
  curves-spline-curves-p4x1: >-
    The tangent to the curve at the start point is parallel to the line between
    control point one and the end of the curve. The tangent to the curve at the
    end point is parallel to the line between the start point and control point
    2.
  curves-spline-curves-p5x1: >-
    The following diagram shows a curve and the points can be dragged to show
    how the control point affects the curve:
  curves-continuous-spline-curves-title: Continuous Spline Curves
  curves-continuous-spline-curves-p1x1: >-
    In isolation, a single curve() is not particularly appealing. To draw a
    continuous curve through several points, you are better off using the
    curveVertex() function. You can only use this function when you are creating
    a shape with the beginShape() and endShape() functions.In common usage,
    people use the first point of the curve as the first control point and the
    last point of the curve as the last control point.
  curves-bezier-curves-title: Bézier Curves
  curves-bezier-curves-p1x1: >-
    Though better than arcs, spline curves don’t seem to have those graceful,
    swooping curves that say “art.” For those, you need to draw Bézier curves
    with the bezier() function. As with spline curves, the bezier() function has
    eight parameters, but the order is different. The first two and last two
    parameters are the start and end points while middle  four points are the
    control points.
  curves-bezier-curves-p2x1: ' bezier(x1, y1, cpx1, cpy1, cpx2, cpy2, x2, y2); '
  curves-bezier-curves-p3x1: >-
    While it is difficult to visualize how the control points affect a curve(),
    it is slightly easier to see how the control points affect Bézier curves.
    Imagine two poles and several rubber bands. The poles connect the control
    points to the endpoints of the curve. A rubber band connects the tops of the
    poles. Two more rubber bands connect the midpoints of the poles to the
    midpoint of the first rubber band. One more rubber band connects their
    midpoints. The center of that last rubber band is tied to the curve. This
    diagram helps to explain, the points can be moved to change the curve.
  curves-continuous-bezier-curves-title: ' Continuous Bézier Curves'
  curves-continuous-bezier-curves-p1x1: >-
    Just as curveVertex() allows you to make continuous spline curves,
    bezierVertex() lets you make continuous Bézier curves. Again, you must be
    within a beginShape() / endShape() sequence. You must use vertex(startX,
    startY) to specify the starting anchor point of the curve. Subsequent points
    are specified with a call to:
  curves-continuous-bezier-curves-p2x1: 'bezierVertex(cpx1, cpy1, cpx2, cpy2, x, y);'
  curves-continuous-bezier-curves-p3x1: >-
    Here is a continuous Bézier curve, but it doesn’t join smoothly. In order to
    make two curves A and B smoothly continuous, the last control point of A,
    the last point of A, and the first control point of B have to be on a
    straight line.
  curves-summary-title: Summary
  curves-summary-li1: >-
    Use arc() when you need a segment of a circle or an ellipse. You can’t make
    continuous arcs or use them as part of a shape.
  curves-summary-li2: >-
    Use curve() when you need a small curve between two points. Use
    curveVertex() to make a continuous series of curves as part of a shape.
  curves-summary-li3: >-
    Use bezier() when you need long, smooth curves. Use bezierVertex() to make a
    continuous series of Bézier curves as part of a shape.
  teach-desc: 'Teach a p5 workshop or class, or create teaching materials!'
libraries:
  Libraries: Bibliotecas
  core-libraries: Bibliotecas principales
  community-libraries: Bibliotecas de la comunidad
  libraries-created-by: 'Creada por:'
  p5.sound: >-
    p5.sound extiende p5 con funcionalidad de Web Audio, incluyendo entrada de
    audio, reproducción, análisis y síntesis.
  asciiart: >-
    p5.asciiart te permite convertir de forma simple y fácil imágenes - a - arte
    ASCII dentro de p5js.
  p5.ble: >-
    Una biblioteca que facilita la comunicación entre dispositivos BLE y
    bosquejos p5.js.
  p5.bots: >-
    Con p5.bots puedes interactuar con Arduino (u otro microprocesador) desde el
    navegador. Usa los datos de los sensores para controlar tu bosquejo, usa un
    bosquejo para controlar LEDs, motores, y más.
  p5.bezier: A library helps draw high-degree Bézier curves with unlimited points.
  p5.clickable: 'Biblioteca para crear botones y eventos fácilmente con p5.js. '
  p5.cmyk.js: Espacio de color cian-magenta-amarillo-negro.
  p5.collide2D: >-
    p5.collide2D provee herramientas para calcular detección de colisiones en
    geometría 2D con p5.js.
  CO2Budget.js: >-
    Esta biblioteca abre la idea de la cuenta regresiva de CO2 a las comunidades
    creativas de codificadores, diseñadores y artistas asociados con p5*js.
  p5.createloop: >-
    Crea ciclos de animaciones con ruido y exporta GIF en una sola línea de
    código. 
  p5.dimensions: >-
    p5.dimensions extiende las funciones de vector de p5.js para que funcione
    con cualquier número de dimensiones.
  p5.EasyCam: >-
    Control de cámara 3D simple con desplazamiento, zoom y rotación inerciales.
    Contribuciones importantes por Thomas Diewald.
  p5.experience: >-
    Biblioteca extensa para p5.js que agrega eventos adicionales para crear
    aplicaciones web basadas en el canvas. 
  p5.func: >-
    p5.func es una extensión de p5 que provee nuevos objetos y utilidades para
    generación de funciones en los dominios de tiempo, frecuencia y espacio.
  p5.geolocation: >-
    p5.geolocation provee técnicas para adquirir, observar, calcular y
    georeferenciar ubicaciones de usuario para p5.js.
  p5.glitch: p5.glitch extiende p5.js para imagenes de glitch y archivos binarios.
  p5.gibber: >-
    p5.gibber provee capacidades de secuenciamiento de música y de síntesis de
    audio.
  grafica.js: >-
    grafica.js te permite añadir gráficas 2D simples pero altamente
    configurables a tus bosquejos de p5.js.
  p5.gui: p5.gui genera una interfaz gráfica de usuario para tus bosquejos p5.
  p5.j5: >-
    La completa Johnny-Five.io Nodebots / robótica para Arduino y otros
    microcontroladores diseñados para funcionar directamente en el navegador web
    con WebSerial o WebUSB.
  p5.localmessage: >-
    p5.provee una interfaz simple para enviar mensajes locales de un bosquejo a
    otro y así dibujar en múltiples ventanas!
  marching: 'Conversión de trama a vector, isosuperficies.'
  mappa: >-
    Mappa es una biblioteca que provee un conjunto de herramientas para trabajar
    con mapas estáticos y geo-datos, además de otras herramientas útiles para
    desarrollar representaciones visuales de datos con geolocalización.
  ml5.js: >-
    ml5.js esta construido sobre TensorFlow.js y provee un acceso amigable a
    algoritmos de inteligencia artificial y machine learning desde el navegador.
  numero: Una biblioteca matemática fácil e intuitiva para p5.js
  pdl.library: >-
    Un conjunto de funciones y clases para crear diagramas interactivos para 
    enseñar y aprender fisica.
  p5play: >-
    p5play es para crear arte interactivo y video juegos con el motor de física
    Box2D. ¡Proporciona sprites, animaciones, detección de entrada mejorada del
    tecleo, y más!
  p5.particle: >-
    Los objetos Particle y Fountain pueden ser usados para crear efectos
    controlados por datos que son definidos a través de estructuras de usuario o
    entrada JSON y funciones de usuario para dibujar.
  p5.party: >-
    p5.party es una librería para la facil creación de juegos multiusuario 
    conectados en red, aplicaciones y bocetos.
  p5.Polar: >-
    p5.Polar provee abstracciones matematicas haciendo más facil crear hermosos,
    calidoscópicos, patrones radiales.
  react-p5: >-
    Esta libreria te permite integrar bocetos de p5 dentro de tu aplicación de
    React.
  p5.recorder: Graba el canvas del boceto y audio.
  p5.Riso: p5.Riso.js es una biblioteca para impresión de Risograph.
  rita.js: >-
    RiTa.js provee un conjunto de objetos de procesamiento de lenguaje natural
    para literatura generativa.
  Rotating knobs: >-
    Hacer perillas se puede girar con gráficos personalizados y volver rangos de
    valores
  p5.scenemanager: >-
    p5.SceneManager te ayuda a crear bosquejos con múltiples estados / escenas.
    Cada escena es como un bosquejo dentro del bosquejo principal.
  p5.screenPosition: >-
    Agrega las variables screenX and screenY con las cordenadas del cursor en la
    pantalla.
  p5.scribble: >-
    Dibujar primitivas 2D con una apariencia poco acabada. Creada por Janneck
    Wullschleger, basada en un puerto de la biblioteca original de Processing.
  p5.serialport: >-
    p5.serial habilita la comunicación serial entre dispositivos que soporten 
    serial (RS-232) y a los bocetos p5 correr en el navegador.
  Shape5: >-
    Shape5 es una libreria primitiva de graficos 2D para estudiante de primaria
    quienes estan aprendiendo a programar por primera vez.
  p5.shape.js: Una biblioteca creada para agregar formas más simples al marco p5.js.
  P5.slides: p5.slide es una plataforma de presentaciones escrito en p5.js.
  p5snap: >-
    p5snap es una interfaz de linea de comandos que crea y guarda capturas de un
    boceto de p5 en un intervalo.
  p5.speech: >-
    p5.speech provee acceso simple y claro a las APIs de Habla Web y Detección
    de Habla, permitiendo la creación de bosquejos sencillos que pueden hablar y
    escuchar.
  p5.start2d.js: >-
    Extensión para p5 para crear gráficos 2D estáticos usnado px, mm, cm o
    pulgadas.
  p5.tiledmap: >-
    p5.tilemap provee funciones de dibujo y de ayuda para incluir mapas en  tus
    bocetos.
  TiledPlay: >-
    Un libreria pequeña para conectar la funcionalidad de p5.js, p5.play, y
    p5.tiled.js para facilmente crear juegos de plataformas 2d utilizando
    JavaScript.
  p5.touchgui: >-
    Una biblioteca de interfaz gráfica de usuario (GUI) multi-tacto y para el
    ratón.
  tramontana: >-
    Tramontana es una platforma para utilizar múltiples dispositos (iOS,
    Android, tramontana Board, ...) para crear ambientes interactivos o
    prototipar experiencias a escala.
  TurtleGFX: >-
    TurtleGFX permite codificar con Turtle Graphics en JavaScript. Excelente
    para la educación y la codificación creativa.
  p5.tween: >-
    Con p5.tween puede crear facilmente animaciones como interpolación para tus
    objetos y formas.
  vida: >-
    Vida es una biblioteca simple que agrega detección de movimiento utilizando
    la camara y la función de seguimiento blob a p5js.
  p5.voronoi: >-
    p5.voronoi brinda un conjunto de herramientas para dibujar y utilizar
    diagramas voronoi en tus bosquejos de p5.js.
  p5.wasm: >-
    p5.wasm es una libreria complemento escrita en Rust y compilada para
    WebAssembly que implementa funciones comunes encontradas en p5.js.
  p5.xr: Una biblioteca para crear bocetos VR y AR con p5.
  p5.3D: 'Texto 3D e imágenes en WebGL. '
  WEBMIDI.js: Envia y recibe facilmente mensaje MIDI de p5.
  p5.buttons: Una libreria que pretende simplificar el scripting de botones.
  p5.button: >-
    Pequeña libreria funcional para diseñar y renderizar simples y estilizados
    botones directamente en un canvas de p5.js.
  p5.math.js: >-
    Las operaciones matemáticas de JavaScript han sido convertidas a simple
    lenguaje humano, así que ellos podrán entenderlas realmente rápido.
  p5LiveMedia: 'Audio, video, canvas e intercambio de datos en tiempo real.'
  P5.Create: >-
    p5.create es una biblioteca que proporciona funciones de guardado,
    animación, colisión y etiquetado diseñadas para la creación eficiente de
    juegos.
  p5.quadrille.js: librería p5.js quadrille.
  p5.animS: p5.animS anima forma de p5.js renderizando sus procesos de dibujado.
  I_AM_UI: Una biblioteca de interfaz de usuario.
  simple.js: >-
    Funciones de ayuda y valores predeterminados para nuevos y jovenes
    programadores.
  p5.timer: >-
    Este libreria ejecuta funciones de cronometraje asincronas como cuentas
    atrás, temporizadores de un solo disparo, el % del tiempo transcurrido y
    encapsula la función millis() y otras cálculos relacionados que
    frecuentemente obstruyen tu código.
  c2.js: >-
    c2.js es una libreria de JavaScript para programación creativa basada en
    geometría computacional, simulación de física, algoritmos evolutivos y otros
    modulos.
  Concave Hull: Cálcula un Concave Hull desde un conjunto de puntos en un espacio 2D.
  p5.joystick: Conéctate y juega con joysticks físicos.
  p5.webserial: >-
    Una libreria para interactuar con dispositivos seriales desde dentro del
    navegador, basado en la API de Web Serial (disponible en Chrome y Edge).
  p5.pattern: Una libreria de patrones de dibujo para p5.js.
  p5.jacdac: Plug-and-play micro-controladores para p5js.
  p5.PatGrad: p5.PatGrad te permite agregar patrones y gradiantes a tus bocetos.
  p5.projection: Facil mapeado de proyección de bocetos en superficies del mundo real.
  p5.filterRenderer: A library for p5.js WebGL mode to draw with depth blur and shadows.
  p5.capture: >-
    p5.capture provee un GUI simple para grabar facilmente animaciones de p5.js
    y archivos de salida de video en varios formatos (webm, gif, mp4, png, jpg,
    y webp).
  p5.input: Añade más soporte clave para p5.js.
  p5.web-serial: >-
    Una libreria de p5js para usar la API de Web Serial para acceder a
    dispositivos como Arduino, configuración no requerida.
  p5.wasm.core: Un nucleo de web assembly para p5.js.
  p5.videorecorder: Graba tu canvas como un archivo de video con audio.
  p5.mapper: >-
    p5.mapper es una libreria de mapeo de proyección para p5.js. Esta libreria
    hace facil programar y proyectar bocetos interactivos y algorítmicos.
  p5.teach: >-
    Una libreria de animación matematica para p5.js, amigable para novatos.
    Creada con la tutoría de Nick McIntyre and Jithin KS.
  p5.fab: p5.fab controla la maquina de fabricación digital desde p5.js.
  p5.utils: >-
    A set of utilities and additional features for my creative coding class
    aiming  to help students.
  using-a-library-title: Usando una biblioteca
  using-a-library1: >-
    Una biblioteca p5.js puede ser cualquier código p5.js que extiende o añade a
    las funcionalidades centrales de p5.js. Existen dos tipos de bibliotecas.
    Las bibliotecas centrales (
  using-a-library3: >-
    ) son parte de la distribución de p5.js, mientras que las bibliotecas
    contribuidas son mantenidas y  desarrolladas por y de propiedad de los
    miembros de la comunidad de p5.js.
  using-a-library4: >-
    Para incluir una biblioteca en tu bosquejo, enlázala en tu archivo HTML,
    después que hayas enlazado p5.js. Un archivo HTML como ejemplo podría lucir
    así:
  create-your-own-title: Crea tu propia biblioteca
  create-your-own1: p5.js acepta las bibliotecas contribuidas por la comunidad p5.js Revisa el
  create-your-own2: tutorial de bibliotecas
  create-your-own3: para revisar los detalles específicos de cómo crear una.
  create-your-own4: >-
    ¡Si has creado una biblioteca y quieres incluirla en esta página, llena este
    formulario!
community:
  community-title: Comunidad
  community-statement-title: Declaración de comunidad en torno a p5.js
  community-statement1: >-
    p5.js es una comunidad interesada en explorar la creación de arte y diseño
    con tecnología.
  community-statement2: >-
    Somos una comunidad de, y en solidaridad con, gente de todas las identidades
    y expresiones de género, orientación sexual, raza, etnicidad, lenguaje,
    neurotipo, tamaño, habilidad, clase, religión, cultura, subcultura, opinión
    política, edad, nivel de habilidades, ocupación y bagaje. Reconocemos que no
    todos tienen el tiempo, medios económicos o la capacidad de participar
    activamente, pero sí reconocemos y promovemos el involucramiento de todo
    tipo. Facilitamos y fomentamos tanto acceso como empoderamiento. Todos somos
    estudiantes.
  community-statement3: >-
    Nos gustan estos hashtags: #noCodeSnobs (porque valoramos la comunidad por
    sobre la eficiencia), #newKidLove (porque todos empezamos en alguna parte),
    #unassumeCore (porque no asumimos conocimiento previo) y #BlackLivesMatter
    (obviamente).
  in-practice-title: 'En la práctica:'
  in-practice1: ' No somos programadores snob. No asumimos conocimiento previo ni damos por sentado que hay cosas que todos deberían saber. '
  in-practice2: >-
    Insistimos en involucrarnos de manera activa en las peticiones de respuesn,
    sin importar su complejidad.
  in-practice3: >-
    Le damos la bienvenida a los novatos y priorizamos la educación de otros.
    Apuntamos a aproximarnos a todas las tareas con el entusiasmo de un novato.
    Porque creemos que son tan importantes en este esfuerzo como los expertos.
  in-practice4: >-
    Hacemos un esfuerzo constante en activamente reconocer y validar múltiples
    tipos de contribuciones.
  in-practice5: Siempre estamos dispuestos a ofrecer ayuda y consejo.
  in-times-conflict-title: 'En tiempos de conflicto:'
  in-times-conflict1: Escuchamos
  in-times-conflict2: Comunicamos claramente y reconocemos los sentimientos del otro.
  in-times-conflict3: >-
    Admitimos nuestros errores, pedimos disculpas, y aceptamos responsabilidad
    por nuestras acciones.
  in-times-conflict4: Buscamos continuamente mejorar nosotros mismos y nuestra comunidad.
  in-times-conflict5: Mantenemos nuestra comunidad respetuosa y abierta.
  in-times-conflict6: Hacemos que todos se sientan escuchados.
  in-times-conflict7: Somos conscientes y amables en nuestras interacciones.
  in-the-future-title: 'En el futuro:'
  in-the-future1: El futuro es ahora.
  notes-title: Notes
  notes1: 'Please also see our '
  notes2: p5.js Code of Conduct
  notes3: '. Esta Declaración de comunidad en torno a p5.js está licenciada bajo '
  notes4: Licencia de Creative Commons
  notes5: . Por favor comparte y remezcla con atribución.
  contribute-title: Contribuye
  contribute1: >-
    Nuestra comunidad siempre está buscando entusiastas para ayudar de
    diferentes maneras.
  develop-title: Desarrolla.
  develop1: GitHub
  develop2: ' es el principal lugar donde se almacena el código, se documentan los problemas y se discute sobre el código. Revisa el '
  develop3: ' tutorial de desarrollo'
  develop4: ' para introducirte al tema, o '
  develop5: crea tu propia biblioteca.
  document-title: Documenta.
  document1: ' Todos amamos la documentación. Necesitamos ayuda '
  document2: agregando ejemplos
  document3: ', '
  document4: ' añadiendo documentación'
  document5: ' y creando tutoriales.'
  teach-title: Enseña.
  teach1: ' Haz un taller, da una clase, enséñale a tus amigos y colaboradores! Etiqueta a @p5xjs en Twitter y haremos lo posible para compartir lo que estás haciendo.'
  create-title: Crea.
  create1: ' p5.js está buscando diseñadores, artistas y  programadores que contribuyan con una obra increíble y creativa para ser mostrada en la página principal y así inspirar al resto. Envía tu trabajo a '
  create2: hello@p5js.org
  create3: .
  donate-title: Dona.
  donate1: ' p5.js es gratuito y de código abierto y hecho por artistas. Ayuda al desarrollo de p5.js a través de una donación a la '
  donate2: Processing Foundation
  donate3: .
  contributors-conference-title: Conferencia de contribuyentes
  contributors-conference1: >-
    Anque la mayor parte del trabajo sucede en línea, también nos reunimos en
    persona. Hemos tenido dos conferencias de contribuyentes realizadas en 
  contributors-conference2: ' en la Universidad Carnegie Mellon en Pittsburgh, PA. Artistas, diseñadores, desarrolladores, y educadores se reunieron para llevar el proyecto p5.js adelante.'
  participants-title: Participantes
  support-title: Apoyo
  support1: Nuestra conferencia de contribuyentes fue realizada en el
  support2: >-
    en Carnegie Mellon University, un laboratorio académico para investigación
    atípica, anti-disciplinaria, e inter-institucional, en la intersección del
    arte, la ciencia, la tecnología y la cultura.
  support3: Este evento fue posible gracias a fondos del
  support4: y el generoso apoyo de
  support5: 'y'
  support6: ¡Gracias!
  mailing-list-title: Boletín
  mailing-list-1: >-
    Ingresa tu dirección de correo electrónico para recibir ocasionalmente
    novedades de la Processing Foundation.
  2015contributors-conference-title: Conferencia de contribuyentes 2015
  2015contributors-conference-date: Mayo 25-31
  2015contributors-conference1: >-
    Un diverso grupo de aproximadamente 30 participantes se reunieron durante
    una semana en el 
  2015contributors-conference2: >-
    , haciendo avances en el código, la documentación y las herramientas de
    extensión para la comunidad en torno al ambiente de programación p5.js. Los
    participantes vinieron de lugares tan distantes como Hong Kong, Seattle, Los
    Angeles, Boston y New York. La mayoría eran profesionales que trabajan en
    los campos de tecnología creativa, diseño de interacciónn, y artes mediales,
    pero el grupo también incluyó a una media docena de estudiantes de pregrado
    y posgrado de las escuelas de Arte y Arquitectura de Carnegie Mellon
    University.
  2015contributors-conference3: Fotos por Taeyoon Choi
  2015contributors-conference-diversity-title: Diversidad
  2015contributors-conference-diversity1: >-
    Además de desarrollo técnico, otros de los principales enfoques de esta
    conferencia fueron extensión y diversidad. La conferencia comenzó con un
    panel
  2015contributors-conference-diversity2: >-
    Diversidad: Siete voces discuten sobre raza, género, habilidades &amp; clase
    en FLOSS e Internet
  2015contributors-conference-diversity3: '. '
  2015contributors-conference-diversity4: Organizado por
  2015contributors-conference-diversity5: 'y'
  2015contributors-conference-diversity6: ', '
  2015contributors-conference-diversity7: >-
    el panel ocurrió el martes 25 de mayo 2015 en el Kresge Auditorium en
    Carnegie Mellon University. Los oradores incluyeron
  2015contributors-conference-diversity8: 'y'
  2015contributors-conference-diversity9: .
  2015cc_1: Un diverso grupo de participantes sonríe y hace un signo de p5 con sus manos
  2015cc_2: >-
    Participantes saltan, sonríen y alzan sus manos en el aire sobre un campo de
    césped
  2015cc_3: >-
    Mujer presenta la Declaración de comunidad en torno a p5.js utilizando su
    computadora
  2015cc_4: >-
    Mujer al micrófono habla expresivamente mientras que dos colaboradores
    observan
  2015cc_5: Participantes sonríen con atención al frente del aula
  2015cc_6: Mujer al micrófono lee sobre p5.js into a tres estudiantas
  2015cc_7: >-
    Participantes se sientan en un círculo alrededor de una pizarra con notas de
    colores mientras que una estudianta habla al micrófono
  2015cc_8: >-
    Participants sit around a table looking at each others laptops and compare
    code 
  2015cc_9: 'Pizarra con notas de distintos colores y notas sobre programación '
  2015cc_10: >-
    Mujer al micrófono habla sobre la importancia de valorar distintas
    habilidades mientras que un grupo de participantes en sus computadoras
    observan su presentación en un aula 
  2015cc_11: >-
    Mujer habla desde un podio en un auditorio mientras que tres participantes
    se sientan en el escenario y otros tres participan en una videollamada 
  2015cc_12: >-
    Vista aérea de un aula con participantes trabajando en sus computadoras
    portátiles 
  2015cc_13: 'Cinco personas discutiendo en un círculo '
  2015cc_14: >-
    Cinco personas en un círculo con sus computadoras portátiles compartiendo
    notas 
  2015cc_15: 'Hombe al micrófono habla a un grupo de participantes dentro de un aula '
  2019contributors-conference-title: Conferencia de contribuyentes 2019
  2019contributors-conference-date: Agosto 13-18
  2019contributors-conference1: 'Un grupo interdisciplinario de 35 participantes se reunió en '
  2019contributors-conference2: >-
    , para programar, documentar, crear herramientas para la comunidad y
    explorar el estado del ambiente de programación p5.js. Los participantes
    vinieron de diversos campos incluyendo tecnología creativa, diseño de
    interación y artes new media. La conferencia se enfocó en promover el
    diálogo a través de un abordaje multidisciplinario. Grupos de trabajo se
    enfocaron en varias áreas temáticas: Acceso; Música y Código en Performance;
    el Estado de la Tecnología; e Internacionalización.
  2019contributors-conference3: Videos por Qianqian Ye
  2019contributors-conference4: Fotos por Jacquelyn Johnson
  outputs: Resultados
  output1: >-
    . La implementación de patrones flexibles con formas de triángulos,
    cuadrados, hexágonos y octágonos para p5.js. Creado por Aren Davey.
  output2: >-
    . Una serie de plantillas para construir juegos para varios jugadores en
    distintos dispositivos donde multiples clientes se conectan a un servidor.
    Creado por L05.
  output3: Experimentos utilizando
  output3-1: >-
    , pruebas de una implementación temprana de softCompile, interface OSC y
    conectividad aumentada con un demo para su uso con MIDI. ¡Un ambiente de vj
    colaborativo para codificar en vivo con p5.js! Creado por Ted Davis.
  output4: >-
    Un panel sobre género y afro-desendencia en espacios virtuales liderado por
    American Artist, con shawné michaelain holloway y LaJuné McMillian.
  output5: Talleres liderados por Everest Pipkin y Jon Chambers.
  output6: 'Un prototipo de '
  output6-1: interface notebook para p5.js.
  output6-2: Creado por Allison Parrish.
  output7: >-
    Nuevas instalaciones artísticas por by Stalgia Grigg, LaJuné McMillian,
    Aatish Bhatia, y Jon Chambers.
  output8: Herramientas para contribuyentes globales de p5.js.
  output8-1: >-
    Creado por Aarón Montoya-Moraga, Kenneth Lim, Guillermo Montecinos, Qianqian
    Ye,  Dorothy R. Santos, y Yasheng She.
  output9: Como escribir código creativo no-violento.
  output9-1: ' Una revista liderada por Olivia Ross.'
  output10: >-
    Una reforma del sitio web para accesibilidad. Incluyendo actualizaciones
    para accesibilidad usando lectores de pantalla, y mejoras a las páginas
    principal, descargas, empezar y referencia. Con contribuciones de Claire
    Kearney-Volpe, Sina Bahram, Kate Hollenbach, Olivia Ross, Luis
    Morales-Navarro, Lauren McCarthy y Evelyn Masso.
  output11: >-
    Presentaciones colaborativas por Luisa Pereira, Jun Shern Chan, Shefali
    Nayak, Sona Lee, Ted Davis, y Carlos Garcia.
  output12: Una presentación por Natalie Braginsky.
  output13: >-
    El diseño de un sistema de bibliotecas para el editor de p5.js. Creado por
    Cassie Tarakajian y Luca Damasco.
  output14: >-
    Prototipos para conectar p5 a otras bibliotecas. Creado por Alex Yixuan Xu y
    Lauren Valley.
  output15: Una fogata de cierre liderada por Golan Levin.
  2019cc_1: Hombre en un podio de la universidad dando una presentación a un aula llena
  2019cc_2: Participantes sentados en una mesa larga almorzando y conversando
  2019cc_3: >-
    Participantes en un aula, algunos trabajando en sus computadoras portátiles,
    otros conversando 
  2019cc_4: Aula con participantes trabajando en sus computadoras portátiles
  2019cc_5: Participantes reunidos a oscuras en un un aula
  2019cc_6: Mujer presenta en un aula con participantes diversos
  2019cc_7: Participantes conversan en un aula llena de personas
  2019cc_8: Mujer al micrófono habla con participantes en un aula
  2019cc_9: >-
    Participante en el podio habla frente a un texto proyectado sobre el
    problema de anonimizar datos 
  2019cc_10: >-
    Person with a microphone speaking to fellow participants in front of text
    that reads p5.js will not add any new features except those that increase
    access
  2019cc_11: Mujer al micrófono habla con participantes en un aula
  2019cc_12: Hombre al micrófono habla con participantes
  2019cc_13: >-
    Participantes sentados en un aula escuchando atentamente a quienes
    presentan 
  2019cc_14: >-
    Participantes sentados en un aula escuchando atentamente a quienes
    presentan 
  2019cc_15: >-
    Mujer al micrófono habla con participantes sobre los límites sagrados del en
    proyecto detrás suyo 
  2019cc_16: >-
    Vista aéra de participantes escuchando un panel y viendo una proyección de
    una imagen en 3d sobre persona 
  2019cc_17: >-
    Participantes sentados al rededor de una mesa con sus computadoras
    portátiles observando el código en una pantalla
  2019cc_18: >-
    Mujer sentada al lado de un oso de pelucho del mismo tamaño trabaja en su
    computadora 
  2019cc_19: 'Participantes de pie sonriendo al aire libre '
  2019cc_20: Cuatro participantes de pie conversan en un círculo
  2019cc_21: Participantes almorzando juntos sentados al aire libre
  2019cc_22: >-
    Participantes sentados al rededor de una mesa en forma de U video hacia el
    frente del aula
  2019cc_23: 'Hombre sentado al frente del aula hablando enérgicamente al micrófono '
  2019cc_24: >-
    Foto grupal de participantes con sus manos en el aire sonriendo con
    entusiasmo
  2019cc_25: >-
    Grupo de personas sentadas al rededor de una fogata hecha con cuatro
    monitores LCD.
  p5js-community-event-title: p5.js Community Events
  2022-p5js-access-day-title: p5.js Access Day 2022
  2022-p5js-access-day-date: May 21
  2022-p5js-access-day-organizer: Organizer and curator
  2022-p5js-access-day-coordinator: Event Coordinator and Video Producer
  2022-p5js-access-day-description: >-
    The p5.js Access Day is a virtual conference to talk about access in 
    open-source software for the arts (OSSTA) and greater issues beyond the
    software.  The day-long online event features four themed-sessions —
    Critical Web  Accessibility, Disability Arts, Access & Community Building,
    and Access  via Translation. It provides space for contributors of p5.js and
    experienced  practitioners from outside OSSTA projects to share their
    knowledge, perspectives,  and dreams for building greater access to
    technical and arts spaces.  
  2022-p5js-access-day-recap-video: p5.js Access Day 2022 Recap Video
  2022-p5js-access-day-recap-video-asl: p5.js Access Day 2022 Recap Video with ASL Interpretation
  2022-p5js-access-day-moderator: Moderator
  2022-p5js-access-day-speakers: Speakers
  2022-p5js-access-day-session-0: Event Opening
  2022-p5js-access-day-session-1: Critical Web Accessibility
  2022-p5js-access-day-session-2: Disability Arts
  2022-p5js-access-day-session-3: Access & Community Building
  2022-p5js-access-day-session-4: Access via Translation
  2022-p5js-access-day-session-5: Event Closing
  2022-p5js-access-day-production: Event Production
  2022-p5js-access-day-advisor: Event Advisor
  2022-p5js-access-day-asl: Live ASL Interpretation
  2022-p5js-access-day-designer: Graphic Designer
  2022-p5js-access-day-tech-support: Live Event Tech Support
  2022-p5js-access-day-transcriber: Closed Captioning Transcription Support
  2022-p5js-access-day-asl-support: Live ASL Support
books:
  books-title: Libros
  book-1-title: Getting Started with p5.js
  book-1-authors: 'Lauren McCarthy, Casey Reas, y Ben Fry. Illustrations by Taeyoon Choi.'
  book-1-publisher: 'Publicado 2015, Maker Media. '
  book-1-pages: '246 páginas. '
  book-1-type: 'Tapa blanda. '
  book-1-description: >-
    Escrito por la desarolladora principal de p5.js y los fundadores de
    Processing, este libro provee una introducción a las posibilidades creativas
    de la web actual, usando Javascript y HTML.
  book-1-order-a: Ordena desde O'Reilly
  book-1-order-b: Ordena desde Amazon
  book-2-title: Introducción a p5.js (edición en español)
  book-2-authors: >-
    Lauren McCarthy, Casey Reas, y Ben Fry. Traducido por Aarón Montoya-Moraga.
    Ilustraciones de Taeyoon Choi.
  book-2-publisher: 'Publicado 2018, Processing Foundation, Inc. '
  book-2-pages: '246 páginas. '
  book-2-type: 'Tapa blanda. '
  book-2-description: >-
    Escrito por la desarolladora principal de p5.js y los fundadores de
    Processing, este libro provee una introducción a las posibilidades creativas
    de la web actual, usando Javascript y HTML.
  book-2-order-a: Ordena el pdf desde The Processing Foundation Press
  book-2-order-b: Ordena la versión física desde Amazon
  book-3-title: Generative Design
  book-3-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub and Claudius Lazzeroni.'
  book-3-publisher: 'Publicado 2018, Princeton Architectural Press; Reprint edition. '
  book-3-pages: '255 páginas. '
  book-3-type: 'Tapa blanda. '
  book-3-description: >-
    By using simple languages such as JavaScript in p5.js, artists and makers
    can create everything from interactive typography and textiles to 3D-printed
    furniture to complex and elegant infographics.
  book-3-order-a: Ordena desde Princeton Architectural Press
  book-3-order-b: Ordena desde Amazon
  book-4-title: Generative Gestaltung (German Edition)
  book-4-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub and Claudius Lazzeroni.'
  book-4-publisher: 'Publicado 2018, Schmidt Hermann Verlag. '
  book-4-pages: '256 páginas. '
  book-4-type: 'Tapa dura. '
  book-4-description: >-
    By using simple languages such as JavaScript in p5.js, artists and makers
    can create everything from interactive typography and textiles to 3D-printed
    furniture to complex and elegant infographics.
  book-4-order-a: Ordena desde Verlag Hermann Schmidt
  book-4-order-b: Ordena desde Amazon
  book-5-title: Learn JavaScript with p5.js
  book-5-authors: Engin Arslan.
  book-5-publisher: 'Publicado 2018, Apress. '
  book-5-pages: '217 páginas. '
  book-5-type: 'Tapa blanda. '
  book-5-description: >-
    Learn coding from scratch in a highly engaging and visual manner using the
    vastly popular JavaScript with the programming library p5.js. The skills you
    will acquire from this book are highly transferable to a myriad of
    industries and can be used towards building web applications, programmable
    robots, or generative art. 
  book-5-order-a: Ordena desde Apress
  book-5-order-b: Ordena desde Amazon
  book-6-title: 'Aesthetic Programming: A Handbook of Software Studies'
  book-6-authors: 'Winnie Soon, Geoff Cox. '
  book-6-publisher: 'Publicado en 2020, por Open Humanities Press. '
  book-6-pages: '298 páginas. '
  book-6-type: Tapa dura.
  book-6-description: >-
    Usando p5.js, este libro introduce y demuestra la práctica reflexiva de la
    programación estética, promoviendo aprender a programar como una forma de
    entender y cuestaionar los objetos y paradigmas tecnológios existentes, y
    explorar el potencial de reprogramar sistemas más amplios en las esferas
    económica, social y técnica.
  book-6-order-a: Descarga en PDF (gratis)
  book-6-order-b: Comprar en Barnes & Noble
examples:
  Examples: Ejemplos
  back-examples: Volver a Ejemplos
  Structure: Estructura
  Form: Forma
  Data: Datos
  Arrays: Arreglos
  Control: Control
  Image: Imagen
  Color: Color
  Math: Matemática
  Simulate: Simulación
  Interaction: Interacción
  Objects: Objetos
  Lights: Luces
  Motion: Movimiento
  Instance_Mode: Modo Instancia
  Dom: DOM
  Drawing: Dibujo
  Transform: Transformar
  Typography: Tipografía
  3D: 3D
  Input: Input
  Advanced_Data: Avanzado Datos
  Sound: Sonido
  Mobile: Móvil
  Hello_P5: Hola p5
reference:
  Reference: Referencia
showcase:
  showcase-title: Showcase
  showcase-intro1: 'Presentamos Showcase, creada por '
  showcase-intro2: ' en 2019 y actualmente curada por '
  showcase-intro3: >-
    Estamos celebrando cómo las personas usan p5.js para hacer que trabajos
    creativos, el aprendizaje y fuente abierta sean más interesantes e
    inclusivos. Juntos, hacemos una comunidad. Durante el verano de 2020, le
    pedimos a creadores que compartieran cómo usan p5.js en variados proyectos y
    piezas.
  showcase-intro4: >-
    Durante el verano 2020, Showcase está abierto a postulaciones, ¡nomina el
    trabajo con p5.js de alguien o el tuyo para ser incluid aquí!
  nominate-project: Nomina un Proyecto
  showcase-featuring: Presentando
  project-tag-art: Arte
  project-tag-design: Diseño
  project-tag-code: Código
  project-tag-curriculum: Currículum
  project-tag-documentation: Documentación
  project-tag-game: Juego
  project-tag-library: Biblioteca
  project-tag-organizing: Organización
  project-tag-tool: Herramienta
  project-tag-tutorial: Tutorial
  project-roni: Programmed Plotter Drawings
  credit-roni: Roni Cantor
  description-roni: >-
    Ondas senoidales y lerps generadas en p5.js, exportados como SVG y dibujados
    con un plotter y bolígrafos.
  project-phuong: Airi Flies
  credit-phuong: Phuong Ngo
  description-phuong: >-
    En este juego desarrollado con p5.play, ayuda a Airi volar diciendo PEW.
    Creado para alentar a las personas para que se salgan de su zona de confort
    y sentirse más seguros de sí mismos independientemente de cómo lo que hagan
    y cómo se vean o escuchen.
  project-daein: Chillin'
  credit-daein: Dae In Chung
  description-daein: >-
    Un póster tipográfico interactivo que utiliza el sensor de movimiento de un
    dispositivo móvil con p5.js.
  project-qianqian: Qtv
  credit-qianqian: Qianqian Ye
  description-qianqian: >-
    Un canal de video con videos de 1-minuto en Mandarín sobre programación
    creativa, arte y tecnología, que incluye tutoriales de p5.js para
    principiantes. Disponible en  YouTube, Instagram, Bilibili y TikTok.
  project-casey-louise: p5.js Shaders
  credit-casey-louise: 'Casey Conchinha, Louise Lessél'
  description-casey-louise: 'Un recurso para aprender el qué, por qué y cómo usar shaders en p5.js.'
  project-moon-xin: Moving Responsive Posters
  credit-moon-xin: 'Moon Jang, Xin Xin, and students'
  description-moon-xin: >-
    Pósters móviles basados en el navegador que utilizan sistemas gráficos,
    métodos de transformación y p5.js para abordar las connotaciones de una
    palabra de menos de 8 letras. Diseñado por estudiantes para un curso de
    diseño gráfico (Visual Narrative Systems / Sistemas Narrativos Visuales) en
    la Universidad de Georgia.
  created-by: Creado Por
  pronouns-female: (ella)
  creator-from-roni-cantor: 'De Toronto, Canadá'
  project-links: Enlaces de proyectos
  project-links-text-1-roni-cantor: Sketch de ejemplo en p5.js Web Editor
  project-links-text-2-roni-cantor: AxiDraw V3 demo video
  project-q-1-1: ¿Qué haces ahora?
  project-q-1-2: ¿Cómo empezaste con p5.js?
  project-a-1-1-roni-cantor: >-
    Me acabo de graduar del programa de Nuevos Medios (New Media) de la
    Universidad de Ryerson. Después de 4 años de programación y fabricación de
    robots, decidí tomar un descanso y jugar con algunas formas de arte más
    tradicionales, mientras que todavía programando y jugando con robots.
  project-a-1-2-roni-cantor: '¡Comencé a usar p5.js en '
  project-a-1-3-roni-cantor: '! After using '
  project-a-1-4-roni-cantor: '! Después de usar Processing durante muchos años, quería probar algo nuevo.'
  project-q-2: ¿Cómo usaste p5.js en este proyecto?
  project-a-2-1-roni-cantor: >-
    Utilicé p5.js en este proyecto para generar las fórmulas de onda sinusoidal
    y lerp (interpolación lineal) y mostrar las imágenes en el 
  project-a-2-2-roni-cantor: >-
    . Luego usé una función en mi código que exportaba mi gráfico programado a
    un archivo 
  project-a-2-3-roni-cantor: '. Necesitaba un archivo SVG para darle al plotter, un '
  project-a-2-4-roni-cantor: >-
    , para que entendiera dónde dibujar las líneas que programé. ¡Envié esta
    información al trazador con un programa llamado 
  project-a-2-5-roni-cantor: '!'
  project-q-3: ¿Cuál es tu función favorita de p5.js?
  project-a-3-roni-cantor: ' porque las líneas son divertidas y "lerp" es una palabra divertida para decir!'
  project-q-4: >-
    ¿Enfrentó algún desafío al trabajar en este proyecto? Si es así, ¿cómo los
    superaste?
  project-a-4-roni-cantor: >-
    ¡Era la primera vez que usaba p5.js, Inkscape y un plotter! Realmente me
    beneficié de las personas a mi alrededor que habían usado p5 antes, así como
    de guías y foros en línea.
  project-q-5: ¿Qué es algo cool que deberíamos explorar?
  project-a-5-roni-cantor: ' en Instagram: cosas de plotter análogo súper geniales.'
  project-q-6: ¿En dónde se puede aprender más sobre ti?
  project-a-6-roni-cantor: ' (Instagram)'
  project-resources: Recursos del Proyecto
  creator-from-qianqian: 'Los Ángeles, California'
  interview-link-qianqian: Entrevista de Processing Foundation con Qianqian Ye
  project-a-1-1-qianqian: Soy una artista y diseñadora china con sede en Los Ángeles.
  project-a-1-2-qianqian: >-
    Mi pareja me presentó p5.js y en el cual aprendí principalmente al ver
    videos tutoriales gratuitos en línea. Mi primer proyecto de p5.js fue
    dibujar algunas formas con diferentes colores.
  project-a-2-1-qianqian: >-
    Este proyecto comenzó con la idea de enseñarle a mi mamá, que vive en China
    y no habla inglés, a programar con p5.js. Este proyecto fue difícil en
    diferentes niveles y quería comenzar identificando las razones principales
    por las que es más difícil para alguien como mi madre aprender a programar,
    principalmente debido a la falta de recursos educativos gratuitos de
    programación creativa. La mayoría de los recursos gratuitos para aprender la
    programación creativa no están disponibles en China. Los tutoriales de p5.js
    en YouTube, así como las cuentas de p5.js en Twitter e Instagram son
    inaccesibles en China debido a la censura del internet.
  project-a-2-2-qianqian: 'Aprendí mucho de los videos de YouTube, como el '
  project-a-2-3-qianqian: >-
    , pero cuanto más miraba los tutoriales de programación en línea, más me
    daba cuenta de lo difícil que es encontrar otras mujeres y personas de color
    enseñando programación, especialmente en mandarín. Quería ayudar a otras
    mujeres chinas a relacionarse con la programación creativa.
  project-a-2-4-qianqian: >-
    Estoy trabajando para abrir los canales de video a otrxs creativxs chinxs
    que quieran contribuir al recurso educativo juntxs, como entrevistas y
    tutoriales invitadxs. Si te interesa enseñar/hablar sobre programación
    creativa en mandarín, ¡Avísame!
  project-a-3-1-qianqian: 'El '
  project-a-3-2-qianqian: ' es mi función favorita. Hace que la programación creativa en línea sea perfecta.'
  project-a-4-1-qianqian: >-
    Aprender a programar en un segundo idioma fue difícil y la falta de
    comunidad hizo que este proceso fuera aún más arduo. Espero hablar desde mi
    experiencia como principiante y alguien que alguna vez se sintió como un
    extraño al mundo de la programación creativa y el de los videos tutoriales.
  project-a-4-2-qianqian: >-
    Paso mucho tiempo investigando la tecnología más actual para mis videos. Al
    final, decidí usar mi teléfono para grabar y iMovie para editar. Espero
    alentar a otros a que no se necesitan muchas cosas costosas para comenzar a
    hacer videos instructivos.
  project-a-4-3-qianqian: >-
    Otro problema que encontré fue mi propio miedo a ponerme en línea. Primero
    tuve que superar mi ansiedad de cometer errores en los videos o recibir
    comentarios negativos en línea. A menudo, mujeres y personas de color son
    víctimas de acoso en línea. Espero ayudar a establecer un ejemplo para otras
    mujeres y personas de color que está bien ponerse en línea y fortalecer sus
    comunidades compartiendo su conocimiento. Eventualmente, podremos detener el
    acoso en línea creando comunidades diversas y fuertes.
  project-a-5-1-qianqian: 'Estoy muy entusiasmado por '
  project-a-5-2-qianqian: ' en LA.'
  creator-from-phuong: 'De Kiev, Ucrania'
  project-a-1-1-phuong: >-
    Soy una programadora y diseñadora creativa, un receptor de la beca de
    diversidad 
  link-1-phuong: Juega Airi Flies!
  link-2-phuong: Código para AiriFlies en GitHub
  link-3-phuong: Más info en el portafolio de Phuong Ngo
  project-a-1-2-phuong: ', y solo una criatura curiosa.'
  project-a-1-3-phuong: >-
    Estaba tomando un curso en la Escuela de Máquinas en Berlín este verano
    llamado "
  project-a-1-4-phuong: '", principalmente impartido por '
  project-a-2-1-phuong: >-
    Usé p5.js para trabajar en la parte visual del juego. Los sprites de
    animación para Airi y los fantasmas se dibujaron en una aplicación para iPad
    llamada 
  project-a-2-2-phuong: ' y luego se integraron en el código '
  project-a-2-3-phuong: . Principalmente utilicé ejemplos en p5.play como referencia.
  project-a-2-4-phuong: 'Para el fondo de desplazamiento sin fin, encontré un '
  p5-sketch-by-chjno-phuong: p5 sketch de chjno
  project-a-2-5-phuong: >-
    . Establecí una condición para que cada vez que se detectara la palabra
    "pew" o un clic del mouse, la velocidad de desplazamiento cambiara para
    crear una ilusión de Airi volando hacia arriba. Cuando el usuario no hace
    nada, la velocidad de desplazamiento es negativa, hace que parezca que Airi
    se está cayendo.
  project-a-2-6-phuong: 'Para el reconocimiento de sonido, utilicé '
  project-a-2-7-phuong: '  (actualmente, hay una versión beta que aún no está disponible en público, ¡pero lo estará muy pronto!). Agregué alrededor de 120 muestras de mis compañeros de clase diciendo la palabra "pew" con diferentes entonaciones y 80 muestras de ruido de fondo para entrenarlo. Luego integré el modelo en el juego con '
  project-a-3-1-phuong: >-
    Realmente me encanta lo fácil que se puede crear, manipular y eliminar
    bloques y clases HTML con la 
  project-a-3-2-phuong: ' a través de '
  project-a-3-3-phuong: ' etc. But my most favorite function is '
  project-a-3-4-phuong: ', etc. Pero mi función favorita es '
  project-a-4-1-phuong: >-
    Hubieron muchos desafíos simplemente porque p5.js era algo nuevo para mí. No
    había trabajado mucho con JavaScript en general antes. Leer documentación y
    buscar ejemplos similares ayudó mucho.
  project-a-5-1-phuong: '¡Chequen los '
  school-of-machines-phuong: cursos de School of Machines
  project-a-5-2-phuong: >-
    ! Se esfuerzan por conectar a las personas más creativas del mundo y hasta
    ahora lo hacen bien. ❤️
  pronouns-male: (el)
  creator-from-chung: 'De Baltimore, Maryland'
  link-1-casey-louise: Guía de p5.js Shaders
  link-2-casey-louise: Colección glitch de ejemplos con p5.js shader
  link-1-chung: Vean Chillin'
  link-2-chung: Código para Chillin’ en GitHub
  link-3-chung: Más info en el portafolio de Dae In Chung
  project-a-1-1-chung: >-
    Soy diseñador gráfico y miembro de la facultad en Maryland Institute College
    of Art, donde enseño principalmente programación (con p5.js y Processing,
    por supuesto) y motion graphics.
  project-a-1-2-chung: 'He estado usando '
  project-a-1-3-chung: ' durante algún tiempo, y cuando apareció p5.js, comencé a usarlo sin pensarlo dos veces porque era fácil convertir el código de Processing existente y compartir proyectos en línea.'
  project-a-2-1-chung: >-
    Este verano, me di el desafío de hacer carteles tipográficos con
    programación, y este es uno de los carteles que hice. Hasta hace muy poco,
    no sabía que podía usar los datos del sensor de movimiento con p5.js.
    También estaba viendo los 
  dan-shiffman-matterjs-tutorial: video tutoriales de Dan Shiffman matter.js
  project-a-2-2-chung: >-
    , así que pensé ¿por qué no combinar los dos y practicar lo que estaba
    aprendiendo?
  project-a-3-1-chung: >-
    Hay muchas cosas que me encantan de p5.js, como la comunidad en línea y la
    amabilidad de los principiantes. Lo que realmente me gusta en este momento
    es el 
  project-a-3-2-chung: >-
    , con el que no solo puedo trabajar en línea para mí, sino también compartir
    el URL rápidamente en el modo actual. Para este proyecto en particular, tuve
    que hacer muchas pruebas en mi teléfono, y fue mucho más fácil y rápido que
    comprometerme con GitHub.
  project-a-4-1-chung: >-
    Tuve algunos problemas con el manejo de la fuente, el canal alfa y z-depth
    en el modo 
  project-a-4-2-chung: >-
    . Todavía no estoy contento con todas mis decisiones. Pero en general, fue
    útil buscar en el foro y no olvidar dividir los problemas en otros más
    pequeños e iterar poco a poco. Además, tuve problemas para renderizar
    archivos de video directamente desde p5.js. La grabación de pantalla no era
    una opción debido a caídas de frecuencia de cuadros intermitentes (mi
    computadora portátil es bastante lenta). Después de investigar un poco,
    decidí aprender algunos conceptos básicos de 
  project-a-4-3-chung: ' y crear una herramienta para mí.'
  project-a-5-1-chung: >-
    Como se mencionó anteriormente, si desea renderizar cuadros y archivos de
    video a partir de bocetos de p5.js, consulte mi 
  project-a-5-2-chung: ' y hazme saber lo que piensas.'
  creator-from-casey-louise: 'De Nueva York, Nueva York'
  project-a-1-1-casey-louise: >-
    Casey: Soy un estudiante de NYU ITP que está interesado en gráficos
    computacionales y espacios interactivos, físicos y digitales.
  project-a-1-2-casey-louise: >-
    Louise: Soy una estudiante de NYU ITP que está interesada en gráficos
    computacionales y espacios interactivos basados en tecnologías de sensores.
  project-a-1-3-casey-louise: >-
    Casey: Comencé a aprender p5.js en 2018 en mi primer semestre en ITP, aunque
    había estado incursionando en 
  project-a-1-4-casey-louise: ' desde 2012. Mi amigo Pedro me introdujo a Processing cuando estudiaba diseño gráfico, y me impresionó. La idea de crear mis propias herramientas para crear gráficos y arte interactivo despertó mi interés, pero una vez que lo intenté, me enganché. El primer proyecto que puedo recordar fue un ojo que te seguía por la pantalla, y se ponía triste cuando lo dejabas solo.'
  project-a-1-5-casey-louise: >-
    Louise: Inicialmente aprendí p5.js para hacer que un sitio web que ya estaba
    creando para que fuera más divertido. Soy una programadora de C#, así que
    este fue un buen segway a JavaScript para mí.
  project-a-2-1-casey-louise: >-
    Casey: Estuve posponiendo los sombreadores de aprendizaje durante mucho
    tiempo, y también tenía curiosidad por saber si podría usarlos en p5.js.
    Luego escuché acerca de una subvención para proyectos de código abierto,
    narración de historias y recursos de aprendizaje en ITP llamada 
  project-a-2-2-casey-louise: >-
    . Como no encontraba mucho en la documentación de p5.js + shader, decidí
    descubrir cómo se implementan en p5.js y crear un recurso para que otros
    aprendan. Cuando le conté a Louise sobre el proyecto, ella estaba
    inmediatamente entusiasmada por aprender y enseñar sombreadores en p5.js.
    Ella ha sido excelente al asegurarse de que el proyecto sea un recurso de
    aprendizaje y no solo una colección de ejemplos.
  project-a-3-1-casey-louise: 'Casey: ¿'
  project-a-3-2-casey-louise: ' cuenta como una función? También me encanta tener la capacidad de compartir mis programas en la web para que las personas no tengan que instalar un software especial o venir a Nueva York para ver mi trabajo.'
  project-a-3-3-casey-louise: 'Louise: Mi función favorita es '
  project-a-3-4-casey-louise: ' y '
  project-a-3-5-casey-louise: ' para la transformación del sistema de coordenadas para hacer imágenes generativas.'
  project-a-4-1-casey-louise: >-
    Casey: El comienzo del proyecto (descubrir cómo funcionan las cosas) fue que
    contactamos a personas increíbles, les hicimos preguntas y les pedimos
    permiso para usar sus ejemplos en nuestro proyecto. 
  adam-ferris-repo-casey-louise: GitHub repo de Adam Ferriss
  project-a-4-2-casey-louise: ' realmente nos dio las bases para comprender cómo funcionan los shaders en p5.js y proporcionó un marco de ejemplos accesibles para que podamos crear proyectos. Para algunos problemas específicos relacionados con p5.js que teníamos, nos comunicamos con '
  project-a-4-3-casey-louise: ' y '
  project-a-4-4-casey-louise: ' (quienes trabajaron en la '
  webgl-casey-louise: implementación de WebGL en p5.js
  project-a-4-5-casey-louise: '), y fueron muy útiles.'
  project-a-4-6-casey-louise: >-
    Louise: La curva de aprendizaje fue bastante empinada para implementar
    shaders en p5. Afortunadamente, hubo algunos ejemplos muy bien documentados
    en GitHub por Adam Ferriss. Nuestro objetivo era hacerlo de manera que un
    principiante pueda entender cómo implementarlo, por lo que fue tanto un
    desafío técnico como un desafío en la enseñanza del código a extraños y
    principiantes. Aquí nos inspiramos en la forma en que está escrito el 
  openframeworks-book-casey-louise: libro de openFrameworks
  project-a-4-7-casey-louise: >-
    . Creemos en un enfoque divertido de "oye, no es difícil y tú también puedes
    hacerlo".
  project-a-5-1-casey-louise: '¡Visiten '
  project-a-5-2-casey-louise: ' para explorar los increíbles proyectos de subvenciones de nuestros compañeros!'
  pronouns-nonbinary: (elle)
  creator-from-moon: 'De Atenas, Georgia'
  posters-by: Posters hechos por
  project-a-1-1-moon: >-
    Moon: Soy diseñadora gráfica, artista visual y educadora de diseño. Este
    verano, impartí un curso de diseño gráfico en el programa Cortona de la
    Universidad de Georgia en Italia, presentando algunos conceptos básicos de
    p5.js. Este otoño, planeo enseñar y estudiar plataformas digitales en UGA.
  project-a-1-2-moon: 'Mi ex colega, '
  project-a-1-3-moon: ', me invitó a '
  project-a-1-4-moon: ' en '
  pcd-la-moon: LA en enero de 2019
  project-a-1-5-moon: >-
    . Me ayudaron con las herramientas y la lógica de p5.js. Fue una excelente
    experiencia de enseñanza y aprendizaje.
  project-a-2-1-moon: 'Seguimos tutoriales básicos, '
  codetrain-moon: los videos de Daniel en YouTube
  project-a-2-2-moon: ', y '
  p5-reference-moon: Referencia en el sitio web p5.js
  project-a-2-3-moon: .
  project-a-3-1-moon: 'Mi función favorita está relacionada con '
  project-a-3-2-moon: ' y '
  project-a-3-3-moon: ': '
  project-a-3-4-moon: >-
    . Pude usar y enseñar esta herramienta para visualizar varias ideas sobre el
    tiempo en movimiento.
  project-a-4-1-moon: >-
    Para mí, un principiante, fue un desafío comprender la estructura general de
    p5.js y cómo funciona el código en general. Tuve que repetir los conceptos
    básicos de p5.js un par de veces, y luego dibujé un cuadro para memorizar y
    enseñar la forma en que entendí la estructura y el código de p5.js con
    fuertes restricciones que configuré. Fue una excelente experiencia de
    enseñanza y aprendizaje.
  project-a-5-1-moon: 'Echa un vistazo a '
  project-a-5-2-moon: ' en Milán, Italia.'
teach:
  teach-title2: Enseñar
  teach-intro1: >-
    Cada enseñanza tiene sus propios objetivos, mensajes, condiciones y
    entornos. 
  teach-intro2: >-
    Al documentar y compartir talleres, clases y materiales de p5, esperamos
    conectar mejor las comunidades de estudiantes y educadores de p5.js de todo
    el mundo. 
  teach-intro3: Compartir o recomendar
  teach-intro4: 'tus propias experiencias de enseñanza, también!'
  teach-heading: p5 Recursos Didácticos
  teach-search-filter: Filtro de Búsqueda
  teach-filter1: 'Diversity & Inclusion : '
  teach-filter1-label1: Género
  teach-filter1-label2: Raza y Etnia
  teach-filter1-label3: Idioma
  teach-filter1-label4: Neurotipo
  teach-filter1-label5: Habilidad
  teach-filter1-label6: Clase
  teach-filter1-label7: Religión
  teach-filter1-label8: (Sub-)Cultura
  teach-filter1-label9: Opinión Política
  teach-filter1-label10: Edad
  teach-filter1-label11: Nivel de Haibilidad
  teach-filter1-label12: Occupación
  teach-filter1-label13: '#noCodeSnobs'
  teach-filter1-label14: '#newKidLove'
  teach-filter1-label15: '#unassumeCore'
  teach-filter1-label16: '#BlackLivesMatter'
  teach-filter2: 'Venue : '
  teach-filter2-label1: África
  teach-filter2-label2: Asia
  teach-filter2-label3: Europe
  teach-filter2-label4: América del Norte
  teach-filter2-label5: Oceanía
  teach-filter2-label6: América del Sur
  teach-filter2-label7: 'Virtual-Online '
  teach-filter3: 'Year : '
  teach-filter4: 'Level of Difficulty : '
  teach-filter4-label1: Primaria
  teach-filter4-label2: Intermedio
  teach-filter4-label3: Advanzado
  teach-case-subtitle1: Lugar y fecha
  teach-case-subtitle2: Participantes
  teach-case-subtitle3: Nivel de Dificultad
  teach-case-subtitle4: Metas
  teach-case-subtitle5: Método y Materiales
  teach-case1-title: Introduction to Video Game Programming in High School with p5.js
  teach-case1-lead-name: Emanuele Bolognesi
  teach-case1-image-alt: A group photo of 25 students with their teacher
  teach-case1-content1: "\U0001F4CD High School Russell-Newton, Scandicci (FI), Italy. "
  teach-case1-content1-1: '02/06/2022 ~ 04/10/2022 every Saturday 10:00-11:00'
  teach-case1-content2: >-
    25 students (15-16 years old) of an Italian High School. 11 girls and 14
    boys
  teach-case1-content3: ' Elementary'
  teach-case1-content4: >-
    Introduce 10th grade students to simple video game programming using
    javascript and p5.js
  teach-case1-content5: 'Method: p5.js web editor'
  teach-case1-content5-1: The
  teach-case1-content5-2: works
  teach-case1-content5-3: of the students
  teach-case2-title: Fractal implementations
  teach-case2-lead-name: Mariana
  teach-case2-content1: Mars
  teach-case2-content1-1: '06.02.2022 15:00~15:30'
  teach-case2-content2: 15
  teach-case2-content3: ' Advanced'
  teach-case2-content4: Introduce the theme of fractals and use p5js to implement them
  teach-case2-content5: 'Just '
  teach-case3-title: Introduction to Computational Media with p5.js
  teach-case3-lead-name: Barry Voeten
  teach-case3-content1: school
  teach-case3-content1-1: entire course
  teach-case3-content2: 'Dutch school kids, age 14-15'
  teach-case3-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case3-content4: education
  teach-case3-content5: Syllabus
  teach-case4-title: Calculadora de IMC
  teach-case4-lead-name: Dayana
  teach-case4-content1: Youtube
  teach-case4-content1-1: '00h: 30min'
  teach-case4-content2: 'Inscritos no canal do youtube, houveram 18 vizializações.'
  teach-case4-content3: ' Elementary, Iniciante'
  teach-case4-content4: Auxiliar pessoas que estao iniciando na programação.
  teach-case4-content5: 'Editor Web do p5.js , Tutorial no youtube'
  teach-case5-title: Taller de Creative Coding
  teach-case5-lead-name: Federico Santana
  teach-case5-image-alt: Screen shot of the teacher is teaching on p5.js web editor online
  teach-case5-content1: 'https://www.twitch.tv/snowflakeFede'
  teach-case5-content1-1: 'every saturday 19:00-20:30PM (timezone: GMT-3)'
  teach-case5-content2: >-
    Soy yo nada más, pero me gusta invitar personas para programar en vivo
    cuando puedo.
  teach-case5-content3: ' Elementary'
  teach-case5-content4: >-
    Hacer que más personas aprendan sobre el arte creativo y, a su vez, poder ir
    acercandolas al mundo de la matemática, todo en español. El curso está
    fuertemente inspirado en "The coding train" pero con acercamiento que va a
    la matemática y el arte creativo en su conjunto.
  teach-case5-content5: >-
    Sólo una colección de p5js donde subo los ejemplos que se hacen en vivo,
    acá:
  teach-case6-title: "50+ CODING CLUB: MY VERY FIRST CODE ART WITH HANDY(\U0001F590) AND FAMILY(\U0001F469‍\U0001F467‍\U0001F466)"
  teach-case6-lead-name: Inhwa Yeom
  teach-case6-image-alt: In-class photo
  teach-case6-content1: 'Asia Culture Center, Gwangju, South Korea'
  teach-case6-content1-1: '27/11/2020~ 12/2020 every Friday and Saturday 2:00-4:00'
  teach-case6-content2: >-
    People who identify themselves as older adults (average age = 62.54), and
    their companions of all ages.
  teach-case6-content3: ' Elementary'
  teach-case6-content4: >-
    p5 for 50+ aims to enhance the digital literacy and rights of people going
    on 50+
  teach-case6-content5: 'p5 editor, p5for50+ web app, p5js.org, print out of code results'
  teach-case7-title: Introduction to p5js
  teach-case7-lead-name: Bérenger Recoules a.k.a b2renger
  teach-case7-image-alt: example picture
  teach-case7-content1: L'École de Design Nantes Atlantique - France
  teach-case7-content1-1: from 2018 and ongoing
  teach-case7-content2: Students from l'école de design Nantes Atlantique
  teach-case7-content3: ' Elementary'
  teach-case7-content4: 'get to know p5js and its functionalities (dom, audio, webgl etc.)'
  teach-case7-content5: 'github readme : this a text tutorial to read in French.'
  teach-case8-title: I am starting a new one -
  teach-case8-lead-name: Brinder Soin
  teach-case8-content1: New Jersey
  teach-case8-content1-1: 12/28 - 12/30
  teach-case8-content2: >-
    About 100 students from grades 7, 8 and 9 from various schools and
    locations.
  teach-case8-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case8-content4: >-
    Keeping children safe and learning in the time of covid and promote STEM
    education
  teach-case8-content5: Teacher created notes and worksheets and IDE p5 web editor
  teach-case9-title: Programación Aplicada al Arte Visual e Interactivo
  teach-case9-lead-name: Sebastián Zavatarelli
  teach-case9-image-alt: A zoom class sharing p5.js web editor
  teach-case9-content1: 'Buenos Aires, Argentina. Plataforma ZOOM'
  teach-case9-content1-1: '15/09/2020 ~ 14/10/2020 every Wednesday 6:30-9:00PM)'
  teach-case9-content2: Alrededor de 10 personas. La mayoría mujeres.
  teach-case9-content3: ' Elementary,  Intermediate'
  teach-case9-content4: >-
    El curso está destinado a artistas que quieran comenzar a utilizar las
    herramientas tecnológicas actuales para el desarrollo de sus obras. También
    puede ser aprovechado por aquellxs que quieran iniciarse en la programación
    de computadoras a través de un entorno de programación simple, visual,
    accesible y divertido.
  teach-case9-content5: >-
    p5.js web editor. Online a trvés de plataforma ZOOM y material subido en
    moodle
  teach-case10-title: Painting with Code
  teach-case10-lead-name: Andreas Refsgaard
  teach-case10-content1: 'Copenhagen, Denmark'
  teach-case10-content1-1: 22/02/2020
  teach-case10-content2: Participants were people . A wide range of people from
  teach-case10-content3: ' Intermediate'
  teach-case10-content4: >-
    Get creatives, designers, artists and other people who don't typically use
    code introduced to p5.js
  teach-case10-content5: 'Website, p5.js editor'
  teach-case11-title: Signing Coders
  teach-case11-lead-name: Taeyoon Choi
  teach-case11-content1: 'BRIC, New York City.  USA Seoul Museum of Art, Seoul, South Korea.'
  teach-case11-content1-1: '5 Sessions, each 2~3 hours'
  teach-case11-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case11-content3: ' Elementary'
  teach-case11-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case11-content5: >-
    We used p5.js Web editor and code examples on the website.  We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts. 
  teach-case12-title: Digital Weaving & Physical Computing Workshop Series
  teach-case12-lead-name: Qianqian Ye
  teach-case12-image-alt: In-class photo
  teach-case12-content1: 'Women’s Center for Creative Work, Los Angeles, CA, US'
  teach-case12-content1-1: '19/10/2019 ~ 02/11/2019, every Saturday 3-6pm'
  teach-case12-content2: '15 women and non-binary artists, designer, makers, programers.'
  teach-case12-content3: ' Elementary'
  teach-case12-content4: >-
    Over the course of three workshops, we’ll draw and create patterns using
    p5.js, an open-source graphical library; we’ll learn and apply computational
    concepts to transform patterns and finally, we’ll bring a weaving to life
    with electronic microcontrollers.
  teach-case12-content5: >-
    Materials: Slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool Methods: small team session
  teach-case12-content5-1: 'Slides we used for the workshop:'
  teach-case13-title: p5.js à l'Ubuntu Party!
  teach-case13-lead-name: Basile Pesin
  teach-case13-content1: '2020 Ubuntu Party '
  teach-case13-content1-1: 'Cité des Sciences et de l''''Industrie, Paris, France'
  teach-case13-content2: 'Any age, including children and parents, young and older adults.'
  teach-case13-content3: Advanced
  teach-case13-content4: >-
    To introduce a new public to programming through fun and compelling
    examples.
  teach-case13-content5: >-
    Method: in-person workshop, 1 hour per session, with different participant
    each times. The students were using (Ubuntu) machines with the p5.js web
    editor. I was teaching using a video projector as well as a board.
  teach-case13-content5-1: >-
    Materials: The exercises I gave where accessible through p5.js web-editor
    links available in
  teach-case14-title: >-
    Making The Thing that Makes the Thing: Exploring Generative Art & Design
    with p5.js
  teach-case14-lead-name: Priti Pandurangan & Ajith Ranka
  teach-case14-image-alt: >-
    A group of participants collaborating to create some designs using the p5.js
    web editor on their laptops.
  teach-case14-content1: 'National Institute of Design, Bangalore'
  teach-case14-content1-1: '2020 February 8, 2:30-4:00 PM'
  teach-case14-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case14-content3: 'Priti: Intermediate & Ajith: Advanced'
  teach-case14-content4: >-
    To explore generative art &#x0026; design and recreate some classical works
    with p5.js.
  teach-case14-content5: 'Methods: In-person, collaborative, hands-on workshop.'
  teach-case14-content5-1: 'Materials: '
  teach-case14-content5-2: 'course page '
  teach-case14-content5-3: 'linking to sketches on the p5 editor, '
  teach-case14-content5-4: 'interactive reference guide '
  teach-case14-content5-5: to p5 basics
  teach-case15-title: CC Fest (Creative Coding Festival)
  teach-case15-lead-name: Saber
  teach-case15-speech: 'Love p5.js. It has meant so much to me, my students, and this community.'
  teach-case15-content1: ' New York, Los Angeles, San Francisco, Virtual-Online '
  teach-case15-content1-1: ' Twice a year in NYC for four years; once a year in LA for three years; once a year in SF for two years; now virtual'
  teach-case15-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case15-content3: Intermediate
  teach-case15-content4: >-
    To build a teacher and student community around p5 for middle and high
    school.
  teach-case15-content5: >-
    A half-day of workshop led by volunteer teachers. We saw lots of different
    methods and materials. Most used some sort of slides or documentation, some
    live coding using an editor, with work time for participant to remix.
  teach-case15-content5-1: CC Fest Lessons page
  teach-case15-content5-2: ' for teaching materials'
  teach-case15-content5-3: More photos
  teach-case16-title: Taller Introducción a la Programación Creativa con p5.js
  teach-case16-lead-name: Aarón Montoya-Moraga
  teach-case16-image-alt: >-
    A group of 20 people sitting on a large shared table with their laptops
    looking at a projected screen.
  teach-case16-speech: 'p5.js is my happy place '
  teach-case16-content1: ' PlusCode Media Arts Festival, Buenos Aires, Argentina & Virtual-Online '
  teach-case16-content1-1: ' 2018 November 14, 3 hours'
  teach-case16-content2: >-
    I had around 16 students in the workshop, and a team including 3 people from
    the PlusCode festival, and one person at the venue.
  teach-case16-content3: 'Elementary, Intermediate, Advanced'
  teach-case16-content4: >-
    Introduction to beginners and artists of graphic web programming and open
    source, using p5.js, in Spanish :)
  teach-case16-content5: 'I used the material on this '
  teach-case16-content5-1: GitHub repo
  teach-case16-content5-2: ', we used the p5.js web editor, we had a three hour long workshop'
  teach-case16-content5-3: '+CODE electronic art festival 2018, Argentina'
  teach-case16-content5-4: ', Medium'
  teach-case17-title: Introduction to Generative Drawing
  teach-case17-lead-name: Adam Herst
  teach-case17-speech: >-
    My greatest source of uncertainty in developing the workshop was whether it
    was trying to teach art to programmers or to teach programming to artists.
  teach-case17-content1: Inter/Access
  teach-case17-content1-1: ' (artist-run centre), Toronto, Ontario, Canada'
  teach-case17-content1-2: In-person with a self-paced workbook for remote work
  teach-case17-content1-3: ' 2020 February 12, 7PM-9PM'
  teach-case17-content2: 15 artists
  teach-case17-content3: Elementary
  teach-case17-content4: >-
    To introduce p5.js to artists with little or no programming experience and
    to suggest one way an analogue practice can migrate to a digital form.
  teach-case17-content5: >-
    A printed workbook with activities that used the p5.js web editor to show
    how translate an physical drawing into a digital drawing.
  teach-case17-content5-1: 'Processing Community Day 2019: Generative Drawing at Inter/Access'
  teach-case17-content5-2: Introduction to Generative Drawing Letter PDF
  teach-case17-content5-3: Introduction to Generative Drawing Booklet PDF
  teach-case18-title: 'Open Lecture, Creative Coding: 2020'
  teach-case18-lead-name: Shunsuke Takawo
  teach-case18-image-alt: >-
    A table on which there is a laptop, some sheets of papers, colorful pens and
    two automatic machines drawing something with a pen on a sheet.
  teach-case18-speech: >-
    I love p5.js because it's so easy to read and write code in p5.js. Coding in
    your everyday life!
  teach-case18-content1: ' Kyoto University of Art and Design, Kyoto, Japan & Virtual-Online '
  teach-case18-content1-1: ' 2020 March 16-18, 1-7 PM'
  teach-case18-content2: 'Students of Kyoto University of Art and Design, and anyone.'
  teach-case18-content3: Elementary
  teach-case18-content4: Making code as a tool for artistic expression.
  teach-case18-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case18-content5-1: Syllabus
  teach-case18-content5-2: Day 1
  teach-case18-content5-3: Day 2
  teach-case18-content5-4: Day 3
  teach-case18-content5-5: ', YouTube'
  teach-case19-title: Creative Coding for Static Graphics
  teach-case19-lead-name: Shunsuke Takawo
  teach-case19-speech: >-
    Coding in p5.js is a lot of fun. If you haven't started yet, I encourage you
    to give it a try!
  teach-case19-content1: ' FabCafe MTRL, Tokyo, Japan'
  teach-case19-content1-1: ' 2019 September 15, 4-7 PM '
  teach-case19-content2: Anyone who wants to try coding in p5.js.
  teach-case19-content3: Intermediate
  teach-case19-content4: To code from the graphic design's perspective.
  teach-case19-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case19-content5-1: Syllabus & Material
  teach-case20-title: Generative Typography
  teach-case20-lead-name: Dae In Chung
  teach-case20-image-alt: >-
    A image with black background displaying the letter 'b' in 5 different
    styles along with a menu with various styling options to choose.
  teach-case20-content1: ' Baltimore, Maryland, USA & Virtual-Online '
  teach-case20-content1-1: ' 2019 January 21 - May 08, every Wednesday, 4-10 PM'
  teach-case20-content2: 14 undergrads and grad students who had little to no experience in coding.
  teach-case20-content3: Elementary
  teach-case20-content4: Experiment with typographic forms and structures through computation.
  teach-case20-content5: 'Methods: online/offline lectures and critiques.'
  teach-case20-content5-1: 'Materials: p5js online editor, Github, youtube tutorials.'
  teach-case20-content5-2: Works of participants
  teach-case21-title: Machine Learning for the Web
  teach-case21-lead-name: Yining Shi
  teach-case21-image-alt: >-
    A group of 16 people sitting around tables with their laptops, mobile phones
    and some other accessories, facing towards a large television screen.
  teach-case21-content1: ' ITP, NYU, 370 Jay St, Brooklyn, NY 11201, USA'
  teach-case21-content1-1: '2019 March 09 - October 12, every Tuesday, 6:30-9:00 PM'
  teach-case21-content2: >-
    Students at Interactive Telecommunications Program, New York University. 16
    people.
  teach-case21-content3: 'Elementary, Intermediate'
  teach-case21-content4: >-
    The goal of this class is to learn and understand common machine learning
    techniques and apply them to generate creative outputs in the browser using
    ml5.js and p5.js.
  teach-case21-content5: >-
    This class is a mix of lectures, coding sessions, group discussions, and
    presentations. I used
  teach-case21-content5-1: GitHub
  teach-case21-content5-2: ' to host class syllabus and all the coding materials, Google Slides for lectures and p5.js Web Editor for live coding sessions. Every week, there were one-on-one office hours to talk about any difficulties of coming up with an idea for the homework or any coding changes.'
  teach-case21-content5-3: 'Methods: online/offline lectures and critiques.'
  teach-case22-title: Introduction to p5.js and JavaScript
  teach-case22-lead-name: Nico Reski
  teach-case22-content1: ' Currently available as self-study at own pace with accompanying slides, linked below.'
  teach-case22-content3: 'Beginner, Elementary'
  teach-case22-content4: >-
    Introduce learners (potentially with no coding experiences at all) to the
    very basics of p5.js (and JavaScript), in order to encourage creative coding
    and enable them to pursue own projects in a safe environment.
  teach-case22-content5: >-
    p5.js source code (for the introductory project), JavaScript source code
    (illustrating some basic JavaScript functionalities), accompanying slides in
    .pdf format, all hosted publicly on GitHub.
  teach-case22-content5-1: Overview
  teach-case22-content5-2: ' of the workshop and its contents (including all links to the material hosted on GitHub) on my academic webpage.'
  teach-case23-title: Digital Weaving & Physical Computing Workshop Series
  teach-case23-lead-name: Qianqian Ye & Evelyn Masso
  teach-case23-image-alt: >-
    This image is divided in two parts. The left part shows a group of 15 women
    sitting on chairs with their laptops and looking at a presentor who is
    explaining a code on a projected screen. The right part of the image shows a
    person learning weaving using a physical pattern and a weaving tool.
  teach-case23-content1: ' Womens Center for Creative Work (WCCW), Los Angeles, CA, US'
  teach-case23-content1-1: ' 2019 October 19 - November 02, every Saturday 3-6 PM'
  teach-case23-content2: '15 women and non-binary artists, designer, makers, programers. '
  teach-case23-content3: Elementary
  teach-case23-content4: >-
    Over the course of three workshops, we will draw and create patterns using
    p5.js, an open-source graphical library; we will learn and apply
    computational concepts to transform patterns and finally, we will bring a
    weaving to life with electronic microcontrollers.
  teach-case23-content5: 'Methods: small team session'
  teach-case23-content5-1: >-
    Materials: slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool.
  teach-case23-content5-2: 'Workshop Slide #1'
  teach-case23-content5-3: 'Workshop Slide #2'
  teach-case23-content5-4: Workshop Information
  teach-case23-content5-5: ' on WCCW website.'
  teach-case24-title: Signing Coders
  teach-case24-lead-name: Taeyoon Choi
  teach-case24-image-alt: >-
    Two volunteers explaining concepts using a white board and a screen to a
    bunch of deaf and hard of hearing students, each student facing a computer
    screen.
  teach-case24-speech: >-
    I'm working on a new series of coding class for Disabled students in South
    Korea. I'm researching about the pedagogy and translation. I plan to hold
    workshops in December 2020. The project is supported by the Open Society
    Foundation Human Rights Initiative and Korea Disability Arts & Culture
    Center.
  teach-case24-content1: ' WRIC, New York City, USA & Seoul Museum of Art, Seoul, South Korea.'
  teach-case24-content1-1: '5 Sessions, each 2~3 hours'
  teach-case24-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case24-content3: Elementary
  teach-case24-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case24-content5: >-
    We used p5.js Web editor and code examples on the website. We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts.
  teach-case24-content5-1: Syllabus & Material
  teach-case24-content5-2: More photos
  teach-workshops-heading: Upcoming Workshops
  teach-workshop1-title: CC Fest (Creative Coding Festival)
  teach-workshop1-time: Twice a year in NYC
  teach-workshop2-title: Adorable Cat Festival with happy cats and happy people
  teach-workshop2-time: 'March 2023, every Saturday 2-6pm'
  teach-workshop3-title: Adorable Dog Festival with happy dogs and happy people
  teach-workshop3-time: 'May 2023, every Sunday 5-8pm'
