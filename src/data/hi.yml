Skip-To-Content: Skip to content
Language-Settings: Language Settings
Sidebar-Title: Site Navigation
Home: सभी
Editor: एडीटर
Download: डाउनलोड
Donate: दान दिजिये
Start: आरंभ करें
Reference: संदर्भ
Libraries: लाइब्रिरी
Learn: सीखिए
Teach: सिखाना
Examples: उदाहरण
Books: पुस्तकें
Community: समुदाय
Contribute: योगदान कीजिये
Forum: फोरम
Showcase: प्रदर्शन
footerxh1: आभार सूची
footer1: ' वर्तमान में p5.js का नेतृत्व करने वाले '
footer3: ' हैं| इसकी खोज करने वाले थे '
footer4: ' p5.js सहयोगियों के एक समुदाय द्वारा विकसित किया गया है और समर्थन करने वाले थे '
footer5: ' और '
footer6: ' पहचान और ग्राफिक डिजाइन करने वाले थे '
footer7: '. '
footer8: Info
footer9: .
tagline1: प्रोसेसिंग का आनंद गुणा जावास्क्रिप्ट का क्विर्किनेस्स
tagline2: प्रोसेसिंग की सादगी गुणा जावास्क्रिप्ट का लचीलापन
tagline3: प्रोसेसिंग का सहज बोध गुणा जावास्क्रिप्ट की शक्ति
tagline4: प्रोसेसिंग की रचनात्मकता गुणा जावास्क्रिप्ट की गतिशीलता
tagline5: प्रोसेसिंग का समुदाय गुणा जावास्क्रिप्ट का समुदाय
tagline6: प्रोसेसिंग की शक्ति गुणा जावास्क्रिप्ट की पहुंच
tagline7: The p5.js community stands in solidarity with Black Lives Matter.
home:
  start-creating: P5 संपादक के साथ बनाना शुरू करें!
  p1xh1: नमस्ते!
  p1x1: >-
    p5.js रचनात्मक कोडिंग के लिए एक जावास्क्रिप्ट लाइब्रेरी है, जिसमें कलाकारों,
    डिजाइनरों, शिक्षकों, शुरुआती लोगों के लिए कोडिंग को सुलभ और समावेशी बनाने पर
    ध्यान केंद्रित किया गया है। p5.js स्वतंत्र और खुला-स्रोत है क्योंकि हम
    सॉफ्टवेयर पर विश्वास करते हैं, और इसे सीखने के उपकरण सभी के लिए सुलभ होने
    चाहिए।
  p1x2: >-
    एक स्केच के रूपक का उपयोग करते हुए, p5.js में ड्राइंग कार्यक्षमता का एक पूरा
    सेट है। हालाँकि, आप अपने ड्राइंग कैनवास तक सीमित नहीं हैं। आप अपने पूरे
    ब्राउज़र पृष्ठ को अपने स्केच के रूप में सोच सकते हैं, जिसमें टेक्स्ट, इनपुट,
    वीडियो, वेब कैमरा और ध्वनि के लिए HTML5 ऑब्जेक्ट शामिल हैं।
  p2xh2: समुदाय
  p2x1: >-
    हम हर लिंग पहचान और अभिव्यक्ति, यौन अभिविन्यास, जाति, जातीयता, भाषा,
    न्यूरो-प्रकार, आकार, क्षमता, वर्ग, धर्म, संस्कृति, उपसंस्कृति, राजनीतिक राय,
    आयु, कौशल, स्तर, व्यवसाय और पृष्ठभूमि के साथ और एकजुटता का एक समुदाय हैं। हम
    स्वीकार करते हैं कि सभी के पास सक्रिय रूप से भाग लेने के लिए समय, वित्तीय
    साधन या क्षमता नहीं है, लेकिन हम सभी प्रकार की भागीदारी को समझते हैं और
    प्रोत्साहित करते हैं। हम सुविधा और सशक्तिकरण को बढ़ावा देते हैं। हम सभी
    शिक्षार्थी हैं।
  p2x2: 'p5.js आज के वेब के लिए '
  p2x3: ' की व्याख्या है। हम ईवेंट का संचालन करते हैं और हमारे कार्य का समर्थन करता है '
  p2x4: ।
  p2x5: 'हमारे '
  p2x6: 'समुदाय '
  p2x7: के बारे में अधिक जानें।
  p3xh2: शुरू करें
  p3xp1: ' '
  p3xp2: ' में अपना पहला स्केच बनाएं। '
  p3xp3: आरंभ पृष्ठ
  p3xp4: ' पर p5.js के साथ स्केचिंग के बारे में अधिक जानें और '
  p3xp5: संदर्भ
  p3xp6: ' में जाने आप जो कुछ भी कर सकते हैं।'
  p4xh2: शामिल होइए
  p4xp1: 'P5.js में योगदान करने के कई तरीके हैं:'
  p4xp2: भागीदारी के विकल्प
  p4xp3: आपके द्वारा बनाई गई कुछ साझा करें!
  p4xp4: एक कार्यशाला या कक्षा पढ़ाएं करें।
  p4xp5: सम्मलेन का आयोजन करें।
  p4xp6: कोडबेस में योगदान करें।
  sketch_credits: Sketch Credits
  sketch_info: होमपेज स्केच 9 वें ग्रेडर ग्रेस ओबर्गफेल द्वारा काम से अनुकूलित किया गया है
copyright:
  copyright-title: कॉपीराइट संबंधी जानकारी
  copyright1: >-
    p5.js लाइब्रेरी मुफ्त सॉफ्टवेयर है; आप नि: शुल्क सॉफ्टवेयर फाउंडेशन, संस्करण
    2.1 द्वारा प्रकाशित
  copyright2: ' के तहत इसे पुनर्वितरित कर सकते हैं और / या संशोधित कर सकते हैं। भाषा के लिए संदर्भ एक लाइसेंस के तहत है'
  copyright3: ' जो गैर-वाणिज्यिक उद्देश्यों के लिए इस सामग्री का पुन: उपयोग करना '
  copyright4: ' संभव बनाता है यदि इसे श्रेय दिया जाता है।'
get started:
  get-started-title: आरंभ करे
  get-started1: >-
    यह पृष्ठ आपको एक p5.js प्रोजेक्ट सेट करने और आपका पहला स्केच बनाने के बारे
    में बताता है।
  get-started2: शुरू करने का सबसे आसान तरीका
  get-started3: p5.js editor
  get-started4: ', का उपयोग करना है आप वेब संपादक खोल सकते हैं और अपने'
  get-started5: 'आपका पहला स्केच '
  get-started6: >-
    तक नीचे स्क्रॉल कर सकते हैं। यदि आप p5.js के डेस्कटॉप संस्करण पर काम करना
    चाहते हैं तो आप नीचे स्क्रॉल कर सकते हैं
  get-started7: निर्देश डाउनलोड
  get-started-button: Copy
  settingUp-title: अपने कंप्यूटर पर एक संपादक के साथ p5.js सेट करना
  download-title: p5.js पुस्तकालय की एक प्रति डाउनलोड करना
  hosted-title: p5.js लाइब्रेरी के होस्ट किए गए संस्करण का उपयोग करना
  download1: >-
    'शुरू करने का सबसे आसान तरीका खाली उदाहरण का उपयोग करना है जो' के साथ आता
    है।
  download2: p5.js पूर्ण
  download3: ' download.'
  download8: ' डाउनलोड करने के बाद, आपको एक स्थानीय सर्वर सेट करना होगा। निर्देश देखें '
  download9: यहां
  download10: >-
    '। अपने स्थानीय सर्वर को डाउनलोड किए गए फ़ोल्डर में चलाएँ और अपने ब्राउज़र
    पर, 'पर जाएँ
  download11: 'http://localhost:{your-port-num}/empty-example'
  download4: >-
    यदि आप index.html में देखते हैं, तो आप देखेंगे कि यह फ़ाइल p5.js से लिंक है।
    यदि आप छोटे संस्करण का उपयोग करना चाहते हैं (तेज़ पृष्ठ लोड करने के लिए
    संपीड़ित), तो लिंक को p5.min.js में बदलें।
  download5: >-
    वैकल्पिक रूप से, आप ऑनलाइन होस्ट की गई p5.js फ़ाइल से लिंक कर सकते हैं।
    p5.js के सभी संस्करण एक सीडीएन (सामग्री वितरण नेटवर्क) में संग्रहीत हैं। आप
    इन संस्करणों का इतिहास में पा सकते हैं
  download6: '। इस मामले में आप लिंक को इसमें बदल सकते हैं:'
  download7: 'एक नमूना HTML पृष्ठ इस तरह दिख सकता है:'
  environment-title: वातावरण
  environment1: >-
    अपने कंप्यूटर में p5.js चलाने के लिए आपको एक टेक्स्ट एडिटर की आवश्यकता होगी।
    आप अपनी पसंद के
  environmentlink: 'http://en.wikipedia.org/wiki/Source_code_editor'
  environment2: कोड एडिटर
  environment3: 'का उपयोग कर सकते हैं। Sublime Text 2 के साथ '
  environment4: ' सेटअप करने के निर्देश नीचे दिए गए हैं, अन्य अच्छे संपादक विकल्पों में '
  environment5: ' तथा '
  environment6: >-
    शामिल हैं। यदि आप एक स्क्रीन रीडर उपयोगकर्ता हैं और p5 वेब संपादक का उपयोग
    नहीं कर रहे हैं, तो आप इसका उपयोग करना चाह सकते हैं
  environment7: ' या '
  environment8: >-
    Sublime खोलें। फ़ाइल मेनू पर जाएँ और Open चुनें... और उस फ़ोल्डर को चुनें
    जिसमें आपकी html और js फ़ाइलें स्थित हैं। बाईं साइडबार पर, आपको फ़ोल्डर में
    निहित फ़ाइलों की सूची के साथ शीर्ष पर फ़ोल्डर का नाम मिलना चाहिए।
  environment9: >-
    अपनी sketch.js फ़ाइल पर क्लिक करें और यह दाईं ओर खुलेगी जहाँ आप इसे संपादित
    कर सकते हैं।
  environment10: p5 स्टार्टर कोड उदात्त संपादक में खुला।
  environment11: >-
    अपने ब्राउज़र में index.html फ़ाइल को अपने फ़ाइल प्रबंधक में डबल क्लिक करके
    खोलें या टाइप करें:
  environment12: 'file:///the/file/path/to/your/html'
  environment14: ' (or '
  environment15: 'http://localhost:{your-port-num}/empty-example'
  environment16: यदि आप स्थानीय सर्वर का उपयोग कर रहे हैं)
  environment13: ' अपना स्केच देखने के लिए एड्रेस बार में।'
  your-first-sketch-title: आपका पहला स्केच
  your-first-sketch-intro1: ' '
  your-first-sketch-intro2: 'https://editor.p5js.org/'
  your-first-sketch-intro3: p5.js वेब संपादक
  your-first-sketch-intro4: 'में आपको निम्न कोड मिलना चाहिए:'
  your-first-sketch1: उपरांत
  your-first-sketch2: 'कोड की इस पंक्ति को शामिल करें: '
  your-first-sketch3: 'अब आपका कोड इस तरह होना चाहिए:'
  your-first-sketch4: >-
    आपके द्वारा अभी जोड़ी गई रेखा एक दीर्घवृत्त खींचती है, जिसका केंद्र बाईं ओर
    से 50 पिक्सेल ऊपर और ऊपर से 50 पिक्सेल नीचे है, जिसकी चौड़ाई और ऊँचाई 80
    पिक्सेल है।
  your-first-sketch5: अपने कोड को क्रिया में प्रदर्शित करने के लिए संपादक पर प्ले दबाएं!
  your-first-sketch6: >-
    यदि आप एक स्क्रीन रीडर का उपयोग कर रहे हैं, तो आपको p5 ऑनलाइन संपादक में
    पहुंच योग्य आउटपुट को चालू करना होगा, संपादक के बाहर आपको अपने एचटीएमएल में
    एक्सेसिबिलिटी लाइब्रेरी को जोड़ना होगा। अधिक जानने के लिए &#32;
  your-first-sketch7: स्क्रीन रीडर ट्यूटोरियल के साथ p5 का उपयोग करना
  your-first-sketch8: 'यदि आपने सब कुछ सही टाइप किया है, तो यह डिस्प्ले विंडो में दिखाई देगा:'
  your-first-sketch9: 80 x और 80 y of की स्थिति में कैनवास की चौड़ाई और ऊंचाई 50 का एक वृत्त है
  your-first-sketch10: >-
    यदि कुछ दिखाई नहीं देता है, तो संपादक को यह समझने में समस्या हो सकती है कि
    आपने क्या लिखा है। यदि ऐसा होता है, तो सुनिश्चित करें कि आपने उदाहरण कोड को
    ठीक से कॉपी किया है: संख्याएं कोष्ठक के भीतर होनी चाहिए और उनमें से प्रत्येक
    के बीच अल्पविराम होना चाहिए, रेखा अर्धविराम के साथ समाप्त होनी चाहिए, और
    दीर्घवृत्त की वर्तनी सही होनी चाहिए।
  your-first-sketch11: >-
    प्रोग्रामिंग के साथ आरंभ करने के बारे में सबसे कठिन चीजों में से एक यह है कि
    आपको सिंटैक्स के बारे में बहुत विशिष्ट होना चाहिए। आपका मतलब जानने के लिए
    ब्राउज़र हमेशा पर्याप्त स्मार्ट नहीं होता है और विराम चिह्नों की नियुक्ति के
    बारे में काफी उधम मचा सकता है। थोड़े से अभ्यास से आपको इसकी आदत हो जाएगी।
    संपादक के नीचे बाईं ओर, आपको कंसोल अनुभाग मिलेगा। यहां, आप संपादक से प्राप्त
    होने वाली किसी भी त्रुटि के विवरण के साथ संदेश पा सकते हैं।
  your-first-sketch12: >-
    इसके बाद, हम एक स्केच पर आगे बढ़ेंगे जो थोड़ा अधिक रोमांचक है। इसे आज़माने
    के लिए अंतिम उदाहरण को संशोधित करें:
  your-first-sketch13: >-
    यह प्रोग्राम एक कैनवास बनाता है जो 400 पिक्सेल चौड़ा और 400 पिक्सेल ऊँचा
    होता है, और फिर माउस की स्थिति में सफेद घेरे बनाना शुरू करता है। जब माउस बटन
    दबाया जाता है, तो वृत्त का रंग बदलकर काला हो जाता है। कोड चलाएँ, माउस ले
    जाएँ, और इसका अनुभव करने के लिए क्लिक करें।
  your-first-sketch14: कैनवास पर माउस के पथ का अनुसरण करते हुए कई वृत्त खींचे जाते हैं
  first-sketch-heading1: अंडाकार के साथ कोड स्निपेट
  first-sketch-heading2: स्क्रीनरीडर उपयोगकर्ताओं के लिए नोट
  first-sketch-heading3: इंटरैक्शन के साथ कोड स्निपेट
  what-next-title: आगे क्या?
  learn1: 'अधिक जनने के लिए '
  learn2: learn page
  learn3: ' तथा '
  learn4: examples page
  learn5: देखें।
  learn6: 'देखें '
  learn7: The Coding Train
  learn8: ' तथा  '
  learn9: Kadenze
  learn10: ' अनके वीडियो शिक्षण।'
  reference1: पूर्ण दस्तावेज़ीकरण के लिए
  reference2: ' reference'
  reference3: ' देखें। '
  learn11: 'यदि आप स्क्रीन रीडर के साथ p5 का उपयोग करना चाहते हैं, तो देखें '
  learn12: p5 with a screenreader tutorial
  processing-transition1: 'यदि आपने पूर्व में प्रसंस्करण का उपयोग किया है, तो पढ़ें '
  processing-transition2: 'https://github.com/processing/p5.js/wiki/Processing-transition'
  processing-transition3: Processing transition tutorial
  processing-transition4: ' प्रोसेसिंग से p5.js में कनवर्ट करने का तरीका, और उनके बीच मुख्य अंतर जानने के लिए।'
  book1: >-
    इस ट्यूटोरियल के कुछ हिस्सों को लॉरेन मैकार्थी, केसी रियास, और बेन फ्राई,
    ओ'रेली / मेक 2015 द्वारा पुस्तक, गेटिंग स्टार्टिंग विद p5.js से अनुकूलित
    किया गया था। कॉपीराइट © 2015। सभी अधिकार सुरक्षित। अंतिम बार p5.js 2019
    योगदानकर्ता सम्मेलन में संशोधित किया गया।
download:
  Download: डाउनलोड
  download-intro: >-
    स्वागत हे! इस पृष्ठ पर "डाउनलोड" शीर्षक से, वास्तव में इस पृष्ठ पर लाइब्रेरी
    को डाउनलोड करने या इसके साथ ऑनलाइन काम शुरू करने के लिए लिंक का एक संग्रह
    है। हमने उन चीजों को ऑर्डर करने की कोशिश की है जो यह बता सकती हैं कि एक
    शुरुआत करने वाला पहले क्या चाहता है, से लेकर एक अनुभवी प्रोग्रामर किन
    संसाधनों की तलाश में हो सकता है।
  editor-title: संपादक
  p5.js-editor: p5.js वेब एडिटर
  p5.js-editor-intro: >-
    यह लिंक आपको ऑनलाइन p5.js संपादक पर पुनर्निर्देशित करता है ताकि आप तुरंत
    p5.js का उपयोग शुरू कर सकें।
  editor-includes: 'P5.js वेब एडिटर का उपयोग करके कोडिंग शुरू करें, कोई सेटअप आवश्यक नहीं है!'
  complete-library-title: पूरी लाइब्रेरी
  complete-library-intro1: >-
    यह p5.js लाइब्रेरी फ़ाइल, p5.sound एडऑन और एक उदाहरण प्रोजेक्ट वाली एक
    डाउनलोड है। इसमें संपादक नहीं है।  P5.js प्रोजेक्ट को सेटअप करने का तरीका
    जानने के लिए
  complete-library-intro2: आरंभ करें
  complete-library-intro3: ' देखें।'
  p5.js-complete: ' पूर्ण p5.js'
  includes-1: 'शामिल हैं:'
  includes-2: 'p5.js, p5.dom.js, p5.sound.js और एक उदाहरण परियोजना है'
  includes-3: ' संस्करण '
  single-files-title: 'एक दस्तावेज '
  single-files-intro: >-
    ये p5.js लाइब्रेरी फ़ाइल के डाउनलोड या लिंक हैं। कोई अतिरिक्त सामग्री शामिल
    नहीं है।
  single-file: 'एक दस्तावेज: '
  p5.js-uncompressed: पूर्ण असम्बद्ध संस्करण
  compressed: संकुचित संस्करण
  link: 'लिंक: '
  statically-hosted-file: स्टेटिकली होस्ट की गई फ़ाइल
  etc-title: आदि
  older-releases: 'पुराने रिलीज / चैंज '
  github-repository: कोड भंडार (GitHub)
  report-bugs: 'समस्याओं, बग और त्रुटियों की रिपोर्ट करें '
  supported-browsers: 'समर्थित ब्राउज़र '
  support-title: समर्थन p5.js!
  support-options: समर्थन विकल्प
  support-1: >-
    p5.js फ्री, ओपन-सोर्स सॉफ्टवेयर है। हम अपने समुदाय को यथासंभव खुला और
    समावेशी बनाना चाहते हैं। आप एक व्यक्ति, एक स्टूडियो या एक शैक्षिक संस्थान के
    रूप में
  support-2: के सदस्य बनकर
  support-3: ' इस काम का समर्थन कर सकते हैं। '
  support-4: ' आप सदस्यता खरीदे बिना'
  support-5: ' भी दान कर सकते हैं। '
  support-17: >-
    पिट्सबर्ग में क्रिएटिव इंक्वायरी के लिए CMU स्टूडियो में p5.js योगदानकर्ताओं
    का सम्मेलन (छवि क्रेडिट: तायून चोई)
  support-18: >-
    प्रोसेसिंग फेलो सास्किया फ्रीके लंदन में कोड लिबरेशन एक्स प्रोसेसिंग वर्कशॉप
    आयोजित कर रहा है (इमेज क्रेडिट: कोड लिबरेशन फाउंडेशन)
  support-19: >-
    एसएफपीसी के साथ सम्मेलन में सीखना, सिखाना सीखना (छवि क्रेडिट: कीरा
    साइमन-कैनेडी)
  support-20: >-
    कोड आर्ट मियामी में प्रोसेसिंग फाउंडेशन फेलो कैसी तारकाजियान की कार्यशाला
    (छवि क्रेडिट: क्रिश्चियन एरेवलो फोटोग्राफी)
  support-21: >-
    साइनिंग कोडर्स p5.js कार्यशाला में टैयून चोई और एएसएल दुभाषिया (छवि क्रेडिट:
    टायून चोई)
  support-22: 'कोड किकऑफ़ की Google समर (छवि क्रेडिट: ताइओन चोई)'
  support-23: >-
    कोड आर्ट मियामी में प्रोसेसिंग फाउंडेशन फेलो कैसी तारकाजियान की कार्यशाला
    (छवि क्रेडिट: क्रिश्चियन एरेवलो फोटोग्राफी)
  support-24: >-
    लुइसा परेरा और येसेउल सांग टायून चोई की अगुवाई में एक सांकेतिक भाषा आधारित
    p5.js कार्यशाला को सुविधाजनक बनाने में मदद करते हैं (छवि क्रेडिट: तायून चोई)
  support-25: >-
    पिट्सबर्ग में क्रिएटिव इंक्वायरी के लिए CMU स्टूडियो में p5.js योगदानकर्ताओं
    का सम्मेलन (छवि क्रेडिट: तायून चोई)
  support-26: >-
    प्रोसेसिंग फ़ेलो डिजिटल सिटिज़ंस लैब इंटरनेशनल सेंटर ऑफ़ फ़ोटोग्राफ़ी में
    STEM शिक्षण पर एक पैनल होस्ट करता है (छवि क्रेडिट: इंटरनेशनल सेंटर ऑफ़
    फ़ोटोग्राफ़ी)
  support-27: >-
    सैंटियागो, मोरागा के नेतृत्व में सैंटियागो, चिली में p5.js कार्यशाला में
    प्रतिभागी (छवि क्रेडिट: आरोन मोंटोया-मोरागा।)
  support-28: >-
    क्लेयर केर्नी-वोल्पे ने एक साइन लैंग्वेज आधारित p5.js वर्कशॉप की सुविधा दी,
    जिसका नेतृत्व ताइओन चोई (छवि क्रेडिट: तायून चोई) ने किया
  support-29: >-
    प्रोसेसिंग फाउंडेशन फेलो DIY गर्ल्स लॉस एंजेल्स में एक क्रिएटिव कोडिंग
    प्रोग्राम चलाती हैं (इमेज क्रेडिट: DIY गर्ल्स)
  support-30: प्रोसेसिंग डिजिटल डिजिटल लैब प्रयोगशाला
  support-31: UCLA DMA और NYU ITP में Bicoastal p5.js मीटअप
  support-32: प्रोसेसिंग फाउंडेशन
  support-33: ' मूल प्रोसेसिंग सॉफ्टवेयर के साथ एक दशक से अधिक काम करने के बाद 2012 में स्थापित किया गया था। फाउंडेशन का मिशन दृश्य कला के भीतर सॉफ्टवेयर साक्षरता को बढ़ावा देना है, और प्रौद्योगिकी से संबंधित क्षेत्रों के भीतर दृश्य साक्षरता - और इन क्षेत्रों को विविध समुदायों के लिए सुलभ बनाना है। हमारा लक्ष्य सभी हितों और पृष्ठभूमि के लोगों को सशक्त बनाना है कि कैसे कोड के साथ रचनात्मक कार्य करना सीखें और विशेष रूप से उन लोगों के लिए, जिनके पास अन्यथा इन उपकरणों और संसाधनों तक पहुंच नहीं है।'
  support-17-alt: ''
  support-18-alt: ''
  support-19-alt: ''
  support-20-alt: ''
  support-21-alt: ''
  support-22-alt: ''
  support-23-alt: ''
  support-24-alt: ''
  support-25-alt: ''
  support-26-alt: ''
  support-27-alt: ''
  support-28-alt: ''
  support-29-alt: ''
  support-30-alt: ''
  support-31-alt: ''
learn:
  learn-title: सीखना
  teach-title2: Teach
  learn1: >-
    ये शिक्षण विशेष विषयों के अधिक गहराई या चरण-दर-चरण साक्षात्कार प्रदान करते
    हैं
  learn2: उदाहरण पृष्ठ देखें
  learn3: विभिन्न p5.js विषयों के छोटे प्रदर्शनों को देखने के लिए।
  introduction-to-p5js-title: P5.js का परिचय
  hello-p5js-title: नमस्कार p5.js
  hello-p5js: >-
    यह लघु वीडियो आपको लाइब्रेरी से परिचित कराएगा और आप इसके साथ क्या कर सकते
    हैं।
  getting-started-title: शुरू करना
  getting-started: >-
    P5.js में आपका स्वागत है! <br> इस परिचय में p5.js प्रोजेक्ट स्थापित करने की
    मूल बातें शामिल हैं।
  p5js-overview-title: p5.js अवलोकन
  p5js-overview: p5.js की मुख्य विशेषताओं का अवलोकन।
  p5js-processing-title: p5.js और प्रोसेसिंग
  p5js-processing: 'दोनों के बीच मुख्य अंतर, और एक से दूसरे में कैसे परिवर्तित किया जाए।'
  p5-screen-reader-title: स्क्रीन रीडर के साथ p5
  p5-screen-reader: P5 सेट करना ताकि इसे स्क्रीन रीडर के साथ आसानी से उपयोग किया जा सके।
  using-local-server-title: स्थानीय सर्वर का उपयोग करना
  accessible-labels-title: सुलभ कैनवास विवरण लिखना
  accessible-labels: अपने कोड को स्क्रीन रीडर के लिए सरल बनाने के लिए लेबल का उपयोग करना।
  accessible-labels-intro: Introduction
  accessible-labels-intro-1: >-
    In this tutorial, you'll learn how to use <a class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a> , <a class =
    "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>,  and <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>. These
    functions add labels to  your canvas so that it’s readable for screen
    readers and other assistive technologies.
  accessible-labels-what-is-labeling: What is labeling?
  accessible-labels-what-is-labeling-1: >-
    When you use the <a class = "code" href =
    "https://p5js.org/reference/#/p5/createCanvas">createCanvas()</a> function,
    you  create a canvas HTML element. This canvas element displays the image
    generated by your code as a bitmap (a raster graphic made up of pixels). 
    Unlike most HTML elements, the canvas doesn’t provide any description about
    its contents to screen readers.  That’s why we created the <a class = "code"
    href = "https://p5js.org/reference/#/p5/describe">describe()</a>,  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, and  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions. 
    These functions add labels to your canvas that tell the screen reader how to
    describe it.
  accessible-labels-why-labeling-matters: Why labeling matters
  accessible-labels-why-labeling-matters-1: >-
    Screen readers (and text-to-speech software) are helpful for lots of people,
    <a href = "https://www.w3.org/WAI/perspective-videos/speech/"
    target="_blank" rel="noopener noreferrer"> regardless of ability or
    context</a>. For example, a visually impaired person searching the web might
    use a screen reader to  understand the contents of a site. If a site’s code
    isn’t properly labeled for assistive technologies,  the screen reader
    software won’t be able to communicate what’s on the site to its user.
    Someone else  might be using a text-to-speech software because they have
    dyslexia and find listening to the site’s  content more comprehensible than
    reading it. There are also people who use these assistive software  to
    multi-task, so they can listen to an article on the web and wash dishes, or
    complete other chores. 
  accessible-labels-why-labeling-matters-2: >-
    No matter the purpose or person, making sure your code is readable by these
    assistive software allows  more people to engage with your work in
    meaningful ways.
  accessible-labels-available-labels: Available labeling functions
  accessible-labels-available-labels-1: p5.js offers four different functions for labeling your canvas
  accessible-labels-available-labels-li-1: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a> provides a
    description of the canvas contents.  This function's parameters include:
    <span class = "code">text</span>, the label itself; and <span class =
    "code">display</span>,  an optional parameter to set the visibility of the
    label.
  accessible-labels-available-labels-li-2: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    describes a specific element or a  specific grouping of elements in a
    canvas. This function's parameters include: <span class =
    "code">name</span>, the title for the label;  <span class =
    "code">text</span>, the label itself; and <span class =
    "code">display</span>, an optional parameter to set the visibility of the
    label.
  accessible-labels-available-labels-li-3: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> generates a
    list describing the canvas size, color,  as well as each visual element’s
    color, position, and the area it covers within the canvas. This function’s
    only parameter is  <span class = "code">display</span>, an optional
    parameter to set the visibility of the label.
  accessible-labels-available-labels-li-4: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, like <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>,  generates a
    list of the canvas' qualities and elements. Along with this list, this
    function also creates an HTML table that plots the  spatial location of each
    shape within the canvas. This function's only parameter is <span class =
    "code">display</span>, an optional parameter  to set the visibility of the
    label.
  accessible-labels-prerequisites: Prerequisites
  accessible-labels-prerequisites-1: >-
    Your project's code should be near completion before you begin labeling. To
    write clear and effective  labels, you should have a clear understanding
    about what visuals your code creates within the canvas  element. 
  accessible-labels-prerequisites-2: >-
    For example, if you started writing your labels before you had a clear
    understanding of the resulting  visual of your canvas, your labels and your
    visuals may communicate different messages, like the code  example below:
  accessible-labels-steps-for-labeling: Steps for labeling your p5.js code
  accessible-labels-steps-for-labeling-step-1: 1. Plan your labeling strategy
  accessible-labels-steps-for-labeling-step-1-1: >-
    Your labeling strategy will change based on your project’s complexity and
    purpose.
  accessible-labels-steps-for-labeling-step-1-2: >-
    No matter how complicated your project may be, always provide a brief
    description of your canvas in  <a class = "code" href =
    "https://p5js.org/reference/#/p5/setup">setup()</a> using the  <a class =
    "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>
    function. If you do not provide any labels in your code,  screen readers
    will describe your canvas as a blank HTML element.
  accessible-labels-steps-for-labeling-step-1-3: >-
    Place this label in the <a class = "code" href =
    "https://p5js.org/reference/#/p5/setup">setup()</a> section of your code, 
    and provide a 1-3 sentence description of your canvas in its <span class =
    "code">text</span> parameter. This description should only provide details
    about  the visual elements of your canvas. 
  accessible-labels-steps-for-labeling-step-1-4: >-
    As stated previously, you do not need to begin your description with “A p5
    canvas element…” or anything similar, since the  screen reader will declare
    the element type before reading your label.
  accessible-labels-steps-for-labeling-step-1-5: >-
    Along with the <a class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a> label, use either
    the  <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>,  or <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>  function to
    add more detailed labels within your code.
  accessible-labels-steps-for-labeling-step-1-6: >-
    The <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions can 
    describe the shapes on your canvas, but they can’t interpret your intention
    in using the shapes. Keep context in mind when choosing  which function(s)
    to use. Is it better to describe the flower as “eight circles and a
    rectangle”, or as “a flower with red  petals and a green stem”? What kind of
    labeling will provide the best description of your canvas? If  you are
    creating larger visuals with many shapes, use <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>  to
    label each group of shapes.
  accessible-labels-steps-for-labeling-step-1-7: >-
    Do not use both the <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions to
    describe the same canvas. Using both will  cause similar descriptions to
    appear twice, which is confusing to screen readers. The same goes for  using
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> or  <a class =
    "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>
    with  <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    labels. It’s best to choose one function to  supplement your <a class =
    "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>
    label.
  accessible-labels-steps-for-labeling-step-1-complex: Complex projects
  accessible-labels-steps-for-labeling-step-1-complex-1: >-
    Use vanilla ARIA labeling and custom-built fallback labels instead of p5’s
    labeling functions if your canvas:
  accessible-labels-steps-for-labeling-step-1-complex-li-1: >-
    Has content that changes extensively via external interactive elements
    (elements outside the canvas)
  accessible-labels-steps-for-labeling-step-1-complex-li-2: Interacts with DOM elements written outside of the canvas code
  accessible-labels-steps-for-labeling-step-1-complex-li-3: Requires the user’s attention if the canva's visual content changes
  accessible-labels-steps-for-labeling-step-1-complex-li-4: >-
    Has complex element layouts that cannot be accurately labeled with the <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a>,  <a class =
    "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, or  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions
  accessible-labels-steps-for-labeling-step-1-complex-2: >-
    For more information about fallback content, visit <a href =
    "https://www.w3.org/html/wg/wiki/DefinitionFallBackContent" target="_blank"
    rel="noopener noreferrer">W3C’s Wiki</a>.  For more information about
    complex ARIA labeling, visit <a href =
    "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes"
    target="_blank" rel="noopener noreferrer">Mozilla’s "ARIA states and
    properties"</a>  and <a href = "https://www.w3.org/TR/using-aria/"
    target="_blank" rel="noopener noreferrer">W3C’s "Using ARIA"</a>.
  accessible-labels-steps-for-labeling-step-2: 2. Write your main and supporting label(s)
  accessible-labels-steps-for-labeling-step-2-1: Begin labeling your canvas using the function(s) that best serve your users.
  accessible-labels-steps-for-labeling-step-2-2: >-
    While labeling, only provide descriptions of the visual aspects of your
    canvas. You don’t need to  describe how or what functions create the visuals
    present on the canvas, only how the end result  visuals appear within the
    canvas.
  accessible-labels-steps-for-labeling-step-2-using-de: >-
    Using <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
  accessible-labels-steps-for-labeling-step-2-using-de-1: >-
    When using the <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    function to label your code, provide a unique title and a description  no
    more than 1-2 sentences long. Only label the parts of your code that depict
    the most important visual  aspects of your canvas.
  accessible-labels-steps-for-labeling-step-2-using-de-2: >-
    Within each <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    label, discuss the important qualities of that element. Is the element 
    animated? Is the element interactive? What meaning does the element provide
    to the project?
  accessible-labels-steps-for-labeling-step-2-using-de-3: >-
    If your canvas contains any <a class = "code" href =
    "https://p5js.org/reference/#/p5/text">text()</a> elements that are
    important to the general understanding of the  image, make a separate label
    for them. Label any legible text with quotation marks around it in the 
    label, as in <span class = "code">describeElement("Text", "The words 'hello,
    world' displayed in green at the center of a  black canvas.")</span>.
  accessible-labels-steps-for-labeling-step-2-using-de-4: >-
    You don’t need to start each label with “A p5 canvas…” or something similar.
    The screen reader will  call out the element type before reading your
    labels:
  accessible-labels-steps-for-labeling-step-2-using-de-5: >-
    Limit the number of <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    functions present within your code as much as possible. If you  have to use
    more than 10 <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    functions to describe your canvas, consider using a labeling  strategy that
    affords more complexity (such as vanilla ARIA labeling).
  accessible-labels-steps-for-labeling-step-2-using-go-to: >-
    Using <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> or <a class =
    "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>
  accessible-labels-steps-for-labeling-step-2-using-go-to-1: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and <a class =
    "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    generate their information based on the code of the visual element, such as
    its size, color, and shape.  Unlike <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, you
    only need to use one label to describe all  your canvas's visual elements.
  accessible-labels-steps-for-labeling-step-2-animated: Projects with animated or interactive elements
  accessible-labels-steps-for-labeling-step-2-animated-1: >-
    Individual interactive elements, such as HTML buttons, dropdowns, or inputs,
    don’t need labels. These  elements are built outside of the p5.js canvas and
    are interpreted by screen readers. However, this  means the <a class =
    "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>
    and  <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions
    won’t provide any information about these interactive  inputs.
  accessible-labels-steps-for-labeling-step-2-animated-2: >-
    If a canvas element is animated and/or interactive, represent its current
    state or qualities in the label.  So long as you place the functions within
    the <a class = "code" href =
    "https://p5js.org/reference/#/p5/draw">draw()</a> function,  they will
    automatically update with the shape’s new information (except for <a class =
    "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    and <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>,  which will
    update even when listed in <a class = "code" href =
    "https://p5js.org/reference/#/p5/setup">setup()</a>). If you are using  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, use
    template strings to update the element’s description:
  accessible-labels-steps-for-labeling-step-2-do-donts: Labeling do’s and don’ts
  accessible-labels-steps-for-labeling-step-2-do-donts-1: >-
    <i>Don’t</i> use screen reader labels as a way of commenting your code.
    Labels should only summarize the  resulting visual elements within a canvas.
    If you overuse screen reader labels, you may end up  complicating the screen
    reader’s interpretation of the canvas rather than helping it.
  accessible-labels-steps-for-labeling-step-2-do-donts-2: >-
    <i>Do</i> make your label descriptions short and accurate. Use full
    sentences for your labels, and write  in the present tense when describing
    elements.
  accessible-labels-steps-for-labeling-step-3: 3. Test your labels
  accessible-labels-steps-for-labeling-step-3-1: >-
    Be sure to test your labels before publishing your sketch. Labels are only
    available to screen readers  by default.To see the output during
    development, pass <span class = "code">LABEL</span> as the last argument to
    the function.
  accessible-labels-steps-for-labeling-step-3-2: 'When testing your labels, consider the following questions:'
  accessible-labels-steps-for-labeling-step-3-2-li-1: >-
    Do your canvas labels provide enough information for someone to understand
    the sketch’s purpose? 
  accessible-labels-steps-for-labeling-step-3-2-li-2: >-
    If this canvas exists on a web page among other content, would someone have
    a good understanding of how the canvas relates to its  surrounding context?
  accessible-labels-steps-for-labeling-step-3-3: >-
    Be sure to remove the <span class = "code">LABEL</span> argument once you’ve
    tested the output. With <span class = "code">LABEL</span>  active, screen
    readers are forced to read the fallback text and the visible label text when
    focused on the canvas. This is  confusing for them.
  accessible-labels-steps-for-labeling-step-3-4: >-
    You may also download a screen reader and use it to test your code. For more
    information about using  screen readers, visit <a href =
    "https://www.w3schools.com/accessibility/accessibility_screen_readers.php"
    target="_blank" rel="noopener noreferrer">W3 School’s "Accessibility Screen
    Readers"</a>.
  accessible-labels-conclusion: Conclusion
  accessible-labels-conclusion-1: >-
    Once you've tested your labels, your canvas should be accessible to screen
    reader technology!
  accessible-labels-conclusion-2: >-
    If you would like more information about ARIA labeling, visit <a href =
    "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"
    target="_blank" rel="noopener noreferrer">MDN’s ARIA</a>.
  accessible-labels-conclusion-3: >-
    <i>Notice any errors or typos? Please let us know. If you would like to
    contribute to this tutorial,  feel free to issue a <a href =
    "https://github.com/processing/p5.js-website" target="_blank" rel="noopener
    noreferrer">pull request</a>!</i>
  using-local-server: 'Mac OSX, Windows, या Linux पर स्थानीय सर्वर कैसे सेट करें।'
  p5js-wiki-title: p5.js विकी
  p5js-wiki: समुदाय द्वारा योगदान किए गए अतिरिक्त दस्तावेज़ीकरण और शिक्षण
  connecting-p5js-title: कनेक्टिंग p5.js
  creating-libraries-title: 'लाइब्रेरी बनाना '
  creating-libraries: P5.js एडोन लाइब्रेरीज़ बनाना।
  nodejs-and-socketio-title: node.js और socket.io
  nodejs-and-socketio: 'p5.js के साथ node.js सर्वर का उपयोग करना, socket.io के माध्यम से संचार करना।'
  programming-topics-title: प्रोग्रामिंग विषय
  beyond-the-canvas-title: कैनवास से परे
  beyond-the-canvas: कैनवास से परे पृष्ठ पर तत्वों को बनाना और उनमें परिवर्तन करना।
  getting-started-in-webgl-other-tutorials-title: Other Tutorials
  getting-started-in-webgl-other-tutorials-p: >-
    This tutorial is part of a series about the basics of using WebGL in p5.js.
    Check out each of these other tutorials below.
  getting-started-in-webgl-other-tutorials-tut1: Coordinates and Transformations
  getting-started-in-webgl-other-tutorials-tut2: Creating Custom Geometry in WebGL
  getting-started-in-webgl-other-tutorials-tut3: Styling and Appearance
  getting-started-in-webgl-other-tutorials-tut4: Introduction to Shaders
  getting-started-in-webgl-other-tutorials-you-are-here: (you are here)
  getting-started-in-webgl-title: वेबजीएल में शुरूवाती कदम
  getting-started-in-webgl-glossary-title: Glossary
  getting-started-in-webgl-coords-and-transform-title: कॉर्डिनेटस और र्टांसफौरमेंशन
  getting-started-in-webgl-coords-and-transform: '3डी सेटअप, निर्देशांक और परिवर्तन की मूल बातें'
  getting-started-in-webgl-coords-and-transform-p1x1: >-
    p5.js is a powerful tool for creating 2D graphics but it's also capable of
    3D graphics. To get started in 3D there are some new concepts to learn and
    this document will introduce some ideas that will be important to any 3D
    sketch.
  getting-started-in-webgl-coords-and-transform-toc-title: Table of Contents
  getting-started-in-webgl-coords-and-transform-heading1: What is WebGL
  getting-started-in-webgl-coords-and-transform-p2x1: >-
    WebGL is a library that gives us the tools we need to create 3D graphics
    within a web browser. To put it simply, it allows us to do all kinds of math
    that help arrange and display objects in 3D. p5.js makes it easier to work
    with WebGL through its special WebGL mode.
  getting-started-in-webgl-coords-and-transform-p3x1: >-
    Working in 3D introduces a lot of complexity, especially when a sketch
    involves motion, texture, lighting, and more. Luckily for us, computers have
    special hardware that is particularly well suited to performing those
    calculations, the graphics processing unit (GPU). The GPU is capable of
    processing many things simultaneously, which is especially important when
    we're dealing with pixels and many shapes in space.
  getting-started-in-webgl-coords-and-transform-p4x1: >-
    Let's get started by setting up the p5.js to use WebGL, by passing a third
    parameter into <a class="code">createCanvas()</a>.
  getting-started-in-webgl-coords-and-transform-heading2: '3D Coordinate Space: Positioning in 3D'
  getting-started-in-webgl-coords-and-transform-info1x1: >-
    If coordinates systems aren't making sense it might be helpful to revisit
    the tutorial titled <a
    href="{{root}}/learn/coordinate-system-and-shapes.html">Coordinate System
    and Shapes</a>.
  getting-started-in-webgl-coords-and-transform-info1x2: Coordinate System and Shapes
  getting-started-in-webgl-coords-and-transform-p5x1: >-
    One of the most fundamental differences between working in 2D and working in
    3D is the most obvious: there is one more dimension to work with. In
    addition to the horizontal and vertical position (x and y axes) of an
    element in our drawing, 3D adds depth, the z-axis. 
  getting-started-in-webgl-coords-and-transform-p6x1: >-
    When drawing in 2D, the point (0,0) is located at the top left corner of the
    screen. In WebGL mode, the origin of the sketch (0,0,0) is located in the
    middle of the screen. By default, the x-axis goes left-to-right, y-axis goes
    up-to-down, and the z-axis goes from further-to-closer.
  getting-started-in-webgl-coords-and-transform-heading3: 'Transformations: Position and Size of 3D Shapes'
  getting-started-in-webgl-coords-and-transform-p7x1: >-
    p5.js has a few methods, <a class="code"
    href="{{root}}/reference/#/p5/translate">translate()</a>, <a class="code"
    href="{{root}}/reference/#/p5/rotate">rotate()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/scale">scale()</a>, that we can use to
    position and orient objects within space. Each of these methods affect what
    is known as the <em>model matrix</em>. Collectively these are known as the
    <em>transformation</em> of an object. These methods are available for both
    2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-p7x2: 'and '
  getting-started-in-webgl-coords-and-transform-p7x3: >-
    that we can use to position and orient objects within space. Each of these
    methods affect what is known as the <em>model matrix</em>. Collectively
    these are known as the <em>transformation</em> of an object. These methods
    are available for both 2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-subheading1: 'translate(): Moving Objects in Space'
  getting-started-in-webgl-coords-and-transform-p8x1: >-
    <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a>
    moves the origin in a given direction. Anything drawn after we call <a
    class="code">translate()</a> will be positioned relative to that point. <a
    class="code">translate()</a> accepts arguments for x, y, and z values. Use
    the sliders in the sketch above to change the translation of the box and see
    how it moves along each axis. The code below demonstrates simple translation
    on a <a class="code">box()</a> shape.
  getting-started-in-webgl-coords-and-transform-subheading2: 'rotate(): Orienting Objects in Space'
  getting-started-in-webgl-coords-and-transform-p9x1: >-
    <a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a> reorients
    whatever is drawn after it.
  getting-started-in-webgl-coords-and-transform-p10x1: >-
    There are a few methods that can be used to rotate an object in 3D. Most of
    the time it's easiest to call methods like like <a class="code"
    href="{{root}}/reference/#/p5/rotateX">rotateX()</a>, <a class="code"
      href="{{root}}/reference/#/p5/rotateY">rotateY()</a>, and <a class="code"
      href="{{root}}/reference/#/p5/rotateZ">rotateZ()</a>, which each allow for rotation around a specific axis.
    Each of these methods accept a single argument specifying the angle of
    rotation. Try moving the sliders in the example above to see how rotation is
    performed on each axis. The code below shows each of these methods in use.
  getting-started-in-webgl-coords-and-transform-p10x2: 'and '
  getting-started-in-webgl-coords-and-transform-p10x3: >-
    , which each allow for rotation around a specific axis. Each of these
    methods accept a single argument specifying the angle of rotation. Try
    moving the sliders in the example above to see how rotation is performed on
    each axis. The code below shows each of these methods in use.
  getting-started-in-webgl-coords-and-transform-p11x1: >-
    By default p5.js will expect angles to be in radians. Radians use numbers
    from 0 - <a class="code">TWO_PI</a> to specify an angle. To use degrees,
    either convert degrees to radians using <a class="code">radians()</a>, or
    use <a class="code">angleMode(DEGREES)</a>.
  getting-started-in-webgl-coords-and-transform-info2x1: >-
    <p>You can also use <a class="code"
    href="{{root}}/reference/#/p5/rotate">rotate()</a>, which allows you to
    specify which axis you'd like to rotate around using a vector as the second
    argument.</p>
  getting-started-in-webgl-coords-and-transform-info2x2: >-
    , which allows you to specify which axis you'd like to rotate around using a
    vector as the second argument.
  getting-started-in-webgl-coords-and-transform-subheading3: 'scale(): Size in Space'
  getting-started-in-webgl-coords-and-transform-p12x1: >-
    <a class="code" href="{{root}}/reference/#/p5/scale">scale()</a> changes the
    size of whatever is drawn after it. Like the other methods described so far,
    it accepts arguments for x, y, and z values.
  getting-started-in-webgl-coords-and-transform-heading4: The Order of Transformations Matters!
  getting-started-in-webgl-coords-and-transform-p13x1: >-
    Something that can feel unpredictable at first is the order of
    transformations. Each transformation always affects the next one. For
    example, if <a class="code">rotate()</a> is called, followed by <a
    class="code">translate()</a>, the direction of that translation will be
    affected by the rotation. The entire coordinate system is rotating and
    moving, not just the shape itself. 
  getting-started-in-webgl-coords-and-transform-p14x1: >-
    Transformations can be performed in any order, but using
    <strong>translate</strong>, <strong>rotate</strong>, and then
    <strong>scale</strong> will be the most intuitive. Translation, followed by
    rotation, produces the effect of moving the shape <em>and then</em> rotating
    around that new location.
  getting-started-in-webgl-coords-and-transform-p15x1: >-
    In the below example, try changing the order of <a
    class="code">translate()</a> and <a class="code">rotateY()</a> and see how
    it affects where the object is drawn.
  getting-started-in-webgl-coords-and-transform-p16x1: >-
    p5.js also has some methods that can control when transformations are
    applied: <a class="code" href="{{root}}/reference/#/p5/push">push()</a> and
    <a class="code" href="{{root}}/reference/#/p5/pop">pop()</a>. <a
    class="code">push()</a> and <a class="code">pop()</a> make it easier to move
    objects individually. The <a class="code">push()</a> method saves and sets
    aside the current transformations. The <a class="code">pop()</a> method
    restores those transformations. Whatever transformations that are made
    between <a class="code">push()</a> and <a class="code">pop()</a> will be
    isolated to that portion of the code. If you don’t use <a
    class="code">push()</a> and <a class="code">pop()</a>, you have to keep
    track of whatever transformations have already taken place, which can get
    complicated and difficult to follow. Consider this following example, which
    places two boxes in our sketch. To position the second box without <a
    class="code">push()</a> and <a class="code">pop()</a>, you have to account
    for the first transformation. This  can be a lot to keep track of in a more
    complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p16x2: and
  getting-started-in-webgl-coords-and-transform-p16x3: >-
    . <a class="code">push()</a> and <a class="code">pop()</a> make it easier to
    move objects individually. The <a class="code">push()</a> method saves the
    current transformations and  style settings. Then, after performing new
    transformations, the <a class="code">pop()</a> method is used to restore us
    to the the original transformations. The result is that  whatever
    transformations or styling changes that are made between <a
    class="code">push() </a> and <a class="code">pop()</a> are isolated to that
    portion of the code. If you don’t  use <a class="code">push()</a> and <a
    class="code">pop()</a>, you have to keep track of whatever transformations
    have already taken place, which can get complicated and difficult to follow.
    Consider this following example, which places two boxes in our sketch. To
    position the second box without <a class="code">push()</a> and <a
    class="code">pop()</a>, you have to account for the first transformation.
    This  can be a lot to keep track of in a more complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p17x1: >-
    Now, let's try the same code with <a class="code">push()</a> and <a
    class="code">pop()</a>. Now we can just translate the object where we want
    it, without having to remember where our coordinate system lies.
  getting-started-in-webgl-coords-and-transform-info3x1: >-
    <p>While this is a more advanced topic, each of these transformations affect
    what is called the model matrix. The transformation matrix is combined with
    the view matrix and the projection matrix, both of which help simulate the
    view of a camera, and this combination results in our 3D scene! </p> <a
    href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">
    Learn more about Model View Projection </a>
  getting-started-in-webgl-coords-and-transform-p18x1: >-
    In the below example, try removing <a class="code">push()</a> and <a
    class="code">pop()</a> to see how the transformations affect the second
    object that is drawn. 
  getting-started-in-webgl-coords-and-transform-heading5: Basic Shapes in 3D
  getting-started-in-webgl-coords-and-transform-p19x1: >-
    So far we have only been using <a class="code">box()</a> but p5.js has seven
    different predefined geometries that you can use in your sketch. These basic
    predefined geometries are often referred to as 'primitives'.
  getting-started-in-webgl-coords-and-transform-p20x1: >-
    These primitive shape methods are: <a class="code"
    href="{{root}}/reference/#/p5/box">box()</a>, <a class="code"
    href="{{root}}/reference/#/p5/plane">plane()</a>, <a class="code"
    href="{{root}}/reference/#/p5/sphere">sphere()</a>, <a class="code"
    href="{{root}}/reference/#/p5/ellipsoid">ellipsoid()</a>, <a class="code"
    href="{{root}}/reference/#/p5/cone">cone()</a>, <a class="code"
    href="{{root}}/reference/#/p5/cylinder">cylinder()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/torus">torus()</a>.
  getting-started-in-webgl-coords-and-transform-p20x2: and
  getting-started-in-webgl-coords-and-transform-p21x1: >-
    It is also possible to create custom geometry, either from scratch or from
    3D models created in another program. More information about custom geometry
    can be found the <a
    href="{{root}}/learn/getting-started-in-webgl-custom-geometry.html">Custom
    Geometry tutorial</a>.
  getting-started-in-webgl-coords-and-transform-p21x2: 'Custom Geometry tutorial    '
  getting-started-in-webgl-coords-and-transform-heading6: Conclusion
  getting-started-in-webgl-coords-and-transform-p22x1: >-
    By having basic control over a 3D coordinate space, transformations,  and
    basic shapes, you should be able to begin creating basic scenes in 3D. The
    tutorials that follow this in the Getting Started in WebGL series will
    introduce custom geometries, allow you to tweak the appearance of  the
    scene, and introduce you to some basic shader programming to push your
    sketches further.
  getting-started-in-webgl-coords-and-transform-glossary-term1-title: GPU
  getting-started-in-webgl-coords-and-transform-glossary-term1-definition: >-
    The GPU (Graphics Processing Unit) is a piece of hardware that is
    particularly well suited for performing many calculations in parallel,
    making it powerful for 3D graphics.
  getting-started-in-webgl-coords-and-transform-glossary-term2-title: Model
  getting-started-in-webgl-coords-and-transform-glossary-term2-definition: A custom 3D geometry that can be saved and loaded from a file.
  getting-started-in-webgl-coords-and-transform-glossary-term3-title: Matrix
  getting-started-in-webgl-coords-and-transform-glossary-term3-definition: >-
    A special array that can hold information about the transformation of a
    geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term4-title: Camera
  getting-started-in-webgl-coords-and-transform-glossary-term4-definition: The viewpoint of a 3D scene.
  getting-started-in-webgl-coords-and-transform-glossary-term5-title: Transform
  getting-started-in-webgl-coords-and-transform-glossary-term5-definition: >-
    Also referred to as <em>transformation</em>, this refers to the combined
    scale, rotation, and translation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term6-title: Vertex
  getting-started-in-webgl-coords-and-transform-glossary-term6-definition: 'A point in 3D space, with an x, y, z position.'
  getting-started-in-webgl-coords-and-transform-glossary-term7-title: Face
  getting-started-in-webgl-coords-and-transform-glossary-term7-definition: A collection of three points that create a solid surface.
  getting-started-in-webgl-custom-geometry-title: वेबजीएल में कस्टम ज्योमेट्री बनाना
  getting-started-in-webgl-custom-geometry: वेबजीएल में कस्टम ज्योमेट्री बनाना
  getting-started-in-webgl-custom-geometry-p1x1: >-
    p5.js has a number of basic shapes, like <a class="code">box()</a> or <a
    class="code">sphere()</a>, but p5.js is also capable of rendering complex
    custom geometry, both from 3D model files or from code. This tutorial will
    walk through how to import 3D models into p5.js, as well as how to create
    geometry from scratch.
  getting-started-in-webgl-custom-geometry-info1x1: 'यदि आप 3D में नए हैं, तो '
  getting-started-in-webgl-custom-geometry-info1x2: ' देखें।'
  getting-started-in-webgl-custom-geometry-toc-title: Table of Contents
  getting-started-in-webgl-custom-geometry-heading1: Loading 3D Models from File
  getting-started-in-webgl-custom-geometry-p2x1: >-
    Custom geometry can be imported into p5.js using either OBJ or STL files.
    These files are usually generated in a 3D modeling tool like Blender, which
    offers much more control when constructing a 3D scene. This is done using
    the <a class="code" href="{{root}}/reference/#/p5/loadModel">loadModel()</a>
    method, which should be used within <a class="code">preload()</a>.
  getting-started-in-webgl-custom-geometry-p2x2: >-
    method, which should be used within <a class="code">preload()</a>. Then you
    can use the 
  getting-started-in-webgl-custom-geometry-p2x3: 'function to draw the model, as demonstrated in the example below.'
  getting-started-in-webgl-custom-geometry-p3x1: >-
    A common issue that can come up with custom models is scaling. Depending on
    how the model is constructed, it might be a much different size when
    rendered in p5.js, or even be too small to be rendered at all. The <a
    class="code">loadModel()</a> method includes a normalize parameter that will
    resize the model to something that works better in p5.js.
  getting-started-in-webgl-custom-geometry-info2x1: >-
    Note that there is currently no support for STL files with color, although
    you can add color using materials or textures, which you can learn about in
    the <a
    href="{{root}}/learn/getting-started-in-webgl-appearance.html">Styling and
    Appearance</a> tutorial.
  getting-started-in-webgl-custom-geometry-info2x2: 'Styling and Appearance    '
  getting-started-in-webgl-custom-geometry-info2x3: tutorial.
  getting-started-in-webgl-custom-geometry-heading2: Creating Basic Procedural Geometry
  getting-started-in-webgl-custom-geometry-p4x1: >-
    Geometry can also be defined procedurally using code. This is a great way to
    create geometry that moves or is formed using your own set of rules. There
    are a number of methods that can be used to create 3D geometry in a way that
    is similar to 2D drawing in p5.js. For example, methods like <a
    class="code">quad()</a>, <a class="code">triangle()</a>, <a
    class="code">rect()</a>, and <a class="code">circle()</a> each have extra
    parameters that make it possible to use them in 3D.
  getting-started-in-webgl-custom-geometry-p5x1: >-
    There are other methods that offer greater control of the geometry. A shape
    can be defined point-by-point using <a class="code"
    href="{{root}}/reference/#/p5/beginShape">beginShape()</a>, <a class="code"
    href="{{root}}/reference/#/p5/vertex">vertex()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/endShape">endShape()</a>. This following
    example shows how these methods can be used to construct a 3D shape
    mathematically.
  getting-started-in-webgl-custom-geometry-p5x2: 'and '
  getting-started-in-webgl-custom-geometry-p5x3: >-
    This following example shows how these methods can be used to construct a 3D
    shape mathematically.
  getting-started-in-webgl-custom-geometry-p6x1: >-
    There is also a powerful class, <a class="code"
    href="{{root}}/reference/#/p5/p5.Geometry">p5.Geometry</a>, which p5 uses
    internally for <a class="code">loadModel()</a> but can also be used to
    define custom geometry, offering tools that can be helpful in calculating
    faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x1_: >-
    , which p5.js uses internally for <a class="code">loadModel()</a> but can
    also be used to define custom geometry, offering tools that can be helpful
    in calculating faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x2: >-
    In 3D, a face refers to a collection of three or four points that make up a
    surface, giving our geometry the appearance of being solid. A normal is the
    direction that is perpendicular to the face, which helps p5.js calculate
    lighting across the surface.
  getting-started-in-webgl-custom-geometry-p6x3: >-
    In the following example, <a class="code">p5.Geometry</a> is used to plot a
    grid of points for the geometry. Then, <a class="code">computeFaces()</a> is
    used to give the geometry a solid appearance and <a
    class="code">computeNormals()</a> allows our geometry to have proper
    lighting.
  getting-started-in-webgl-custom-geometry-heading3: Conclusion
  getting-started-in-webgl-custom-geometry-p7x1: >-
    Now you should be able to create custom geometry, making it possible to
    create unique shapes, both from other tools and from code. Spend some time
    working with a variety of 3D modeling tools so you can find the one that
    works best for you.
  getting-started-in-webgl-custom-geometry-glossary-term1-title: Procedural
  getting-started-in-webgl-custom-geometry-glossary-term1-definition: >-
    Meaning that something is defined mathematically, instead of from stored
    data, like a file.
  getting-started-in-webgl-custom-geometry-glossary-term2-title: Model
  getting-started-in-webgl-custom-geometry-glossary-term2-definition: A representation of geometry.
  getting-started-in-webgl-custom-geometry-glossary-term3-title: STL
  getting-started-in-webgl-custom-geometry-glossary-term3-definition: >-
    STL (most often standing for "standard tesselation language") is a file
    format for 3D models.  It only stores information about the geometry.
  getting-started-in-webgl-custom-geometry-glossary-term4-title: OBJ
  getting-started-in-webgl-custom-geometry-glossary-term4-definition: >-
    OBJ is an open file format that stores geometry data as well as some
    material and texture data. In p5.js, we are limited to its geometry,
    although an image can still be mapped to the surface using textures.
  getting-started-in-webgl-custom-geometry-glossary-term5-title: Faces
  getting-started-in-webgl-custom-geometry-glossary-term5-definition: The solid surface that is generated between three points.
  getting-started-in-webgl-custom-geometry-glossary-term6-title: Normals
  getting-started-in-webgl-custom-geometry-glossary-term6-definition: >-
    The direction that is perpendicular to a face, which is often needed when
    calculating lighting or using materials.
  getting-started-in-webgl-custom-geometry-glossary-term7-title: Normalization
  getting-started-in-webgl-custom-geometry-glossary-term7-definition: Changing something so that it fits within a standard range.
  getting-started-in-webgl-appearance-title: स्टाइल और दिखावट
  getting-started-in-webgl-appearance: वेबजीएल में मटीरियल और लाईटिंग की मूल बातें
  getting-started-in-webgl-appearance-p0x1: >-
    Creating in 3D is about more than just geometry. Cameras, lights, and
    materials are an important part of creating a visually interesting 3D scene.
    p5.js has a number of tools that make it possible to transform the
    appearance of our geometry.
  getting-started-in-webgl-appearance-toc-title: Table of Contents
  getting-started-in-webgl-appearance-heading1: Camera and View
  getting-started-in-webgl-appearance-p1x1: >-
    The camera is an essential piece of a 3D scene; it gives us the sense of
    space and dimension that we are often looking for in 3D. In p5.js, the WebGL
    mode provides us with a perspective camera by default, but we can change
    this using <a class="code"
    href="{{root}}/reference/#/p5/perspective">perspective()</a> or <a
      class="code" href="{{root}}/reference/#/p5/ortho">ortho()</a>.
  getting-started-in-webgl-appearance-p1x2: 'or '
  getting-started-in-webgl-appearance-p2x1: >-
    A <em>perspective camera</em> skews objects so they appear to get smaller as
    they get further away, vanishing at a single point in the distance. This is
    in contrast to an <em>orthographic camera</em>, where the  geometry stays
    the same size as it gets further away and has no vanishing point. 
  getting-started-in-webgl-appearance-p3x1: >-
    One setting that we can change with a perspective camera is the
    <em>field-of-view</em>, or FOV. This is the  term that is used to describe
    how much our camera can see, measured as an angle. In simple examples it
    might appear to have a zoom-like effect, but it will change way that shapes
    will change size in the distance.
  getting-started-in-webgl-appearance-p4x1: >-
    Another important term when working with cameras in 3D is the camera
    <em>frustum</em>. The frustum of the camera the shape of the camera's view,
    a pyramid-like shape within which geometry can be displayed. The frustum
    includes a <em>near and far plane</em>. The near plane defines the minimum
    distance that geometry must be from the camera to be rendered. The far plane
    defines the maximum distance that the geometry can be from the camera. Each
    of these can be changed to affect how close and how far the camera can see.
    This process of selectively including geometry is sometimes referred to as
    'clipping'.
  getting-started-in-webgl-appearance-p5x1: >-
    Cameras can be moved by passing arguments to <a class="code">camera()</a>,
    but constantly moving and adjusting the camera in code can be tedious,
    especially when you are experimenting with ideas. p5.js has a special camera
    method, <a class="code"
      href="{{root}}/reference/#/p5/orbitControl">orbitControl()</a>, that can be used to zoom, pan,
    and position the camera using the mouse.
  getting-started-in-webgl-appearance-p5x2: ', that can be used to zoom, pan, and position the camera using the mouse.'
  getting-started-in-webgl-appearance-p6x1: >-
    A scene can have multiple cameras, but only one camera can be active at a
    time. Sketches in p5.js will default to having a single perspective camera,
    but that can be changed by calling either <a
      class="code">perspective()</a>
    (with new parameters) or <a class="code">ortho()</a>. <a
    class="code">camera()</a> can be used to change the position of the active
    camera and the position that the camera is looking at. Try it out in the
    sketch below.
  getting-started-in-webgl-appearance-heading2: Lighting
  getting-started-in-webgl-appearance-p7x1: >-
    Lighting is another essential part of a 3D scene. To be able to convey shape
    and depth in 3D is necessary to have a light source. p5.js has a few
    different types of light that can be used in a sketch.
  getting-started-in-webgl-appearance-lighting-list1: >-
    Ambient light makes everything display a little brighter, with no
    consideration for light position or direction.
  getting-started-in-webgl-appearance-lighting-list2: >-
    A directional light shines from one direction, which can be especially
    useful for communicating depth in a scene, or when a scene needs a 'sun'
    light. This method accepts a color and direction.
  getting-started-in-webgl-appearance-lighting-list3: >-
    A point light emits from a single point in all directions, similar to
    something like a lightbulb. This method accepts a color and a position for
    the light.
  getting-started-in-webgl-appearance-lighting-list4: >-
    A spot light emits from a single point in a single direction. This light is
    cast in a conical shape and it's radius and concentration can be adjusted.
  getting-started-in-webgl-appearance-lighting-list5: >-
    noLights() makes it so that all subsequent geometry is rendered without any
    lighting. This can be useful when you want flat, unshaded geometry.
  getting-started-in-webgl-appearance-p8x1: >-
    These lights should be used within <a class="code">draw()</a>. Up to 5
    lights can be used in a scene simultaneously, allowing you to compose a
    scene with varied and complex lighting sources.  Try checking and unchecking
    the boxes in the following interactive example to see how lighting can be
    blended together. For each active light source there are visual indicators
    of their position or direction, just know that these are here for
    illustrative purposes!
  getting-started-in-webgl-appearance-p9x1: >-
    In this next example, try commenting and uncommenting each light and
    experiment with their parameters.
  getting-started-in-webgl-appearance-heading3: Materials and Textures
  getting-started-in-webgl-appearance-p10x1: >-
    Objects can appear differently based on their material. Materials dictate
    how light interacts with the geometry and how color (or texture) gets
    applied to the object. Materials can be varied, making objects shiny, rough,
    or even textured with images.
  getting-started-in-webgl-appearance-p11x1: >-
    In this interactive example, try selecting each of the different materials
    to see how they affect the appearance of the geometry. You can move your
    mouse and see the effect that a directional light has on the material. 
  getting-started-in-webgl-appearance-p12x1: 'Try commenting and uncommenting the different lights in this example:'
  getting-started-in-webgl-appearance-p13x1: >-
    More custom materials can be achieved through using <a
    class="code">texture()</a>. In short, these are images that can be mapped
    onto the surface of a geometry. These textures can be imported from an image
    and can even be generated within code using shaders. To map a texture to
    your geometry, use <a class="code">loadImage()</a>  within <a
    class="code">preload()</a>, then call <a class="code">texture()</a> before
    drawing your shape.
  getting-started-in-webgl-appearance-info1x1: >-
    While they are useful for changing the appearance of your geometry, shaders
    are a bit beyond the scope of this  tutorial, so make sure to check out the
    <a href="{{root}}/learn/introduction-to-shaders.html">Introduction to
    Shaders</a>  page when you are ready. 
  getting-started-in-webgl-appearance-info1x2: Introduction to Shaders
  getting-started-in-webgl-appearance-info1x3: 'page when you are ready. '
  getting-started-in-webgl-appearance-heading4: Conclusion
  getting-started-in-webgl-appearance-p14x1: >-
    Being able to have control over the camera, lighting, and materials will
    give you much more flexibility to decide how your sketch looks, and it will
    open up the possibilities for you to introduce your own style to your 3D
    sketches. The following tutorial in the Getting Started in WebGL series will
    introduce you to shaders, which will make it possible to change the
    appearance of your sketch in even more interesting ways.
  getting-started-in-webgl-appearance-glossary-term1-title: Camera
  getting-started-in-webgl-appearance-glossary-term1-definition: The viewpoint of a 3D scene
  getting-started-in-webgl-appearance-glossary-term2-title: Perspective
  getting-started-in-webgl-appearance-glossary-term2-definition: >-
    A projection that gives the appearance of depth, achieved by making objects
    in the distance appear smaller.
  getting-started-in-webgl-appearance-glossary-term3-title: Orthographic
  getting-started-in-webgl-appearance-glossary-term3-definition: >-
    A projection that is <em>orthogonal</em> and unaffected by depth. It gives
    the appearance of being two-dimensional.
  getting-started-in-webgl-appearance-glossary-term4-title: Field-of-View
  getting-started-in-webgl-appearance-glossary-term4-definition: The angle representing how much can be seen by the camera.
  getting-started-in-webgl-appearance-glossary-term5-title: Frustum
  getting-started-in-webgl-appearance-glossary-term5-definition: >-
    The geometric shape representing the full area that can be viewed by the
    camera.
  getting-started-in-webgl-appearance-glossary-term6-title: Near and Far Plane
  getting-started-in-webgl-appearance-glossary-term6-definition: >-
    The near plane represents the minimum distance a geometry must be from the
    camera to be displayed, while the far plane represents the maximum distance.
  getting-started-in-webgl-appearance-glossary-term7-title: Clipping
  getting-started-in-webgl-appearance-glossary-term7-definition: >-
    Selectively showing some geometry and not others, such as when geometry
    falls outside of the camera frustum.
  getting-started-in-webgl-shaders-title: शेडर्स से परिचय
  getting-started-in-webgl-shaders: वेबजीएल का उपयोग करके p5js के भीतर शेडर बनाने की मूल बातें
  getting-started-in-webgl-shaders-p0x1: >-
    Shaders are special programs that run on the graphics processing unit, or
    GPU, that can do some incredible things. They take advantage of the GPU to
    process many pixels at once, making them fast and particularly well suited
    for certain tasks, like generating noise, applying filters like blur, or
    shading polygons. Shader programming can feel daunting at first, requiring a
    different approach than the 2D drawing of p5.js. This document will outline
    the basics  of shader programming and point you towards other resources.
  getting-started-in-webgl-shaders-toc-title: Table of Contents
  getting-started-in-webgl-shaders-heading1: Setup
  getting-started-in-webgl-shaders-p1x1: >-
    p5.js is a great tool for working with shaders because it handles a lot of
    the WebGL setup so you can focus on the shader code itself. Before we can
    get started with shaders we have to set up our canvas so that it uses p5.js
    WebGL model.
  getting-started-in-webgl-shaders-p2x1: >-
    A shader program consists of two parts, a <strong>vertex shader</strong> and
    a <strong>fragment
      shader</strong>. The vertex shader affects where the 3D geometry is drawn on the screen and the fragment
    shader is responsible for affecting the color output. Each of these live in
    separate files and are loaded into p5.js using <a
    class="code">loadShader()</a>. Once a shader is loaded it can be used within
    <a
      class="code">draw()</a>. The following example will show
    how to set up a basic shader within p5.js:
  getting-started-in-webgl-shaders-heading2: Shading Language (GLSL)
  getting-started-in-webgl-shaders-p3x1: >-
    So now you might be wondering what we actually write in these shader files!
    Shader files are written in Graphics Library Shading Language, or GLSL, and
    have a very different syntax and structure than we are familiar with. GLSL
    has a syntax that resembles C, which means it comes with a handful of
    concepts that aren't present in JavaScript.
  getting-started-in-webgl-shaders-p4x1: >-
    For one, the shading language is much more strict about types. Each variable
    you create has to be labeled with the kind of data it is storing. Here is a
    list of some of the common types:
  getting-started-in-webgl-shaders-typelist: |
    vec2(x,y)     // a vector of two floats
    vec3(r,g,b)   // a vector of three floats
    vec4(r,g,b,a) // a vector of four floats
    float         // a number with decimal points
    int           // a whole number without decimal points
    sampler2D     // a reference to a texture
  getting-started-in-webgl-shaders-p5x1: >-
    In general the shading language is much more strict than JavaScript. A
    missing semicolon for example is not allowed and will result in an error
    message. You can't use different types of numbers, like floats or integers
    interchangeably.
  getting-started-in-webgl-shaders-p6x1: 'First let''s look at a basic vertex shader:'
  getting-started-in-webgl-shaders-p7x1: >-
    This vertex shader begins with an <em>attribute</em>, which p5.js uses to
    share vertex position information with the shader. This attribute is a <a
    class="code">vec3</a>, meaning it contains a value for x, y, and z.
    Attributes are special variable types that are only used in the vertex
    shader and are typically provided by p5.js.
  getting-started-in-webgl-shaders-p8x1: >-
    All vertex shaders require a function, <a class="code">main()</a>, within
    which we position our vertices. In this example, the vertex shader
    repositions our vertices so that the shader output takes up the full sketch.
    At the end of <a
      class="code">main()</a>,
    we have to assign a value to <a class="code">gl_Position</a>.
  getting-started-in-webgl-shaders-p9x1: >-
    Don't worry if this doesn't make a ton of sense yet. The vertex shader plays
    an important role but it is often just responsible for making sure what we
    create in our fragment shader displays properly on the geometry. You'll
    probably find yourself reusing the same vertex shaders in many of your
    projects. The fragment shader on the other hand is responsible for the color
    output of our shader and is where we will do a lot of our shader
    programming. Here is a very simple fragment shader that will just display
    the color red:
  getting-started-in-webgl-shaders-p10x1: >-
    The fragment shader begins with a line specifying the float 'precision'.
    this value you can either be lowp, mediump, or highp, although you will
    likely use mediump, or highp in certain situations.
  getting-started-in-webgl-shaders-p11x1: >-
    And similar to the vertex shader, our fragment shader also requires a <a
    class="code">main()</a> function, but instead of setting <a
    class="code">gl_Position</a>, we will assign a color to <a
    class="code">gl_FragColor</a>.
  getting-started-in-webgl-shaders-p12x1: >-
    The variable, <a class="code">myColor</a>, is defined as a <a
    class="code">vec4</a>, meaning it stores 4 values. Since we are dealing with
    color, those four values are red, green, blue, and alpha. Shaders don't use
    0 - 255 for colors like our sketches do, instead they use values between 0.0
    and 1.0.
  getting-started-in-webgl-shaders-p13x1: >-
    Now that we have a vertex shader and a fragment shader, these can be saved
    to separate files (shader.vert and shader.frag respectively), and loaded
    into our sketch using <a class="code">loadShader()</a>.
  getting-started-in-webgl-shaders-heading3: 'Uniforms: Passing data from sketch to shader'
  getting-started-in-webgl-shaders-p14x1: >-
    A simple shader like this can be useful by itself, but there are times when
    it's necessary to communicate variables from the p5.js sketch to a shader.
    This is when uniforms come in. Uniforms are special variables that can be
    sent from a sketch to a shader. These make it possible to have much more
    control over a shader. For example, you could use the p5.js method <a
    class="code">millis()</a> to pass a 'time' uniform to our sketch to
    introduce motion. In the shader, uniforms are defined at the top of the
    file, outside of <a class="code">main()</a>. In this following fragment
    shader we are creating a color uniform, <a class="code">myColor</a>, that
    will allow us to change the color from our sketch.
  getting-started-in-webgl-shaders-p15x1: >-
    Back in our p5.js sketch, this color can now be sent using <a
    class="code">setUniform()</a>:
  getting-started-in-webgl-shaders-p16x1: >-
    There are also <em>attributes</em>, which are usually used to share certain
    data about the geometry between the sketch and the vertex shader, and
    <em>varying</em> variables, which share data between the vertex shader and
    the fragment shader. This makes it possible to use position or other
    geometry data within our fragment shaders.
  getting-started-in-webgl-shaders-p17x1: >-
    Now with the texture coordinate attribute assigned to the varying variable,
    we can use the texture coordinate in our fragment shader. The result in the
    example below is a blue and magenta visualization of our texture
    coordinates.
  getting-started-in-webgl-shaders-info1x1: >-
    p5.js handles a lot of attributes and uniforms for us, and <a
    href="https://github.com/processing/p5.js/blob/374acfb44588bfd565c54d61264df197d798d121/contributor_docs/webgl_mode_architecture.md">you
    can view a list of all of the attributes that p5.js sends to the shader</a>.
  getting-started-in-webgl-shaders-heading4: Conclusion
  getting-started-in-webgl-shaders-p18x1: >-
    With these skills you will be able to create some basic shaders, but shader
    programming can go incredibly deep, and there are many shader topics that go
    beyond this tutorial. Shaders in p5.js can be a powerful tool for creating
    visuals, effects, and even textures that can be mapped to your 3D geometry.
  getting-started-in-webgl-shaders-p19x1: Want to keep learning more about shaders? Check out some of these websites!
  getting-started-in-webgl-shaders-resources: >-
    <li><a href="https://thebookofshaders.com/">The Book of Shaders</a>, a
    shader guide by Patricio Gonzalez Vivo
      and
      Jen Lowe.</li>
    <li><a href="https://itp-xstory.github.io/p5js-shaders/#/">P5.js
    shaders</a>, a shader guide by Casey Conchinha
      and
      Louise Lessél.</li>
    <li><a href="https://www.shadertoy.com/">Shadertoy</a>, a massive online
    collection of shaders that are written in a browser editor.</li> <li><a
    href="https://github.com/aferriss/p5jsShaderExamples">p5jsShaderExamples</a>,
    a collection of resources
      by
      Adam Ferriss.</li>
  getting-started-in-webgl-shaders-glossary-term1-title: Shader
  getting-started-in-webgl-shaders-glossary-term1-definition: >-
    A special graphics card program that can efficiently produce many visual
    effects and filters.
  getting-started-in-webgl-shaders-glossary-term2-title: GLSL
  getting-started-in-webgl-shaders-glossary-term2-definition: >-
    Graphics Library Shader Language (GLSL) is a programming language that is
    used to write shaders.
  getting-started-in-webgl-shaders-glossary-term3-title: Uniform
  getting-started-in-webgl-shaders-glossary-term3-definition: A variable that is passed from your sketch to a shader
  getting-started-in-webgl-shaders-glossary-term4-title: Vector
  getting-started-in-webgl-shaders-glossary-term4-definition: >-
    A data type that stores a group of numbers, most commonly two, three, or
    four, to represent colors, positions, and more.
  getting-started-in-webgl-shaders-glossary-term5-title: Float
  getting-started-in-webgl-shaders-glossary-term5-definition: >-
    A data type that stores floating point numbers, which can have a decimal
    point.
  getting-started-in-webgl-shaders-glossary-term6-title: Int
  getting-started-in-webgl-shaders-glossary-term6-definition: 'A data type that stores integers, which are whole numbers without a decimal.'
  getting-started-in-webgl-shaders-glossary-term7-title: Sampler
  getting-started-in-webgl-shaders-glossary-term7-definition: A data type that represents a texture being passed into the shader.
  getting-started-in-webgl-shaders-glossary-term8-title: Attribute
  getting-started-in-webgl-shaders-glossary-term8-definition: >-
    A GLSL variable that is generated in the p5.js sketch and made available in
    the vertex shader. For most situations these are provided by p5.js.
  getting-started-in-webgl-shaders-glossary-term9-title: Texture
  getting-started-in-webgl-shaders-glossary-term9-definition: An image that passed into a shader program.
  getting-started-in-webgl-shaders-glossary-term10-title: Type
  getting-started-in-webgl-shaders-glossary-term10-definition: >-
    A label describing the characterics of a piece of data, such as an int, a
    float, a vector, etc.
  getting-started-in-webgl-shaders-glossary-term11-title: Vertex Shader
  getting-started-in-webgl-shaders-glossary-term11-definition: >-
    The part of a shader program that is responsible for positioning geometry in
    3D space.
  getting-started-in-webgl-shaders-glossary-term12-title: Fragment Shader
  getting-started-in-webgl-shaders-glossary-term12-definition: >-
    The part of a shader program that is responsible for the color and
    appearance of each pixel output by the shader.
  getting-started-in-webgl-framebuffers-title: फ्रेमबफर के साथ लेयरड रेन्डरिंग
  getting-started-in-webgl-framebuffers: कई चरणों में सकेचिज़ तैयार करना या 3डी जानकारी तक पहुंच बनाना।
  color-title: रंग
  color: डिजिटल रंग के लिए एक परिचय।
  coordinate-system-and-shapes-title: समन्वय प्रणाली और आकृतियाँ
  coordinate-system-and-shapes: सरल आकृतियों को आकर्षित करना और समन्वय प्रणाली का उपयोग करना।
  interactivity-title: अन्तरक्रियाशीलता
  interactivity: माउस और कीबोर्ड के साथ अन्तरक्रियाशीलता का परिचय।
  program-flow-title: रोग्राम का प्रवाह
  program-flow: p5.js में प्रोग्राम प्रवाह को नियंत्रित करने का परिचय।
  curves-title: कर्व
  curves: >-
    p5.js में तीन प्रकार के कर्व्स का परिचय: आर्क्स, स्पलाइन कर्व्स और बेज़ियर
    कर्व्स।
  becoming-a-better-programmer-title: एक बेहतर प्रोग्रामर बनना
  debugging-title: डिबगिंग
  debugging: सभी के लिए डिबगिंग के लिए फील्ड गाइड।
  optimizing-title: प्रदर्शन के लिए p5.js कोड का अनुकूलन
  optimizing: >-
    अपने कोड को अनुकूलित करने के लिए युक्तियों और युक्तियों का एक शिक्षण इसे तेज
    और सुचारू रूप से चलाने के लिए।
  test-driven-development-title: इकाई परीक्षण और परीक्षण संचालित विकास
  test-driven-development: >-
    इंस्टालेशन के समय पर खुद को पीड़ा से बचाएं। यूनिट परीक्षण क्या है और इसका
    उपयोग कैसे करें? एंडी टिम्मन्स द्वारा।
  contributing-to-the-community-title: समुदाय में योगदान
  development-title: विकास
  development: शुरुआत करना और विकास में योगदान के लिए अवलोकन।
  looking-inside-title: p5 के अंदर
  looking-inside: >-
    लुईसाा परेरा द्वारा p5.js विकास के लिए फ़ाइल संरचना और उपकरणों के लिए एक
    अनुकूल परिचय।
  writing-tutorial-title: एक शिक्षण लेखन
  writing-tutorial: एक गाइड p5.js प्रोग्रामिंग शिक्षण लिखने के लिए।
  writing-a-tutorial-title: P5.js शिक्षण के योगदान के लिए गाइड
  writing-a-tutorial-author: यह शिक्षण टेगा ब्रेन द्वारा लिखा गया था।
  writing-a-tutorial-1: >-
    हम शिक्षकों, योगदानकर्ताओं और सामान्य उत्साही लोगों को p5js शिक्षण में
    योगदान करने के लिए आमंत्रित करते हैं। P5js परियोजना रचनात्मक कोडिंग और खुले
    स्रोत के विकास को विविध समुदाय के लिए अधिक सुलभ बनाती है और हम विकास
    प्रक्रिया के सभी पहलुओं पर शिक्षण प्रकाशित करने के लिए उत्साहित हैं। अब तक
    की हमारी शिक्षण सामग्री में सीखने की पी 5, प्रोग्रामिंग तकनीक और एक ओपन
    सोर्स प्रोजेक्ट में योगदान करने के तरीके शामिल हैं।
  writing-a-tutorial-2: >-
    हम नए लिखित शिक्षण योगदानों का स्वागत करते हैं और यह गाइड प्रस्ताव, तैयारी
    और योगदान करने के तरीके की रूपरेखा प्रस्तुत करता है।
  writing-a-tutorial-how-start-title: 'शुरुआत कैसे करें:'
  writing-a-tutorial-how-start-1: 'जांचें कि आपका प्रस्तावित विषय पहले से ही कवर नहीं किया गया है। '
  writing-a-tutorial-how-start-2: 'यहां एक वर्किंग स्प्रेडशीट है '
  writing-a-tutorial-how-start-3: >-
    जो प्रगति शिक्षण में रूपरेखा है। यदि आपके विषय को प्रगति के रूप में सूचीबद्ध
    किया गया है, तो शायद आप काम करने के लिए जोड़ सकते हैं और प्रकाशन के लिए
    मौजूदा काम को तैयार करने में योगदान कर सकते हैं ताकि कृपया हमारे पास
    पहुंचें।
  writing-a-tutorial-how-start-4: >-
    यदि आपका विषय पहले से ही कवर नहीं है और प्रगति के रूप में सूचीबद्ध नहीं है,
    तो कृपया कुछ वाक्यों को लिखें, जो आप हमें इस विवरण को education@p5js.org पर
    कवर करने और ईमेल करने का प्रस्ताव देते हैं।
  writing-a-tutorial-how-prepare-title: 'ऑनलाइन प्रकाशन के लिए एक p5js शिक्षण कैसे तैयार करें:'
  writing-a-tutorial-how-prepare-1: >-
    जब आपका शिक्षण प्रकाशन के लिए तैयार हो जाता है, तो कृपया p5js वेबसाइट के लिए
    अपनी सामग्री तैयार करने के लिए इन चरणों का पालन करें।
  writing-a-tutorial-how-prepare-2: 'Prepare the content of your tutorial as a tutorial-name.hbs file with '
  writing-a-tutorial-how-prepare-3: इस मूल संरचना के साथ
  writing-a-tutorial-how-prepare-4: ' एक शिक्षण-name.hbs फ़ाइल के रूप में अपने शिक्षण की सामग्री तैयार करें। जैसा कि इस फ़ाइल में दिखाया गया है, इसमें एक हैडर होना चाहिए जैसा कि नीचे दिखाया गया है:'
  writing-a-tutorial-how-prepare-5: >-
    आपके शिक्षण वाले फ़ोल्डर को p5js साइट के 'शिक्षण' फ़ोल्डर में रखा जाएगा।
    index.hbs नामक फ़ाइल
  writing-a-tutorial-how-prepare-6: 'p5.js शिक्षण लैंडिंग पेज ,'
  writing-a-tutorial-how-prepare-7: ' है, और परीक्षण-शिक्षण.एचबीएस फ़ाइल परीक्षण शिक्षण है।'
  writing-a-tutorial-how-prepare-8: 'सभी सामग्री में जाना चाहिए:'
  writing-a-tutorial-how-prepare-9: >-
    पृष्ठ पर टैग &lt;h1 &gt; और &lt;h2 &gt; टैग द्वारा परिभाषित स्वरूपण के साथ,
    &lt;p &gt; पैराग्राफ टैग के रूप में दिखाया गया है
  writing-a-tutorial-how-prepare-10: शिक्षण पृष्ठ का परीक्षण करें।
  writing-a-tutorial-how-prepare-11: >-
    यदि आपके शिक्षण में छवियां हैं, तो उन्हें नीचे दिए गए स्थान के अनुसार, स्थान
    src/assets/learn/test-tutorial/images में, P5 साइट के asset फ़ोल्डर में रखा
    जाना है।
  writing-a-tutorial-how-prepare-12: 'पृष्ठ के HTML में कोड को सही ढंग से प्रारूपित करने के लिए टैग का उपयोग करें:'
  writing-a-tutorial-embedding-title: P5.js स्केच एम्बेड करना
  writing-a-tutorial-embedding-1: >-
    P5js का उपयोग करने का मतलब है कि आप अपने शिक्षण को प्रोग्रामिंग अवधारणाओं को
    प्रदर्शित करने के लिए एनिमेटेड, इंटरैक्टिव या संपादन योग्य कोड उदाहरणों के
    साथ चित्रित कर सकते हैं। आपके उदाहरणों को p5.js स्केच के रूप में तैयार किया
    जाना चाहिए और इसे दो तरीकों से शिक्षण में एम्बेड किया जा सकता है।
  writing-a-tutorial-embedding-2: 'यदि उदाहरण p5js साइट के '
  writing-a-tutorial-embedding-3: संदर्भ पृष्ठों
  writing-a-tutorial-embedding-4: ' की तरह संपादन योग्य होना है, तो p5js विजेट का उपयोग करके HTML पृष्ठ में p5 स्केच को एम्बेड किया जाना चाहिए।  टूल द्वारा लिखित विजेट का उपयोग करके p5js स्केच को एम्बेड करने के तरीके पर '
  writing-a-tutorial-embedding-5: 'इस गाइड '
  writing-a-tutorial-embedding-6: 'का पालन करें। '
  writing-a-tutorial-embedding-7: 'आप इसे '
  writing-a-tutorial-embedding-8: ' परीक्षण शिक्षण पृष्ठ '
  writing-a-tutorial-embedding-9: ' पर कार्रवाई में भी देख सकते हैं।'
  writing-a-tutorial-embedding-10: ' यदि उदाहरण एनिमेटेड और / या इंटरैक्टिव होना है, लेकिन संपादन योग्य नहीं है। P5.js स्केच को नीचे वर्णित अनुसार iframe के रूप में पृष्ठ में एम्बेड किया जाना चाहिए।'
  writing-a-tutorial-iframe-title: एक iframe का उपयोग करके एक p5 स्केच एम्बेड करें
  writing-a-tutorial-iframe-1: >-
    एक iframe एक विंडो बनाने जैसा है, जिसके माध्यम से आप अपने पेज के बाकी
    हिस्सों से सैंडबॉक्स कर सकते हैं। इस स्थिति में यह आपके p5.js स्केच वाले
    index.html की एक विंडो होगी।
  writing-a-tutorial-iframe-2: ' स्क्रीनशॉट में दिखाए अनुसार आपके स्केच के नाम के साथ लेबल वाले फ़ोल्डर में, साइट के / src / आस्तियों / सीखने के फ़ोल्डर में अपने p5 स्केच डालें। यह वह जगह है जहाँ iframe से जुड़े सभी चित्र और p5 स्केच संग्रहीत किए जाने चाहिए।'
  writing-a-tutorial-iframe-3: >-
    आपके p5 उदाहरण वाले सबफ़ोल्डर्स में एक स्केच.जेएस फ़ाइल और स्केच के लिए
    embed.html फ़ाइल होनी चाहिए।
  writing-a-tutorial-iframe-4: >-
    सुनिश्चित करें कि आपकी embed.html फ़ाइल में साइट के p5 लाइब्रेरीज  के लिए
    सही रास्ते हैं। यदि आपकी फ़ाइल संरचना ऊपर के समान है, तो p5.js लाइब्रेरी का
    पथ ".. ..///..s/ js / p5.min.js " होना चाहिए।
  writing-a-tutorial-iframe-5: >-
    इसके बाद आप .hbs फ़ाइल के रूप में p5js इंडेक्स फाइल को अपने शिक्षण सामग्री
    में एम्बेड कर सकते हैं। Iframe के लिए एम्बेड कोड तब होगा:
  writing-a-tutorial-iframe-6: 'आइफ्रेम के लिए स्टाइलिंग (यह सीधे पोस्ट या स्टाइलशीट में हो सकता है):  '
  writing-a-tutorial-iframe-7: 'यहाँ आप नग्न स्केच को चलते हुए देख सकते हैं: '
  writing-a-tutorial-iframe-8: 'और यहाँ नीचे कोड का उपयोग करके इसे p5 साइट में एम्बेड किया गया है:  '
  writing-a-tutorial-iframe-9: >-
    ध्यान देने वाली एक बात यह है कि आपको मैन्युअल रूप से iframe का आकार
    निर्धारित करने की आवश्यकता है, इसलिए यह सबसे अच्छा काम करता है यदि चीजें एक
    मानक आकार हैं।
  writing-a-tutorial-iframe-10: >-
    यह भी ध्यान दें कि p5.js लाइब्रेरी फ़ाइलों के लिंक सभी शिक्षण सामग्री के साथ
    .eps पेज से नहीं होते हैं। इसके बजाय वे html पृष्ठ में स्थित होंगे जो आपके
    स्केच का प्रतिपादन कर रहा है (इस मामले में, जिसे embed.html कहा जाता है)।
  writing-a-tutorial-iframe-11: 'एम्बेडिंग p5.js स्केच के बारे में अधिक जानकारी '
  writing-a-tutorial-embed-iframe-12: यहाँ पाई जा सकती है।
  writing-a-tutorial-finishing-title: पूरी तरह खत्म करना
  writing-a-tutorial-finishing-1: >-
    एक बार जब आप अपना शिक्षण लिखना समाप्त कर लेते हैं और आपकी सामग्री को अंगूठा
    दे दिया जाता है। वेबसाइट के भंडार के लिए p5.js को फोर्क करें, ऊपर वर्णित
    अनुसार अपनी सामग्री तैयार करें और फिर p5.js वेबसाइट रिपॉजिटरी के लिए एक पुल
    अनुरोध जारी करें ताकि हम आपके योगदान को प्रकाशित कर सकें!
  writing-a-tutorial-finishing-2: धन्यवाद!
  color-description1: >-
    यह शिक्षण डैनियल शिफमैन की पुस्तक लर्निंग प्रोसेसिंग से है, जिसे मॉर्गन
    कॉफमैन द्वारा प्रकाशित किया गया था, © 2008 एल्सेवियर इंक। सभी अधिकार
    सुरक्षित। इसे केली चांग ने P5 में रखा था। यदि आप कोई त्रुटि देखते हैं या
    टिप्पणी करते हैं,
  color-description2: ' तो कृपया हमें बताएं।'
  color-p1x1: >-
    डिजिटल दुनिया में, जब हम किसी रंग के बारे में बात करना चाहते हैं, तो सटीकता
    की आवश्यकता होती है। "अरे, क्या आप उस सर्कल को हरा-हरा बना सकते हैं?" नहीं
    करूँगा। रंग, बल्कि, संख्याओं की एक सीमा के रूप में परिभाषित किया गया है। चलो
    सबसे सरल मामले से शुरू करते हैं: काले और सफेद या ग्रेस्केल। 0 का मतलब है
    काला, 255 का मतलब है सफेद। बीच में, हर दूसरे नंबर- 50, 87, 162, 209, और इसी
    तरह से ग्रे की एक छाया है जो काले से सफेद तक होती है।
  color-p2x1: 'कुछ खींचने से पहले '
  color-p2x2: ' और '
  color-p2x3: '  कार्य करने से पहले, हम किसी भी दिए गए आकार का रंग निर्धारित कर सकते हैं.  ़ ंक्शन '
  color-p2x4: ' भी है ,  ो खिड़की के लिए एक पृष्ठभूमि रंग सेट करता है। यहाँ एक उदाहरण है '
  color-code1: |-
    background(255);    // सफेद करने के लिए पृष्ठभूमि की स्थापना
     stroke(0);          // काला करने के लिए रूपरेखा (स्ट्रोक) की स्थापना
     fill(150);          // एक आकृति के इंटीरियर को सेट करना (भरना) ग्रे करने के लिए
     rect(50,50,75,100); // आयत खींचना
  color-p3x1: 'स्ट्रोक या भरण को कार्यों के साथ समाप्त किया जा सकता है: '
  color-p3x2: ' और '
  color-p3x3: ' हमारी प्रवृत्ति को बिना किसी रूपरेखा के "स्ट्रोक (0)" कहना हो सकता है, हालांकि, यह याद रखना महत्वपूर्ण है कि 0 "कुछ भी नहीं" है, बल्कि रंग काले को दर्शाता है। इसके अलावा, दोनों को खत्म करने के लिए याद रखें - '
  color-p3x4: ' और  '
  color-p3x5: ' ,कुछ भी नहीं दिखाई देगा!'
  color-p4x1: >-
    इसके अलावा, अगर हम दो आकृतियाँ बनाते हैं, तो p5.js हमेशा सबसे हाल ही में
    निर्दिष्ट स्ट्रोक का उपयोग करेगा और ऊपर से नीचे तक कोड को पढ़ेगा।
  color-rgb-title: RGB रंग
  color-rgb-p1x1: >-
    फिंगर पेंटिंग याद है? तीन " प्राथमिक " रंगों को मिलाकर, किसी भी रंग को
    उत्पन्न किया जा सकता है। सभी रंगों को एक साथ घूमने से मैला भूरा हुआ। जितना
    अधिक पेंट आपने जोड़ा, उतना ही गहरा। डिजिटल रंगों का निर्माण भी तीन प्राथमिक
    रंगों को मिलाकर किया जाता है, लेकिन यह पेंट से अलग तरह से काम करता है। सबसे
    पहले, प्राइमरी अलग हैं: लाल, हरा और नीला (यानी, " RGB " रंग)। और स्क्रीन पर
    रंग के साथ, आप प्रकाश मिश्रण कर रहे हैं, पेंट नहीं कर रहे हैं, इसलिए मिश्रण
    के नियम भी अलग हैं।
  color-rgb-li1: लाल + हरा = पीला
  color-rgb-li2: लाल + नीला = बैंगनी
  color-rgb-li3: हरा + नीला = सियान (नीला-हरा)
  color-rgb-li4: लाल + हरा + नीला = सफेद
  color-rgb-li5: कोई रंग नहीं = काला
  color-rgb-p2x1: >-
    यह मानता है कि रंग सभी के रूप में संभव के रूप में उज्ज्वल हैं, लेकिन निश्चित
    रूप से, आपके पास उपलब्ध रंग की एक सीमा है, इसलिए कुछ लाल प्लस कुछ हरे रंग के
    साथ कुछ नीले बराबर ग्रे, और लाल रंग का एक सा नीला नीला बैंगनी के बराबर है।
    हालांकि यह कुछ करने के लिए इस्तेमाल किया जा सकता है, जितना अधिक आप आरजीबी
    रंग के साथ कार्यक्रम और प्रयोग करते हैं, उतना ही यह सहज हो जाएगा, बहुत कुछ
    अपनी उंगलियों के साथ घूमता रंगों की तरह। और निश्चित रूप से आप कुछ नीले रंग
    के साथ कुछ लाल मिश्रण नहीं कर सकते, आपको एक सटीक राशि प्रदान करनी होगी।
    ग्रेस्केल के साथ, व्यक्तिगत रंग तत्वों को 0 (उस रंग में से कोई भी) से लेकर
    255 तक (जितना संभव हो) के रूप में व्यक्त किया जाता है, और वे आर, जी और बी
    क्रम में सूचीबद्ध होते हैं। प्रयोग के माध्यम से रंग मिश्रण, लेकिन अगले हम
    कुछ सामान्य रंगों का उपयोग करके कुछ कोड को कवर करेंगे।
  color-transparency-title: रंग पारदर्शिता
  color-transparency-p1x1: >-
    प्रत्येक रंग के लाल, हरे और नीले रंग के घटकों के अलावा, एक अतिरिक्त वैकल्पिक
    चौथा घटक है, जिसे रंग के " अल्फा " के रूप में जाना जाता है। अल्फा का अर्थ
    पारदर्शिता है और विशेष रूप से उपयोगी है जब आप उन तत्वों को आकर्षित करना
    चाहते हैं जो आंशिक रूप से एक-दूसरे के ऊपर से देखते हैं। किसी छवि के लिए
    अल्फा मान कभी-कभी सामूहिक रूप से एक छवि के " अल्फा चैनल " के रूप में
    संदर्भित होते हैं।
  color-transparency-p2x1: >-
    यह महसूस करना महत्वपूर्ण है कि पिक्सेल सचमुच पारदर्शी नहीं हैं, यह बस एक
    सुविधाजनक भ्रम है जो रंगों को सम्मिश्रण करने से पूरा होता है। पर्दे के पीछे,
    p5.js रंग संख्या लेता है और सम्मिश्रण की ऑप्टिकल धारणा बनाते हुए एक प्रतिशत
    को दूसरे के प्रतिशत में जोड़ता है। (यदि आप प्रोग्रामिंग में रुचि रखते हैं "
    गुलाब के रंग का " चश्मा, तो यह वह जगह है जहाँ आप शुरू करेंगे।)
  color-transparency-p3x1: >-
    अल्फा मान भी 0 से 255 तक होता है, जिसमें 0 पूरी तरह से पारदर्शी होता है
    (यानी, 0% अपारदर्शी) और 255 पूरी तरह से अपारदर्शी (यानी, 100% अपारदर्शी).
  color-custom-ranges-title: कस्टम रंग रेंज
  color-custom-ranges-p1x1: ' 0 से 255 के बीच आरजीबी रंग एकमात्र तरीका नहीं है जो आप पी 5.js में रंग संभाल सकते हैं, वास्तव में, यह हमें किसी भी तरह से रंग के बारे में सोचने की अनुमति देता है। उदाहरण के लिए, आप रंग के बारे में सोचना पसंद कर सकते हैं जो 0 से लेकर 100 (प्रतिशत की तरह) तक हो सकता है। आप एक कस्टम colorMode () निर्दिष्ट करके ऐसा कर सकते हैं। '
  color-custom-ranges-p2x1: >-
    उपरोक्त फ़ंक्शन कहता है: " ठीक है, हम लाल, हरे और नीले रंग के संदर्भ में रंग
    के बारे में सोचना चाहते हैं। RGB मूल्यों की सीमा 0 से 100 तक होगी। "
  color-custom-ranges-p3x1: >-
    हालाँकि ऐसा करने के लिए यह शायद ही सुविधाजनक है, आप प्रत्येक रंग घटक के लिए
    अलग-अलग रेंज भी रख सकते हैं:
  color-custom-ranges-p4x1: >-
    अब हम कह रहे हैं कि "लाल मान 0 से 100 तक जाते हैं, 0 से 500 तक हरा, 0 से 10
    तक नीला और 0 से 255 तक अल्फा। "
  color-custom-ranges-p5x1: >-
    अंत में, जबकि आपको अपनी सभी प्रोग्रामिंग जरूरतों के लिए केवल RGB रंग की
    आवश्यकता होगी, आप HSB (ह्यू, संतृप्ति और चमक) मोड में भी रंग निर्दिष्ट कर
    सकते हैं। बहुत अधिक विस्तार में आए बिना, एचएसबी रंग निम्नानुसार काम करता है:
  color-custom-ranges-li1x1: रंग
  color-custom-ranges-li1x2: '- रंग प्रकार, डिफ़ॉल्ट रूप से 0 से 255 तक होता है।'
  color-custom-ranges-li2x1: परिपूर्णता
  color-custom-ranges-li2x2: '- रंग की जीवंतता, डिफ़ॉल्ट रूप से 0 से 255।'
  color-custom-ranges-li3x1: चमक
  color-custom-ranges-li3x2: ', रंग की चमक, डिफ़ॉल्ट रूप से 0 से 255।'
  color-custom-ranges-p6x1: 'साथ में '
  color-custom-ranges-p6x2: ' आप इन मूल्यों के लिए अपनी सीमाएं निर्धारित कर सकते हैं। कुछ लोग ह्यू के लिए 0-360 (रंग व्हील पर 360 डिग्री सोचते हैं) और संतृप्ति और चमक के लिए 0-100 (0-100% के बारे में सोचें) की एक सीमा पसंद करते हैं।'
  coordinate-system-description1: 'यह शिक्षण डैनियल शिफमैन की पुस्तक '
  coordinate-system-description2: लर्निंग प्रोसेसिंग
  coordinate-system-description3: ' से है, जिसे मॉर्गन कॉफमैन द्वारा प्रकाशित किया गया था, © 2008 एल्सेवियर इंक। सभी अधिकार सुरक्षित इसे एलेक्स Yixuan Xu द्वारा p5.js पर पोर्ट किया गया था। यदि आप कोई त्रुटि देखते हैं या टिप्पणी करते हैं '
  coordinate-system-description4: कृपया हमें बताएं
  coordinate-system-description5: ।
  coordinate-system-description-title: समन्वय प्रणाली और आकृतियाँ
  coordinate-system-description-p1x1: >-
    पी 5 के साथ प्रोग्रामिंग शुरू करने से पहले, हमें पहले अपने आठवीं कक्षा के
    स्वयं को चैनल करना चाहिए, ग्राफ पेपर के एक टुकड़े को बाहर निकालना चाहिए, और
    एक रेखा खींचना चाहिए। दो बिंदुओं के बीच की सबसे छोटी दूरी एक अच्छी पुरानी
    जमाने की रेखा है, और यह वह जगह है जहाँ हम शुरू करते हैं, उस ग्राफ़ पेपर पर
    दो बिंदुओं के साथ।
  coordinate-system-description-p2x1: >-
    उपरोक्त आंकड़ा बिंदु A (1,0) और बिंदु B (4,5) के बीच एक रेखा दिखाता है। यदि
    आप अपने किसी मित्र को उसी रेखा को खींचने के लिए निर्देशित करना चाहते हैं, तो
    आप उन्हें एक चिल्लाहट देंगे और कहेंगे " बिंदु वन-शून्य से बिंदु चार-पाँच तक
    एक रेखा खींचिए, कृपया। " , कल्पना कीजिए कि आपका दोस्त एक कंप्यूटर था और आप
    इस डिजिटल पाल को उसकी स्क्रीन पर उसी लाइन को प्रदर्शित करने का निर्देश देना
    चाहते थे। एक ही आदेश लागू होता है (केवल इस बार आप सुखदताओं को छोड़ सकते हैं
    और आपको एक सटीक स्वरूपण को लागू करने की आवश्यकता होगी)। यहाँ, निर्देश इस तरह
    दिखेगा:
  coordinate-system-description-p3x1: >-
    यहां तक ​​कि लेखन कोड के वाक्यविन्यास का अध्ययन किए बिना, उपरोक्त कथन को
    उचित मात्रा में समझ में आना चाहिए। हम एक आदेश प्रदान कर रहे हैं (जिसे हम
    मशीन के लिए " फ़ंक्शन " के रूप में संदर्भित करेंगे) "लाइन।" (1,0) से बी तक
    (4,5)। यदि आप एक वाक्य के रूप में कोड की उस पंक्ति के बारे में सोचते हैं, तो
    फ़ंक्शन एक क्रिया है और तर्क वाक्य की वस्तुएं हैं। कोड की सजा भी एक अवधि के
    बजाय एक अर्धविराम के साथ समाप्त होती है।
  coordinate-system-description-p4x1: >-
    यहां कुंजी यह महसूस करना है कि कंप्यूटर स्क्रीन ग्राफ पेपर के एक कट्टर
    टुकड़े से ज्यादा कुछ नहीं है। स्क्रीन का प्रत्येक पिक्सेल एक समन्वय होता है
    - दो नंबर, एक " x " (क्षैतिज) और एक " y " (ऊर्ध्वाधर) - जो अंतरिक्ष में एक
    बिंदु के स्थान को निर्धारित करता है। और यह निर्दिष्ट करना हमारा काम है कि इन
    पिक्सेल निर्देशांक में किस आकार और रंग दिखाई देने चाहिए।
  coordinate-system-description-p5x1: >-
    फिर भी, यहाँ एक पकड़ है। आठवीं कक्षा से ग्राफ पेपर (" कार्टेशियन कोऑर्डिनेट
    सिस्टम ") केंद्र में रखा गया (0,0) y- अक्ष की ओर इशारा करता है और x- अक्ष
    दाईं ओर इंगित करता है (सकारात्मक दिशा में, नकारात्मक नीचे और) छोडा)।
    कंप्यूटर विंडो में पिक्सेल के लिए समन्वय प्रणाली, हालांकि, y- अक्ष के साथ
    उलट है। (0,0) सकारात्मक दिशा के साथ बाईं ओर शीर्ष पर क्षैतिज और लंबवत नीचे
    पाया जा सकता है।
  coordinate-system-simple-shapes-title: सरल आकृतियाँ
  coordinate-system-simple-shapes-p1x1: >-
    P5 के साथ आपके द्वारा देखे जाने वाले अधिकांश प्रोग्रामिंग उदाहरण प्रकृति में
    दृश्य हैं। इन उदाहरणों में, उनके मूल में, आकृतियाँ आरेखित करना और पिक्सेल
    सेट करना शामिल है। चलो चार आदिम आकृतियों को देखकर शुरू करते हैं।
  coordinate-system-simple-shapes-p2x1: >-
    प्रत्येक आकृति के लिए, हम स्वयं से पूछेंगे कि उस आकृति के स्थान और आकार (और
    बाद में रंग) को निर्दिष्ट करने के लिए कौन सी जानकारी आवश्यक है और जानें कि
    p5 उस जानकारी को प्राप्त करने की अपेक्षा करता है। नीचे दिए गए प्रत्येक चित्र
    में, हम 10 पिक्सेल की चौड़ाई और 10 पिक्सेल की ऊँचाई के साथ एक विंडो मानेंगे।
    यह विशेष रूप से वास्तविक नहीं है क्योंकि जब आप वास्तव में कोडिंग शुरू करते
    हैं, तो आप बहुत अधिक बड़ी खिड़कियों के साथ काम करने की संभावना करेंगे (10x10
    पिक्सेल स्क्रीन स्पेस के मुश्किल से कुछ मिलीमीटर हैं।) फिर भी प्रदर्शन
    प्रयोजनों के लिए, क्रम में छोटी संख्या के साथ काम करना अच्छा है। पिक्सेल को
    प्रस्तुत करें क्योंकि वे कोड के प्रत्येक पंक्ति के आंतरिक कामकाज को बेहतर
    ढंग से चित्रित करने के लिए ग्राफ पेपर (अभी के लिए) पर दिखाई दे सकते हैं।
  coordinate-system-simple-shapes-p3x1: 'A '
  coordinate-system-simple-shapes-p3x2: ' (बिंदु) आकृतियों का सबसे आसान और शुरू करने के लिए एक अच्छी जगह है। एक बिंदु खींचने के लिए, हमें केवल एक x और y समन्वय की आवश्यकता है।'
  coordinate-system-simple-shapes-p4x1: 'A '
  coordinate-system-simple-shapes-p4x2: ' लाइन बहुत मुश्किल नहीं है और बस दो बिंदुओं की आवश्यकता है: (X1, y1) और (x2, y2):'
  coordinate-system-simple-shapes-p5x1: 'एक बार जब हम एक '
  coordinate-system-simple-shapes-p5x2: ' (आयत) बनाने आए, चीजें थोड़ी और जटिल हो जाती हैं। P5 में, एक आयत आयत के शीर्ष बाएं कोने के लिए समन्वय द्वारा निर्दिष्ट किया गया है, साथ ही इसकी चौड़ाई और ऊंचाई भी।'
  coordinate-system-simple-shapes-p6x1: >-
    आयत बनाने का दूसरा तरीका चौड़ाई और ऊंचाई के साथ-साथ केंद्र बिंदु को
    निर्दिष्ट करना शामिल है। यदि हम इस विधि को पसंद करते हैं, तो हम पहले संकेत
    करते हैं कि हम आयत के लिए निर्देश से पहले
  coordinate-system-simple-shapes-p6x2: ' (केंद्र) मोड का उपयोग करना चाहते हैं।. ध्यान दें कि पी 5 केस-संवेदी है।'
  coordinate-system-simple-shapes-p7x1: >-
    अंत में, हम दो बिंदुओं (शीर्ष बाएं कोने और नीचे दाएं कोने) के साथ एक आयत भी
    खींच सकते हैं। यहां मोड
  coordinate-system-simple-shapes-p7x2: '  (कॉर्नर) है। ध्यान दें कि यह उदाहरण ऊपर दिए गए उदाहरण के समान स्क्रीन पर परिणाम देता है।'
  coordinate-system-simple-shapes-p8x1: 'एक बार जब हम एक आयत बनाने की अवधारणा के साथ सहज हो गए हैं, '
  coordinate-system-simple-shapes-p8x2: ' (दीर्घवृत्त ()) एक तस्वीर है।. वास्तव में, यह '
  coordinate-system-simple-shapes-p8x3: ' के समान है () इस अंतर के साथ कि एक दीर्घवृत्त खींचा जाता है जहां आयत का बाउंडिंग बॉक्स होगा। '
  coordinate-system-simple-shapes-p8x4: ' है '
  coordinate-system-simple-shapes-p8x5: ', ना की '
  coordinate-system-simple-shapes-p8x6: .
  coordinate-system-simple-shapes-p9x1: >-
    अब देखते हैं कि 200 से 200 के विंडो आयाम के साथ अधिक यथार्थवादी सेटिंग में
    आकृतियों के साथ कुछ कोड क्या हैं। विंडो की चौड़ाई और ऊंचाई को निर्दिष्ट करने
    के लिए createCanvas () फ़ंक्शन के उपयोग पर ध्यान दें।
  curves-description1: >-
    This tutorial is written by J David Eisenberg and ported by Sally Chen. If
    you see any errors or have comments, 
  curves-description2: ' please let us know.'
  curves-description3: 'This work is licensed under a '
  curves-description4: ' Creative Commons Attribution-NonCommercial-ShareAlinke 4.0 International License.'
  curves-p1x1: >-
    This short tutorial introduces you to the three types of curves in p5.js:
    arcs, spline curves, and Bézier curves.
  curves-arcs-title: ' Arcs '
  curves-arcs-p1x1: >-
    Arcs are the simplest curves to draw, it is defined an arc as a section of
    an ellipse. You call the function with these parameters:
  curves-arcs-p2x1: 'arc (x, y, w, h, start, stop, [mode])'
  curves-arcs-p3x1: >-
    The first four parameters (x,y,w,h) define the boundary box for your arc and
    the next two (start, stop), are the start and stop angles for the arc. These
    angles are given in radians and are measured clockwise with zero degrees
    pointing east and PI radians equals 180°.
  curves-spline-curves-title: Spline Curves
  curves-spline-curves-p1x1: >-
    Arcs are fine, but they’re plain. The next function, curve(), lets you draw
    curves that aren’t necessarily part of an arc. This function draws what is
    technically called a Rom-Catmull Spline. To draw the curve, you must specify
    the (x, y) coordinates of the points where the curve starts and ends. You
    must also specify two control points which determine the direction and
    amount of curvature. The first two and last two parameters are the control
    points of the curve. A call to curve() uses these parameters:
  curves-spline-curves-p2x1: 'curve (cpx1, cpy1, x1, y1, x2, y2, cpx2, cpy2);'
  curves-spline-curves-p3x1: How do the control points affect the way the curve looks?
  curves-spline-curves-p4x1: >-
    The tangent to the curve at the start point is parallel to the line between
    control point one and the end of the curve. The tangent to the curve at the
    end point is parallel to the line between the start point and control point
    2.
  curves-spline-curves-p5x1: >-
    The following diagram shows a curve and the points can be dragged to show
    how the control point affects the curve:
  curves-continuous-spline-curves-title: Continuous Spline Curves
  curves-continuous-spline-curves-p1x1: >-
    In isolation, a single curve() is not particularly appealing. To draw a
    continuous curve through several points, you are better off using the
    curveVertex() function. You can only use this function when you are creating
    a shape with the beginShape() and endShape() functions.In common usage,
    people use the first point of the curve as the first control point and the
    last point of the curve as the last control point.
  curves-bezier-curves-title: Bézier Curves
  curves-bezier-curves-p1x1: >-
    Though better than arcs, spline curves don’t seem to have those graceful,
    swooping curves that say “art.” For those, you need to draw Bézier curves
    with the bezier() function. As with spline curves, the bezier() function has
    eight parameters, but the order is different. The first two and last two
    parameters are the start and end points while middle  four points are the
    control points.
  curves-bezier-curves-p2x1: ' bezier(x1, y1, cpx1, cpy1, cpx2, cpy2, x2, y2); '
  curves-bezier-curves-p3x1: >-
    While it is difficult to visualize how the control points affect a curve(),
    it is slightly easier to see how the control points affect Bézier curves.
    Imagine two poles and several rubber bands. The poles connect the control
    points to the endpoints of the curve. A rubber band connects the tops of the
    poles. Two more rubber bands connect the midpoints of the poles to the
    midpoint of the first rubber band. One more rubber band connects their
    midpoints. The center of that last rubber band is tied to the curve. This
    diagram helps to explain, the points can be moved to change the curve.
  curves-continuous-bezier-curves-title: ' Continuous Bézier Curves'
  curves-continuous-bezier-curves-p1x1: >-
    Just as curveVertex() allows you to make continuous spline curves,
    bezierVertex() lets you make continuous Bézier curves. Again, you must be
    within a beginShape() / endShape() sequence. You must use vertex(startX,
    startY) to specify the starting anchor point of the curve. Subsequent points
    are specified with a call to:
  curves-continuous-bezier-curves-p2x1: 'bezierVertex(cpx1, cpy1, cpx2, cpy2, x, y);'
  curves-continuous-bezier-curves-p3x1: >-
    Here is a continuous Bézier curve, but it doesn’t join smoothly. In order to
    make two curves A and B smoothly continuous, the last control point of A,
    the last point of A, and the first control point of B have to be on a
    straight line.
  curves-summary-title: Summary
  curves-summary-li1: >-
    Use arc() when you need a segment of a circle or an ellipse. You can’t make
    continuous arcs or use them as part of a shape.
  curves-summary-li2: >-
    Use curve() when you need a small curve between two points. Use
    curveVertex() to make a continuous series of curves as part of a shape.
  curves-summary-li3: >-
    Use bezier() when you need long, smooth curves. Use bezierVertex() to make a
    continuous series of Bézier curves as part of a shape.
  teach-desc: 'Teach a p5 workshop or class, or create teaching materials!'
libraries:
  Libraries: लाइब्रेरी
  core-libraries: कोर लाइब्रेरी
  community-libraries: सामुदायिक लाइब्रेरी
  libraries-created-by: 'निर्माता:'
  p5.sound: >-
    p5.sound ऑडियो इनपुट, प्लेबैक, विश्लेषण और संश्लेषण सहित वेब ऑडियो
    कार्यक्षमता के साथ p5 का विस्तार करता है।
  asciiart: 'p5.asciiart p5js के लिए एक सरल और आसान छवि-से-ASCII कला कनवर्टर है। '
  p5.ble: >-
    एक जावास्क्रिप्ट लाइब्रेरी जो BLE उपकरणों और p5 स्केच के बीच संचार को सक्षम
    करता है।
  p5.bots: >-
    p5.bots के साथ आप ब्राउज़र के भीतर से अपने Arduino (या अन्य माइक्रोप्रोसेसर)
    के साथ बातचीत कर सकते हैं। स्केच चलाने के लिए सेंसर डेटा का उपयोग करें; एल ई
    डी, मोटर, और बहुत कुछ चलाने के लिए एक स्केच का उपयोग करें!
  p5.bezier: >-
    'एक पुस्तकालय असीमित बिंदुओं के साथ उच्च-डिग्री बेज़ियर वक्र बनाने में मदद
    करता है।'
  p5.clickable: 'p5.js के लिए इवेंट संचालित, उपयोग में आसान बटन लाइब्रेरी।'
  p5.cmyk.js: 'CMYK कलरस्पेस। '
  p5.collide2D: >-
    p5.collide2D p5.js के साथ 2D ज्यामिति के लिए टकराव का पता लगाने की गणना के
    लिए उपकरण प्रदान करता है।
  CO2Budget.js: >-
    यह पुस्तकालय p5 * js से जुड़े कोडरों, डिजाइनरों और कलाकारों के रचनात्मक
    समुदायों के  CO2-उलटी गिनती के विचार को खोलता है।.
  p5.createloop: 'कोड की एक पंक्ति में ध्वनि और GIF निर्यात के साथ एनीमेशन लूप बनाएं। '
  p5.dimensions: >-
    p5.dimensions किसी भी संख्या के आयामों में काम करने के लिए p5.js के वेक्टर
    फ़ंक्शन का विस्तार करता है।
  p5.EasyCam: >-
    जड़त्वीय पैन, ज़ूम और रोटेट के साथ सरल 3D कैमरा नियंत्रण। थॉमस डाइवाल्ड का
    प्रमुख योगदान।
  p5.experience: >-
    p5.js के लिए विस्तृत लाइब्रेरी जो कैनवास-आधारित वेब एप्लिकेशन बनाने के लिए
    अतिरिक्त ईवेंट-सुनने की कार्यक्षमता जोड़ती है।
  p5.func: >-
    p5.func एक p5 एक्सटेंशन है जो समय, आवृत्ति और स्थानिक डोमेन में फ़ंक्शन
    जनरेशन के लिए नई ऑब्जेक्ट और उपयोगिताओं को प्रदान करता है।
  p5.geolocation: >-
    p5.geolocation p5.js के लिए उपयोगकर्ता स्थानों को प्राप्त करने, देखने, गणना
    करने और जियोफेंसिंग के लिए तकनीक प्रदान करता है।
  p5.glitch: >-
    p5.glitch छवियों और बाइनरी फ़ाइलों को गड़बड़ाने के लिए p5.js का विस्तार करता
    है।
  p5.gibber: p5.gibber तेजी से संगीत अनुक्रमण और ऑडियो संश्लेषण क्षमता प्रदान करता है।
  grafica.js: >-
    grafica.js आपको अपने p5.js स्केच में सरल लेकिन अत्यधिक विन्यास योग्य 2D
    प्लॉट जोड़ने देता है।
  p5.gui: 'p5.gui आपके p5.js स्केच के लिए एक ग्राफिकल यूजर इंटरफेस बनाता है। '
  p5.j5: >-
    आरडिनो और अन्य माइक्रोकंट्रोलर्स के लिए पूर्ण Johnny-Five.io
    नोडबॉट्स/रोबोटिक्स लाइब्रेरी वेबसेरियल या  वेबयूएसबी के साथ सीधे ब्राउज़र
    में काम करने के लिए बनाई गई है।
  p5.localmessage: >-
    p5.localmessage आसान मल्टी-विंडो स्केचिंग के लिए स्थानीय रूप से एक स्केच से
    दूसरे में संदेश भेजने के लिए एक सरल इंटरफ़ेस प्रदान करता है!
  marching: 'वेक्टर रूपांतरण के लिए रेखापुंज, आइसोसर्फेस।'
  mappa: >-
    मप्पा स्थिर मानचित्रों, टाइल मानचित्रों और भू-डेटा के साथ काम करने के लिए
    उपकरणों का एक सेट प्रदान करता है। भौगोलिक स्थान-आधारित दृश्य अभ्यावेदन बनाते
    समय उपयोगी।
  ml5.js: >-
    ml5.js Tensorflow.js पर बनाता है और ब्राउज़र में मशीन लर्निंग एल्गोरिदम और
    मॉडल के लिए अनुकूल पहुँच प्रदान करता है।
  numero: p5.js के लिए एक सहयोगपूर्ण और सहज गणित पुस्तकालय |
  pdl.library: >-
    भौतिकी शिक्षण और सीखने के लिए इंटरेक्टिव आरेख बनाने के लिए कार्यों और
    कक्षाओं का एक सेट।
  p5play: >-
    p5play गेम और गेमेलिक एप्लिकेशन के लिए स्प्राइट, एनिमेशन, इनपुट और कोलिजन
    फंक्शन प्रदान करता है।
  p5.particle: >-
    कण और फव्वारा वस्तुओं का उपयोग डेटा-संचालित प्रभाव बनाने के लिए किया जा सकता
    है जो उपयोगकर्ता संरचनाओं या JSON इनपुट और उपयोगकर्ता-ड्रा फ़ंक्शन के माध्यम
    से परिभाषित होते हैं।
  p5.party: >-
    'p5.party आसानी से नेटवर्क वाले बहुउपयोगकर्ता गेम, ऐप्स और स्केच बनाने के
    लिए एक पुस्तकालय है।'
  p5.Polar: >-
    p5.Polar गणितीय सार प्रदान करता है जिससे सुंदर, बहुरूपदर्शक, रेडियल पैटर्न
    बनाना आसान हो जाता है।
  react-p5: यह लाइब्रेरी आपको p5 स्केच को अपने रिएक्ट ऐप में एकीकृत करने देती है।
  p5.recorder: रिकॉर्ड स्केच कैनवास और ऑडियो।
  p5.Riso: >-
    p5.Riso, Risograph मुद्रण के लिए उपयुक्त फ़ाइलें बनाने के लिए एक पुस्तकालय
    है। यह आपके रेखाचित्रों को बहु-रंगीन प्रिंटों में बदलने में मदद करता है।
  rita.js: >-
    RiTa.js जनरेटिव साहित्य के लिए प्राकृतिक भाषा प्रसंस्करण वस्तुओं का एक सेट
    प्रदान करता है।
  Rotating knobs: >-
    नॉब बनाएं जिन्हें आप कस्टम ग्राफ़िक्स के साथ घुमा सकते हैं और वैल्यू रेंज
    लौटा सकते हैं।
  p5.scenemanager: >-
    p5.SceneManager आपको कई राज्यों/दृश्यों के साथ रेखाचित्र बनाने में मदद करता
    है। प्रत्येक दृश्य मुख्य स्केच के भीतर एक स्केच की तरह है।
  p5.screenPosition: प्रोसेसिंग से P5js तक ScreenX और ScreenY कार्यक्षमता जोड़ता है।
  p5.scribble: >-
    स्केची लुक में 2D प्रिमिटिव ड्रा करें। मूल प्रसंस्करण पुस्तकालय के एक
    बंदरगाह के आधार पर, जेनेक वुल्सचलेगर द्वारा बनाया गया।
  p5.serialport: >-
    p5.serial उन उपकरणों के बीच कम्युनिकेशन सक्षम करता है जो ब्राउज़र में चल रहे
    सीरियल  (RS-232) और p5 स्केच का समर्थन करते हैं।
  Shape5: >-
    Shape5 उन प्राथमिक छात्रों के लिए एक 2D प्राइमरी लाइब्रेरी है जो पहली बार
    कोड करना सीख रहे हैं।
  p5.shape.js: >-
    P5.js ढांचे में और अधिक सरल आकृतियों को जोड़ने के लिए बनाया गया एक
    फ्रेमवर्क।
  P5.slides: 'p5.slides, p5.js में लिखा गया एक प्रेजेंटेशन प्लेटफॉर्म है।'
  p5snap: >-
    p5snap एक कमांड-लाइन इंटरफ़ेस है जो एक अंतराल पर p5 स्केच के स्नैपशॉट बनाता
    और सहेजता है|
  p5.speech: >-
    p5.speech वेब स्पीच और स्पीच रिकग्निशन एपीआई के लिए सरल, स्पष्ट पहुंच प्रदान
    करता है, जिससे स्केच के आसान निर्माण की अनुमति मिलती है जो बात कर सकते हैं
    और सुन सकते हैं।
  p5.start2d.js: 'px, mm, cm या इंच का उपयोग करके 2D स्थिर कला के लिए p5 एक्सटेंशन'
  p5.tiledmap: >-
    p5.tiledmap आपके रेखाचित्रों में मानचित्रों को शामिल करने के लिए आरेखण और
    सहायक कार्य प्रदान करता है।
  TiledPlay: >-
    javascript का उपयोग करके आसानी से 2D प्लेटफ़ॉर्मर गेम बनाने के लिए p5.js,
    p5.play.js  और p5.tiled.js की कार्यक्षमता को जोड़ने के लिए एक छोटी
    लाइब्रेरी।
  p5.touchgui: p5.js के लिए एक मल्टी-टच और माउस GUI लाइब्रेरी।
  tramontana: >-
    ट्रैमोंटाना इंटरएक्टिव वातावरण, इंटरेक्टिव स्पेस या पैमाने पर और अंतरिक्ष
    में सिर्फ प्रोटोटाइप अनुभव बनाने के लिए आसानी से कई उपकरणों (आईओएस,
    एंड्रॉइड, ट्रैमोंटाना बोर्ड, ...) का उपयोग करने के लिए एक मंच है।
  TurtleGFX: >-
    TurtleGFX javascript में टर्टल ग्राफ़िक्स के साथ कोड करने की अनुमति देता है।
    शिक्षा और रचनात्मक कोडिंग के लिए मददगार।
  p5.tween: >-
    p5.tween के साथ आप अपनी वस्तुओं और आकृतियों के लिए ट्विन के रूप में आसानी से
    एनिमेशन बना सकते हैं।
  vida: >-
    विडा एक साधारण पुस्तकालय है जो कैमरा (या वीडियो) आधारित गति पहचान और ब्लॉब
    ट्रैकिंग कार्यक्षमता को p5js में जोड़ता है।
  p5.voronoi: >-
    p5.voronoi आपके p5.js रेखाचित्रों में वोरोनोई आरेख बनाने और उनका उपयोग करने
    के लिए उपकरणों का एक सेट प्रदान करता है।
  p5.wasm: >-
    p5.wasm एक ऐडऑन लाइब्रेरी है जिसे Rust में लिखा गया है और वेबअस्मेबलि  में
    संकलित किया गया है जो p5.js में पाए जाने वाले सामान्य कार्यों को लागू करता
    है।
  p5.xr: p5 के साथ VR और AR रेखाचित्र बनाने के लिए एक पुस्तकालय|
  p5.3D: 'WebGL में 3D पाठ और छवियां। '
  WEBMIDI.js: p5 से MIDI संदेश आसानी से भेजें और प्राप्त करें।
  p5.buttons: '''एक पुस्तकालय जिसका उद्देश्य स्क्रिप्टिंग बटन को जटिल बनाना है।'''
  p5.button: >-
    'p5.js कैनवास में सीधे सरल या स्टाइल वाले बटनों को डिज़ाइन और प्रस्तुत करने
    के लिए छोटा एक फ़ंक्शन लाइब्रेरी।'
  p5.math.js: >-
    जावास्क्रिप्ट के गणितीय कार्यों को सरल मानव भाषा में परिवर्तित कर दिया गया
    है ताकि वे वास्तव में जल्दी समझ सकें।
  p5LiveMedia: 'रीयल टाइम ऑडियो, वीडियो, कैनवस और डेटा शेयरिंग।'
  P5.Create: >-
    p5.create एक पुस्तकालय है जो कुशल गेम निर्माण के लिए डिज़ाइन किए गए सेव,
    एनीमेशन,  टक्कर और टैग फ़ंक्शन प्रदान करता है.
  p5.quadrille.js: p5.js quadrille library.
  p5.animS: >-
    p5.animS अपनी ड्राइंग प्रक्रियाओं को प्रस्तुत करके p5.js आकृतियों को एनिमेट
    करता है।
  I_AM_UI: एक यूजरइंटरफेस लाइब्रेरी
  simple.js: युवा और नए कोडर के लिए सहायक फंक्शन और डिफ़ॉल्टस।
  p5.timer: >-
    यह लाइब्रेरी काउंटडाउन, वन-शॉट टाइमर, बीता हुआ % समय जैसे एसिंक्रोनस टाइमिंग
    फ़ंक्शन करती है और millis()
     फ़ंक्शन और अन्य संबंधित गणनाओं को इनकैप्सुलेट करती है जो अक्सर आपके कोड को रोक देती हैं।
  c2.js: >-
    c2.js कम्प्यूटेशनल ज्यामिति, भौतिकी सिमुलेशन, विकासवादी एल्गोरिथ्म और अन्य
    मॉड्यूल पर आधारित रचनात्मक कोडिंग के लिए एक Javascript पुस्तकालय है।
  Concave Hull: 2D space में बिंदुओं के एक सेट से अवतल हल की गणना करें|
  p5.joystick: भौतिक जॉयस्टिक से जुड़ें और खेलें
  p5.webserial: >-
    "वेब सीरियल एपीआई (क्रोम और एज पर उपलब्ध) पर आधारित ब्राउज़र के भीतर से 
    सीरियल उपकरणों के साथ बातचीत करने के लिए एक पुस्तकालय"|
  p5.pattern: p5.js के लिए एक पैटर्न ड्राइंग लाइब्रेरी।
  p5.jacdac: p5js के लिए प्लग-एंड-प्ले माइक्रो-कंट्रोलर।
  p5.PatGrad: p5.PatGrad आपके रेखाचित्रों में पैटर्न और ग्रेडिएंट जोड़ता है।
  p5.projection: वास्तविक दुनिया की सतहों पर रेखाचित्रों का आसान प्रक्षेपण मानचित्रण।
  p5.filterRenderer: >-
    सटीक धुंधलेपन और छाया के साथ चित्र बनाने के लिए p5.js वेबजिऐल मोड के लिए एक
    लाइब्रेरी।
  p5.capture: >-
    "p5.capture विभिन्न स्वरूपों (webm, gif, mp4, png, jpg, और webp) में p5.js
    एनिमेशन और आउटपुट वीडियो फ़ाइलों को आसानी से रिकॉर्ड करने के लिए एक सरल GUI
    प्रदान करता है।"
  p5.input: p5.js के लिए अधिक महत्वपूर्ण समर्थन जोड़ता है।
  p5.web-serial: >-
    आरडिनो जैसे उपकरणों तक पहुँचने के लिए वेब सीरियल API का उपयोग करने के लिए एक
    p5.js लाइब्रेरी, किसी सेटअप की आवश्यकता नहीं है।
  p5.wasm.core: A web assembly core for p5.js.
  p5.videorecorder: अपने कैनवास को ऑडियो के साथ एक वीडियो फ़ाइल के रूप में रिकॉर्ड करें
  p5.mapper: >-
    p5.mapper, p5.js के लिए एक प्रोजेक्शन मैपिंग लाइब्रेरी है।  यह लाइब्रेरी
    इंटरैक्टिव, एल्गोरिथम स्केच को कोड और कीस्टोन करना आसान बनाती है।
  p5.teach: >-
    p5.js के लिए एक शुरुआती अनुकूल गणित एनीमेशन लाइब्रेरी। निक मैकइंटायर और
    जितिन केएस की सलाह से बनाया गया।
  p5.fab: p5.fab p5.js से डिजिटल निर्माण मशीनों को नियंत्रित करता है।
  p5.utils: >-
    छात्रों की मदद करने के उद्देश्य से मेरी रचनात्मक कोडिंग कक्षा के लिए
    उपयोगिताओं और अतिरिक्त सुविधाओं का एक सेट।
  using-a-library-title: पुस्तकालय का उपयोग करना
  using-a-library1: >-
    एक p5.js पुस्तकालय कोई भी JavaScript कोड हो सकता है जो p5.js मुख्य
    कार्यक्षमता को बढ़ाता या जोड़ता है। पुस्तकालयों की दो श्रेणियां हैं। कोर
    लाइब्रेरी (
  using-a-library3: >-
    ) p5.js वितरण का हिस्सा हैं, जबकि योगदान की गई लाइब्रेरी p5.js समुदाय के
    सदस्यों द्वारा विकसित, स्वामित्व और रखरखाव की जाती हैं।
  using-a-library4: >-
    अपने स्केच में लाइब्रेरी शामिल करने के लिए, इसे p5.js. में लिंक करने के बाद
    अपनी HTML फ़ाइल में लिंक करें। उदाहरण के लिए एक HTML फ़ाइल कुछ इस तरह दिख
    सकती है
  create-your-own-title: खुद से बनाए
  create-your-own1: >-
    p5.js दूसरों द्वारा योगदान किए गए लाइब्रेरी का स्वागत करता है! एक लाइब्रेरी
    बनाने के तरीके के बारे में अधिक विशिष्टताओं के लिए
  create-your-own2: लाइब्रेरी शिक्षण
  create-your-own3: की जाँच करें।
  create-your-own4: >-
    यदि आपने एक लाइब्रेरी बनाई है और इसे इस पृष्ठ पर शामिल करना चाहते हैं, तो इस
    फॉर्म को जमा करें!
community:
  community-title: समुदाय
  community-statement-title: p5.js समुदाय वक्तव्य
  community-statement1: >-
    p5.js प्रौद्योगिकी के साथ कला और डिजाइन के निर्माण की खोज में रुचि रखने वाला
    समुदाय है।
  community-statement2: >-
    हम एक समुदाय हैं, और हर लिंग के लोगों के साथ एकजुटता में हैं पहचान और
    अभिव्यक्ति, यौन अभिविन्यास, जाति, जातीयता, भाषा, न्यूरो-प्रकार, आकार,
    क्षमता, वर्ग, धर्म, संस्कृति, उपसंस्कृति, राजनीतिक राय, आयु, कौशल स्तर,
    व्यवसाय और पृष्ठभूमि। हम मानते हैं कि हर किसी के पास सक्रिय रूप से समय,
    वित्तीय साधन या क्षमता नहीं है भाग लेते हैं, लेकिन हम सभी प्रकार की भागीदारी
    को पहचानते हैं और प्रोत्साहित करते हैं। हम पहुंच और सशक्तिकरण को सुगम और
    बढ़ावा देना। हम सब शिक्षार्थी हैं।
  community-statement3: >-
    हमें ये हैशटैग पसंद हैं: #noCodeSnobs (क्योंकि हम समुदाय को महत्व देते हैं
    दक्षता), #newKidLove (क्योंकि हम सभी ने कहीं न कहीं शुरुआत की है),
    #unassumeCore (क्योंकि हम ज्ञान को ग्रहण नहीं करते हैं), और
    #BlackLivesMatter (क्योंकि हम समानता में विश्वास करते हैं)।
  in-practice-title: 'प्रयोग में:'
  in-practice1: >-
    हम कोड स्नोब नहीं हैं। हम यह नहीं मानते हैं कि किसी के पास पूर्व ज्ञान या
    ऐसी चीजें हैं जिन्हें जानने की जरूरत है।
  in-practice2: >-
    हम प्रतिक्रिया के अनुरोधों के साथ सक्रिय रूप से जुड़ने पर जोर देते हैं, चाहे
    उनकी जटिलता कुछ भी हो।
  in-practice3: >-
    हम नवागंतुकों का स्वागत करते हैं और दूसरों की शिक्षा को प्राथमिकता देते हैं।
    हम प्रयास करते हैं किसी नवागंतुक के उत्साह के साथ सभी कार्यों को पूरा करें।
    क्योंकि हम मानते हैं कि नवागंतुक इस प्रयास में उतने ही मूल्यवान हैं जितने कि
    विशेषज्ञ।
  in-practice4: >-
    हम लगातार कई प्रकार के योगदानों को सक्रिय रूप से पहचानने और मान्य करने का
    प्रयास करते हैं।
  in-practice5: हम हमेशा मदद या मार्गदर्शन देने के लिए तैयार हैं।
  in-times-conflict-title: 'संघर्ष के समय में:'
  in-times-conflict1: हम सुनते हैं।
  in-times-conflict2: हम दूसरे की भावनाओं को स्वीकार करते हुए स्पष्ट रूप से संवाद करते हैं।
  in-times-conflict3: >-
    हम स्वीकार करते हैं कि हम गलत हैं, माफी माँगते हैं, और अपने कार्यों के लिए
    जिम्मेदारी स्वीकार करते हैं।
  in-times-conflict4: हम लगातार खुद को और अपने समुदाय को बेहतर बनाने की कोशिश कर रहे हैं।
  in-times-conflict5: हम अपने समुदाय को सम्मानजनक और खुले रखते हैं।
  in-times-conflict6: हम सभी को सुना हुआ महसूस कराते हैं।
  in-times-conflict7: हम अपनी बातचीत में सावधान और दयालु हैं।
  in-the-future-title: 'भविष्य में:'
  in-the-future1: भविष्य आज है।
  notes-title: नोट्स
  notes1: 'कृपया हमारे '
  notes2: p5.js Code of Conduct
  notes3: ' पर भी जाएं। P5.js समुदाय कथन एक '
  notes4: Creative Commons license
  notes5: ' के तहत लाइसेंस प्राप्त है। एट्रिब्यूशन के साथ साझा करने और रीमिक्स करने के लिए स्वतंत्र महसूस करें। '
  contribute-title: योगदान
  contribute1: हमारा समुदाय हमेशा उत्साही लोगों की तलाश में रहता है जो हर तरह से मदद करें।
  develop-title: विकास करना।
  develop1: GitHub
  develop2: ' मुख्य स्थान है जहां कोड एकत्र किया जाता है, मुद्दों का दस्तावेजीकरण किया जाता है, और कोड के बारे में चर्चा की जाती है। आरंभ करने के लिए '
  develop3: ' विकास शिक्षण'
  develop4: ' देखें, या '
  develop5: अपना स्वयं का लाइब्रेरी बनाएं।
  document-title: प्रलेखन।
  document1: ' सभी को प्रलेखन पसंद है। मदद की जरूरत है '
  document2: उदाहरणों को पोर्ट करने
  document3: ', और'
  document4: ' प्रलेखन को जोड़ने'
  document5: ', और शिक्षण बनाने में।'
  teach-title: सिखाओ।
  teach1: ' एक कार्यशाला, एक कक्षा, एक दोस्त, एक सहयोगी को पढ़ाएं! ट्विटर पर @ p5xjs टैग करें और आप जो कर रहे हैं उसे साझा करने के लिए हम पूरी कोशिश करेंगे।'
  create-title: सर्जन करना।
  create1: ' p5.js आपके रचनात्मक और अद्भुत काम को सामने वाले पृष्ठ पर दिखाने और अन्य लोगों को प्रेरित करने के लिए डिजाइनरों, कलाकारों, कोडर्स, प्रोग्रामर की तलाश में है। अपना काम '
  create2: hello@p5js.org
  create3: पर भेजें।
  donate-title: दान देना।
  donate1: ' p5.js स्वतंत्र और खुला स्रोत है और कलाकारों द्वारा बनाया गया है। '
  donate2: प्रोसेसिंग फाउंडेशन
  donate3: ' को दान के माध्यम से p5.js के विकास में सहायता करें। '
  contributors-conference-title: p5.js योगदानकर्ता सम्मेलन
  contributors-conference1: >-
    जबकि अधिकांश कार्य ऑनलाइन होते है, हम IRL भी आयोजित करते हैं। हमने
    पिट्सबर्ग, पेंसिल्वेनिया में 
  contributors-conference2: >-
    कार्नेगी मेलन विश्वविद्यालय में योगदानकर्ताओं के दो सम्मेलन आयोजित किए।
    कलाकार, डिजाइनर, डेवलपर्स, शिक्षक p5.js परियोजना को आगे बढ़ाने के लिए एक साथ
    शामिल हुए।
  participants-title: प्रतिभागी
  support-title: 'सहयोग '
  support1: हमारा योगदान सम्मेलन
  support2: >-
    कार्नेगी मेलन विश्वविद्यालय में हुआ, जो कला, विज्ञान, प्रौद्योगिकी और
    संस्कृति के चौराहों पर एक अकादमिक प्रयोगशाला है।
  support3: यह अयोजन
  support4: के अनुदान से और
  support5: और
  support6: 'धन्यवाद! '
  mailing-list-title: मेलिंग सूची
  mailing-list-1: >-
    प्रोसेसिंग फाउंडेशन से कभी-कभार अपडेट प्राप्त करने के लिए अपना ईमेल पता दर्ज
    करें।
  2015contributors-conference-title: योगदानकर्ता सम्मेलन 2015
  2015contributors-conference-date: 25-31 मई
  2015contributors-conference1: लगभग 30 प्रतिभागियों के एक समूह ने एक सप्ताह बिताया
  2015contributors-conference2: >-
    , p5.js प्रोग्रामिंग वातावरण के कोड, दस्तावेज़ीकरण और सामुदायिक आउटरीच टूल
    को आगे बढ़ाया। प्रतिभागी हांगकांग, सिएटल, लॉस एंजिल्स, बोस्टन और न्यूयॉर्क
    जैसे दूर से आए थे। अधिकांश रचनात्मक प्रौद्योगिकी, इंटरेक्शन डिज़ाइन और
    न्यू-मीडिया कला के क्षेत्र में काम कर रहे पेशेवर थे, लेकिन समूह में कार्नेगी
    मेलॉन के स्कूल ऑफ आर्ट एंड आर्किटेक्चर के आधा दर्जन स्नातक और स्नातक छात्र
    भी शामिल थे।
  2015contributors-conference3: तस्वीरें तायून चोई द्वारा
  2015contributors-conference-diversity-title: विविधता
  2015contributors-conference-diversity1: >-
    तकनीकी विकास के साथ-साथ, इस सम्मेलन का एक मुख्य फोकस आउटरीच, समुदाय और
    विविधता थी। सम्मेलन एक पैनल के साथ शुरू हुआ
  2015contributors-conference-diversity2: 'विविधता: रेस, जेंडर, एबिलिटी पर सात आवाज़ें, FLOSS और इंटरनेट के लिए क्लास'
  2015contributors-conference-diversity3: '। '
  2015contributors-conference-diversity4: Organized by
  2015contributors-conference-diversity5: तथा
  2015contributors-conference-diversity6: ' के द्वारा आयोजित, '
  2015contributors-conference-diversity7: >-
    यह पैनल मंगलवार 25 मई 2015 को कार्नेगी मेलन विश्वविद्यालय में क्रेगे सभागार
    में हुआ। वक्ताओं में शामिल
  2015contributors-conference-diversity8: तथा
  2015contributors-conference-diversity9: ।
  2015cc_1: >-
    प्रतिभागियों के विविध समूह मुस्कुराते हैं और अपने हाथों से एक पी 5 संकेत
    बनाते हैं
  2015cc_2: >-
    हरे लॉन में प्रतिभागियों ने छलांग लगाई, मुस्कुराए और खुशी से हवा में हाथ
    हिलाया।
  2015cc_3: महिला अपने लैपटॉप से ​​p5.js समुदाय का बयान प्रस्तुत करती है
  2015cc_4: >-
    महिला स्पष्ट रूप से एक माइक्रोफोन में बात करती है जबकि दो पुरुष सहयोगी दिखते
    हैं
  2015cc_5: प्रतिभागी मुस्कुराते हैं और एक प्रस्तुति सुनते हैं
  2015cc_6: तीन महिला छात्रों के लिए माइक्रोफ़ोन में महिला p5.js के बारे में पढ़ती है
  2015cc_7: >-
    प्रतिभागी एक व्हाइटबोर्ड के चारों ओर एक सर्कल में बैठते हैं, जिस पर स्टिक
    नोट्स होते हैं, जबकि एक महिला छात्र माइक्रोफोन में बोलती है
  2015cc_8: >-
    प्रतिभागी एक दूसरे के लैपटॉप को देखते हुए टेबल के चारों ओर बैठते हैं और कोड
    की तुलना करते हैं
  2015cc_9: >-
    विभिन्न रंगीन स्टिक नोट्स और प्रोग्रामिंग के बारे में लिखित नोट्स के साथ
    व्हाइटबोर्ड
  2015cc_10: >-
    विभिन्न कौशल सेटों के मूल्य निर्धारण के बारे में माइक्रोफोन में बोलने वाली
    महिला, जबकि लैपटॉप वाले प्रतिभागियों का एक समूह कक्षा में उसके पावरपॉइंट को
    देखता है
  2015cc_11: >-
    महिला एक सभागार में पोडियम पर बोलती है जबकि तीन प्रतिभागी मंच पर बैठते हैं
    और एक अन्य तीन मंच स्क्रीन पर लंघन कर रहे हैं
  2015cc_12: अपने लैपटॉप पर काम करने वाले प्रतिभागियों के साथ एक कक्षा का ओवरहेड दृश्य
  2015cc_13: एक सर्कल में पांच लोगों की चर्चा
  2015cc_14: एक सर्कल में पांच लोग अपने लैपटॉप के साथ अपने नोट्स साझा करते हैं
  2015cc_15: प्रतिभागियों के एक समूह के लिए एक माइक्रोफोन के साथ कक्षा में आदमी
  2019contributors-conference-title: योगदानकर्ता सम्मेलन 2019
  2019contributors-conference-date: 13-18 अगस्त
  2019contributors-conference1: 35 प्रतिभागियों का एक अंतःविषय समूह में एकत्र हुए
  2019contributors-conference2: >-
    कोड, दस्तावेज़ीकरण, और सामुदायिक आउटरीच टूल को आगे बढ़ाते हुए एकत्र हुआ और
    p5.js प्रोग्रामिंग वातावरण के वर्तमान परिदृश्य की खोज। रचनात्मक के क्षेत्र
    में प्रतिभागियों की एक विविध श्रेणी का मिश्रण प्रौद्योगिकी, बातचीत डिजाइन,
    और नई मीडिया कला, सम्मेलन का उद्देश्य था बहु-विषयक लेंस के माध्यम से संवाद
    को बढ़ावा देना। कामकाजी समूह कई विषय क्षेत्रों पर ध्यान केंद्रित: पहुंच;
    प्रदर्शन में संगीत और कोड; क्रिएटिव टेक का लैंडस्केप; और अंतर्राष्ट्रीयकरण।
  2019contributors-conference3: Qianqian Ye द्वारा वीडियो
  2019contributors-conference4: जैकलीन जॉनसन द्वारा तस्वीरें
  outputs: आउटपुट
  output1: >-
    । P5.js. के लिए अत्यधिक लचीले त्रिभुज, वर्ग, षट्भुज और अष्टकोणीय परिंदों का
    क्रियान्वयन एरेन डेवी द्वारा बनाया गया।
  output2: >-
    । मल्टी-डिवाइस, मल्टीप्लेयर गेम के निर्माण के लिए टेम्प्लेट फ़ाइलों का एक
    सेट जहां कई क्लाइंट एक निर्दिष्ट होस्ट पेज से जुड़ सकते हैं। L05 द्वारा
    बनाया गया।
  output3: Experiments using
  output3-1: ' के साथ प्रयोग, सॉफ्टकॉमपाइल के शुरुआती कार्यान्वयन का परीक्षण, ओएससी इंटरफेसिंग और मिडी सेटअप के लिए डेमो के साथ जुड़ाव। एक p5.js सहयोगी लाइव-कोडिंग vj वातावरण! टेड डेविस द्वारा बनाया गया।'
  output4: >-
    अमेरिकी कलाकार के नेतृत्व में वर्चुअल स्पेस में ब्लैकनेस एंड जेंडर पर एक
    पैनल, जिसमें श्वेनी माइकेलैन खोखला और लाजुन मैकमिलियन थे।
  output5: एवरेस्ट पिपकिन और जॉन चैंबर्स के नेतृत्व में कार्यशालाएं।
  output6: 'A prototype of a '
  output6-1: 'p5.js. के लिए नोटबुक इंटरफ़ेस '
  output6-2: का एक प्रोटोटाइप एलीसन पैरिश द्वारा बनाया गया।
  output7: >-
    स्टालजिया ग्रिग, लाजुन मैकमिलियन, आतिश भाटिया और जॉन चेम्बर्स द्वारा नई कला
    स्थापना।
  output8: p5.js वैश्विक योगदानकर्ता का टूलकिट।
  output8-1: >-
    आरोन मोन्टोया-मोरागा, केनेथ लिम, गुइलेर्मो मोंटेकिनो, कियानकियन ये, डोरोथी
    आर सैंटोस और यशेंग शी द्वारा बनाया गया।
  output9: अहिंसक रचनात्मक कोड कैसे लिखें।
  output9-1: ओलिविया रॉस के नेतृत्व में एक ज़ीन।
  output10: >-
    पहुँच के लिए p5.js वेबसाइट का एक ओवरहाल। स्क्रीन रीडर पहुंच के लिए अद्यतन और
    होम, डाउनलोड, आरंभ करे और संदर्भ पृष्ठ में सुधार करना। क्लेयर किर्नी-वोल्पे,
    सिना बहराम, केट होलेनबाख, ओलिविया रॉस, लुइस मोरालेस-नवारो, लॉरेन मैकार्थी और
    एवलिन मासो के योगदान के साथ।
  output11: >-
    लुइसा परेरा, जून शर्न चैन, शेफाली नायक, सोना ली, टेड डेविस और कार्लोस
    गार्सिया द्वारा सहयोगपूर्ण प्रदर्शन।
  output12: नताली ब्रिगिंस्की का एक प्रदर्शन।
  output13: >-
    P5 संपादक के लिए p5.js लाइब्रेरी सिस्टम का एक डिज़ाइन। Cassie Tarakajian और
    Luca Damasco द्वारा बनाया गया।
  output14: >-
    P5 को अन्य लाइब्रेरीज से जोड़ने वाला प्रोटोटाइप। एलेक्स यिक्सुआन जू और लॉरेन
    वैली द्वारा बनाया गया।
  output15: गोलान लेविन के नेतृत्व में एक समापन कैम्प सर्कल।
  2019cc_1: समूह में प्रस्तुति देने वाले पोडियम पर आदमी
  2019cc_2: दोपहर के भोजन और एक चर्चा में एक लंबी मेज पर बैठे प्रतिभागी
  2019cc_3: >-
    एक कक्षा में प्रतिभागी, कुछ अपने लैपटॉप पर काम कर रहे हैं, अन्य बात कर रहे
    हैं
  2019cc_4: अपने लैपटॉप पर काम करने वाले प्रतिभागियों की कक्षा
  2019cc_5: एक अंधेरे कक्षा में एक बैठक में भाग लेने वाले
  2019cc_6: विविध प्रतिभागियों की कक्षा में प्रस्तुति देती महिला
  2019cc_7: एक व्यस्त कक्षा में बातचीत करने वाले प्रतिभागी
  2019cc_8: एक कक्षा में साथी प्रतिभागियों के साथ बोलने वाली माइक्रोफोन वाली महिला
  2019cc_9: >-
    प्रतिभागी अनुमानित पाठ के सामने पोडियम पर डेटा को अज्ञात करने की समस्या के
    बारे में बोलता है
  2019cc_10: >-
    P5.js पाठ के सामने साथी प्रतिभागियों से बात करने वाले माइक्रोफोन के साथ एक
    व्यक्ति जो पहुंच बढ़ाने के अलावा कोई नई सुविधा नहीं जोड़ेंगे
  2019cc_11: साथी प्रतिभागियों से बात करते माइक्रोफोन में बोलती महिला
  2019cc_12: साथी प्रतिभागियों से बात करने वाला एक माइक्रोफोन
  2019cc_13: प्रतिभागी एक कक्षा में वक्ताओं की ओर ध्यान से सुनते हैं
  2019cc_14: एक वक्ता का सामना करने वाले प्रतिभागियों का क्लासरूम सुनते हैं
  2019cc_15: >-
    उसके पीछे के प्रक्षेपण में पाठ पवित्र सीमाओं के साथ साथी प्रतिभागियों के साथ
    बोलने वाली माइक्रोफोन
  2019cc_16: >-
    3D की छवि वाले लोगों के एक पैनल को सुनने वाले प्रतिभागियों का ओवरहेड दृश्य
    इस पर प्रस्तुत किया गया है
  2019cc_17: >-
    प्रतिभागी अपने लैपटॉप के साथ एक मेज के चारों ओर बैठते हैं और एक स्क्रीन पर
    कोड का निरीक्षण करते हैं
  2019cc_18: एक आदमकद टेडी बियर के बगल में बैठी महिला अपने लैपटॉप पर काम करती है
  2019cc_19: मुस्कुराते हुए बाहर खड़े प्रतिभागी
  2019cc_20: एक वार्तालाप में चार प्रतिभागी खड़े होते हैं
  2019cc_21: दोपहर के भोजन के साथ बाहर बैठे प्रतिभागी
  2019cc_22: >-
    एक बड़े यू आकार की मेज के चारों ओर बैठे प्रतिभागी कक्षा के सामने की ओर देखते
    हैं
  2019cc_23: कक्षा में सामने बैठा आदमी ऊर्जावान ढंग से माइक्रोफोन में बोल रहा है
  2019cc_24: प्रतिभागियों के समूह फोटो हवा में अपने हाथों से उत्साह से मुस्कुराते हुए
  2019cc_25: लोगों के समूह चार एलसीडी मॉनिटर से बने कैम्प फायर के आसपास बैठते हैं।
  p5js-community-event-title: p5.js कम्युनिटी कार्यक्रम
  2022-p5js-access-day-title: p5.js Access Day 2022
  2022-p5js-access-day-date: May 21
  2022-p5js-access-day-organizer: Organizer and curator
  2022-p5js-access-day-coordinator: Event Coordinator and Video Producer
  2022-p5js-access-day-description: >-
    The p5.js Access Day is a virtual conference to talk about access in 
    open-source software for the arts (OSSTA) and greater issues beyond the
    software.  The day-long online event features four themed-sessions —
    Critical Web  Accessibility, Disability Arts, Access & Community Building,
    and Access  via Translation. It provides space for contributors of p5.js and
    experienced  practitioners from outside OSSTA projects to share their
    knowledge, perspectives,  and dreams for building greater access to
    technical and arts spaces.  
  2022-p5js-access-day-recap-video: p5.js Access Day 2022 Recap Video
  2022-p5js-access-day-recap-video-asl: p5.js Access Day 2022 Recap Video with ASL Interpretation
  2022-p5js-access-day-moderator: Moderator
  2022-p5js-access-day-speakers: Speakers
  2022-p5js-access-day-session-0: Event Opening
  2022-p5js-access-day-session-1: Critical Web Accessibility
  2022-p5js-access-day-session-2: Disability Arts
  2022-p5js-access-day-session-3: Access & Community Building
  2022-p5js-access-day-session-4: Access via Translation
  2022-p5js-access-day-session-5: Event Closing
  2022-p5js-access-day-production: Event Production
  2022-p5js-access-day-advisor: Event Advisor
  2022-p5js-access-day-asl: Live ASL Interpretation
  2022-p5js-access-day-designer: Graphic Designer
  2022-p5js-access-day-tech-support: Live Event Tech Support
  2022-p5js-access-day-transcriber: Closed Captioning Transcription Support
  2022-p5js-access-day-asl-support: Live ASL Support
books:
  books-title: पुस्तकें
  book-1-title: p5.js . के साथ शुरुआत करना
  book-1-authors: 'लॉरेन मैकार्थी, केसी रियास और बेन फ्राई। ताइयून चोई द्वारा चित्रण।'
  book-1-publisher: 'अक्टूबर 2015 को प्रकाशित, मेकर मीडिया।'
  book-1-pages: 246 पृष्ठ।
  book-1-type: पेपरबैक।
  book-1-description: >-
    प्रमुख p5.js डेवलपर और प्रसंस्करण के संस्थापकों द्वारा लिखित, यह पुस्तक आज
    के वेब की रचनात्मक संभावनाओं का परिचय प्रदान करती है, जावास्क्रिप्ट और
    एचटीएमएल का उपयोग करना।
  book-1-order-a: O'Reilly . से प्रिंट/ईबुक ऑर्डर करें
  book-1-order-b: अमेज़न से ऑर्डर करें
  book-2-title: p5.js का परिचय (स्पेनिश संस्करण)
  book-2-authors: >-
    लॉरेन मैकार्थी, केसी रियास और बेन फ्राई। एरोनो द्वारा अनुवादित
    मोंटोया-मोरागा। Ilustraciones de Taeyoon Choi।"
  book-2-publisher: 'प्रकाशित 2018, प्रोसेसिंग फाउंडेशन, इंक।'
  book-2-pages: 246 पृष्ठ।
  book-2-type: मुलायम आवरण।
  book-2-description: |-
    प्रमुख p5.js डेवलपर और प्रसंस्करण के संस्थापकों द्वारा लिखित, यह
     पुस्तक आज के वेब की रचनात्मक संभावनाओं का परिचय प्रदान करती है,
     जावास्क्रिप्ट और एचटीएमएल का उपयोग करना।
  book-2-order-a: प्रोसेसिंग फाउंडेशन प्रेस से पीडीएफ ऑर्डर करें
  book-2-order-b: Amazon से भौतिक संस्करण ऑर्डर करें
  book-3-title: जनरेटिव डिजाइन
  book-3-authors: 'बेनेडिक्ट ग्रॉस, हार्टमुट बोहनेकर, जूलिया लाउब और क्लॉडियस लेज़ेरोनी।'
  book-3-publisher: >-
    30 अक्टूबर, 2018 को प्रकाशित, प्रिंसटन आर्किटेक्चरल प्रेस; पुनर्मुद्रण
    संस्करण।
  book-3-pages: 255 पेज।
  book-3-type: पेपरबैक।
  book-3-description: >-
    p5.js, कलाकारों और निर्माताओं में जावास्क्रिप्ट जैसी सरल भाषाओं का उपयोग
    करके इंटरैक्टिव टाइपोग्राफी और टेक्सटाइल से लेकर 3डी-प्रिंटेड तक सब कुछ बना
    सकते हैं जटिल और सुरुचिपूर्ण इन्फोग्राफिक्स के लिए फर्नीचर।
  book-3-order-a: प्रिंसटन आर्किटेक्चरल प्रेस से आदेश
  book-3-order-b: अमेज़न से ऑर्डर करें
  book-4-title: जनरेटिव गेस्टाल्टुंग (जर्मन संस्करण)
  book-4-authors: 'बेनेडिक्ट ग्रॉस, हार्टमुट बोहनेकर, जूलिया लाउब और क्लॉडियस लेज़ेरोनी।'
  book-4-publisher: '1 मार्च, 2018 को प्रकाशित, श्मिट हरमन वेरलाग।'
  book-4-pages: 256 पृष्ठ।
  book-4-type: हार्डकवर।
  book-4-description: >-
    p5.js, कलाकारों और निर्माताओं में जावास्क्रिप्ट जैसी सरल भाषाओं का उपयोग
    करके इंटरैक्टिव टाइपोग्राफी और टेक्सटाइल से लेकर 3डी-प्रिंटेड तक सब कुछ बना
    सकते हैं जटिल और सुरुचिपूर्ण इन्फोग्राफिक्स के लिए फर्नीचर।
  book-4-order-a: वेरलाग हरमन श्मिट से आदेश
  book-4-order-b: अमेज़न से ऑर्डर करें
  book-5-title: p5.js के साथ जावास्क्रिप्ट सीखें
  book-5-authors: इंजिन अर्सलान
  book-5-publisher: 'प्रकाशित 2018, एप्रेस।'
  book-5-pages: 217 पृष्ठ।
  book-5-type: पेपरबैक
  book-5-description: >-
    का उपयोग करके अत्यधिक आकर्षक और दृश्य तरीके से शुरू से कोडिंग सीखें
    प्रोग्रामिंग लाइब्रेरी p5.js के साथ अत्यधिक लोकप्रिय जावास्क्रिप्ट। कौशल आप
    इस पुस्तक से प्राप्त होने वाले बहुत से असंख्य को अत्यधिक हस्तांतरणीय हैं
    उद्योगों और वेब अनुप्रयोगों के निर्माण के लिए इस्तेमाल किया जा सकता है,
    प्रोग्राम करने योग्य रोबोट, या जनरेटिव आर्ट।
  book-5-order-a: अप्रेस से आदेश Order
  book-5-order-b: अमेज़न से ऑर्डर करें
  book-6-title: 'एस्थेटिक प्रोग्रामिंग: ए हैंडबुक ऑफ सॉफ्टवेयर स्टडीज'
  book-6-authors: 'विनी सून, ज्योफ कॉक्स।'
  book-6-publisher: 'प्रकाशित 2020, ओपन ह्यूमैनिटीज प्रेस।'
  book-6-pages: 298 पृष्ठ।
  book-6-type: हार्डकवर
  book-6-description: >-
    p5.js का उपयोग करते हुए, यह पुस्तक रिफ्लेक्टिव अभ्यास का परिचय और प्रदर्शन
    करती है
     सौंदर्य प्रोग्रामिंग की, एक तरह से कार्यक्रम के लिए सीखने के साथ संलग्न
     मौजूदा तकनीकी वस्तुओं और प्रतिमानों को समझें और सवाल करें,
     और व्यापक पारिस्थितिक-सामाजिक-तकनीकी प्रणालियों को पुन: प्रोग्राम करने की क्षमता का पता लगाने के लिए।
  book-6-order-a: पीडीएफ डाउनलोड करें (फ्री)
  book-6-order-b: बार्न्स एंड नोबल से आदेश
examples:
  Examples: उदाहरण
  back-examples: उदाहरण
  Structure: संरचना
  Form: प्रपत्र
  Data: डेटा
  Arrays: Arrays
  Control: नियंत्रण
  Image: छवि
  Color: रंग
  Math: गणित
  Simulate: सिम्यलट
  Interaction: इंटरेक्शन
  Objects: वस्तुओं
  Lights: रोशनी
  Motion: गति
  Instance_Mode: उदाहरण मोड
  Dom: DOM
  Drawing: चित्रकारी
  Transform: परिवर्तन
  Typography: टाइपोग्राफी
  3D: 3 डी
  Input: इनपुट
  Advanced_Data: उन्नत डेटा
  Sound: ध्वनि
  Mobile: मोबाइल
  Hello_P5: हैलो पी 5
reference:
  Reference: संदर्भ
showcase:
  showcase-title: Showcase
  showcase-intro1: 'Introducing Showcase, created by '
  showcase-intro2: ' in 2019 and currently curated by '
  showcase-intro3: >-
    We're celebrating how people are using p5.js to make creative work,
    learning, and open source more interesting and inclusive. Together, we make
    community. During Summer 2019, we asked a few creators to share more about
    how they've used p5.js through different projects and pieces.
  showcase-intro4: >-
    The Summer 2020 Showcase is now open for submissions, nominate someone's
    p5.js work or your own to be featured here!
  nominate-project: Nominate a Project
  showcase-featuring: Featuring
  project-tag-art: Art
  project-tag-design: Design
  project-tag-code: Code
  project-tag-curriculum: Curriculum
  project-tag-documentation: Documentation
  project-tag-game: Game
  project-tag-library: Library
  project-tag-organizing: Organizing
  project-tag-tool: Tool
  project-tag-tutorial: Tutorial
  project-roni: Programmed Plotter Drawings
  credit-roni: Roni Cantor
  description-roni: >-
    Sine waves and lerps generated in p5.js, exported as SVG, and drawn with a
    plotter and pens.
  project-phuong: Airi Flies
  credit-phuong: Phuong Ngo
  description-phuong: >-
    In this game developed with p5.play, help Airi fly by saying PEW. Created to
    encourage people to get out of their comfort zone and feel more confident
    about themselves regardless of what they do and how they look or sound.
  project-daein: Chillin'
  credit-daein: Dae In Chung
  description-daein: >-
    An interactive typographic poster that uses a mobile device's motion sensor
    with p5.js.
  project-qianqian: Qtv
  credit-qianqian: Qianqian Ye
  description-qianqian: >-
    A video channel with 1-minute videos in Mandarin about creative coding, art,
    and technology, including p5.js tutorials for beginners. Available on
    YouTube, Instagram, Bilibili, and TikTok.
  project-casey-louise: p5.js Shaders
  credit-casey-louise: 'Casey Conchinha, Louise Lessél'
  description-casey-louise: 'A resource for learning the what, why, and how of using shaders in p5.js.'
  project-moon-xin: Moving Responsive Posters
  credit-moon-xin: 'Moon Jang, Xin Xin, and students'
  description-moon-xin: >-
    Browser-based moving posters that use graphical systems, transformation
    methods, and p5.js to address the connotations of a word less than 8
    letters. Designed by students for a graphic design course (Visual Narrative
    Systems) at the University of Georgia.
  created-by: Created By
  pronouns-female: (she/her)
  creator-from-roni-cantor: 'From Toronto, Canada'
  project-links: Project Links
  project-links-text-1-roni-cantor: Example sketch in p5.js Web Editor
  project-links-text-2-roni-cantor: AxiDraw V3 demo video
  project-q-1-1: What are you up to?
  project-q-1-2: How did you get started with p5.js?
  project-a-1-1-roni-cantor: >-
    I just graduated from Ryerson University's New Media program. Coming from 4
    years of coding and making robots, I decided to take a break and play with
    some more traditional forms of art—while still coding and playing with
    robots.
  project-a-1-2-roni-cantor: 'I first started using p5.js at '
  project-a-1-3-roni-cantor: '! After using '
  project-a-1-4-roni-cantor: ' for many years, I wanted to try something new.'
  project-q-2: How did you use p5.js in this project?
  project-a-2-1-roni-cantor: >-
    I used p5.js in this project to generate the sine wave and lerp (linear
    interpolation) formulas and display the visuals in the
  project-a-2-2-roni-cantor: >-
    . I then used a feature in my code that exported my programmed graphic into
    an
  project-a-2-3-roni-cantor: ' file. I needed an SVG file to give to the plotter—an '
  project-a-2-4-roni-cantor: >-
    —so that it understood where to draw the lines that I programmed. I sent
    this information to the plotter with a program called
  project-a-2-5-roni-cantor: '!'
  project-q-3: What's your favorite p5.js feature?
  project-a-3-roni-cantor: ' because lines are fun and "lerp" is a fun word to say!'
  project-q-4: >-
    Did you face any challenges working on this project? If so, how did you
    overcome them?
  project-a-4-roni-cantor: >-
    It was my first time using p5.js, Inkscape, and a plotter! I really
    benefited from the people around me who had used p5 before, as well as
    online guides and forums.
  project-q-5: What's a cool thing we should check out?
  project-a-5-roni-cantor: ' on Instagram—super cool analog plotter stuff.'
  project-q-6: Where can people learn more about you?
  project-a-6-roni-cantor: ' (Instagram)'
  project-resources: Project Resources
  creator-from-qianqian: 'Los Angeles, California'
  interview-link-qianqian: Processing Foundation interview with Qianqian Ye
  project-a-1-1-qianqian: I am a Chinese artist and designer based in Los Angeles.
  project-a-1-2-qianqian: >-
    My partner introduced me to p5.js, which I learned mainly by watching free
    online video tutorials. My first p5.js project was drawing some shapes with
    different colors.
  project-a-2-1-qianqian: >-
    This project started with an idea of teaching my mom, who lives in China and
    doesn’t speak English, to code with p5.js. This project was difficult on
    multiple levels, and I wanted to start by identifying the main reasons why
    it’s more challenging for someone like my mother to learn to code—primarily
    due to the lack of free creative coding education resources. Most of the
    free resources to learn creative coding are unavailable in China. The p5.js
    tutorials on YouTube as well as the p5.js Twitter and Instagram accounts are
    inaccessible in China because of internet censorship.
  project-a-2-2-qianqian: 'I learned a lot from YouTube videos such as the '
  project-a-2-3-qianqian: >-
    , but the more I watched coding tutorials online, the more I realized how
    difficult it is to find other womxn and people of color teaching coding,
    especially in Mandarin. I wanted to help other Chinese womxn relate to
    creative coding.
  project-a-2-4-qianqian: >-
    I am working on opening up the video channels to other Chinese creatives who
    want to contribute to the educational resource together, like interviews and
    guest tutorials. If you are interested in teaching/talking about creative
    coding in Mandarin, HMU!
  project-a-3-1-qianqian: 'The '
  project-a-3-2-qianqian: ' is my favorite feature. It makes web-based creative coding seamless.'
  project-a-4-1-qianqian: >-
    Learning to code in a second language was difficult and the lack of
    community made this process even harder. I hope to speak from my experience
    as a beginner and someone who once felt like an outsider to the creative
    coding and video tutorial world.
  project-a-4-2-qianqian: >-
    I spend a lot of time researching the latest technology for my videos. In
    the end, I decided on using my phone to record and iMovie to edit. I hope to
    encourage others that it doesn’t take a lot of expensive gears to get
    started making instructional videos.
  project-a-4-3-qianqian: >-
    Another issue I came across was my own fear of putting myself online. I
    first had to get over my anxiety of making mistakes in the videos or
    receiving negative comments online. Often womxn and people of color are
    targets for online harassment. I’m hoping to help set an example for other
    womxn and people of color that it’s ok to put yourselves online and
    strengthen your communities by sharing your knowledge. Eventually, we will
    be able to stop online harassment by creating strong diverse communities.
  project-a-5-1-qianqian: 'I am very excited about '
  project-a-5-2-qianqian: ' in LA.'
  creator-from-phuong: 'From Kyiv, Ukraine'
  project-a-1-1-phuong: 'I''m a creative coder and designer, a '
  link-1-phuong: Play Airi Flies!
  link-2-phuong: Code for AiriFlies on GitHub
  link-3-phuong: More info in Phuong Ngo's portfolio
  project-a-1-2-phuong: ' diversity scholarship recipient, and just a curious creature.'
  project-a-1-3-phuong: >-
    I was taking a course at the School of Machines in Berlin this summer
    called! "
  project-a-1-4-phuong: '," mainly taught by '
  project-a-2-1-phuong: >-
    I used p5.js to work on the visual part of the game. The animation sprites
    for Airi and the ghosts were drawn on an iPad app called
  project-a-2-2-phuong: ' and then integrated into '
  project-a-2-3-phuong: ' code. I mainly used examples at p5.play as a reference.'
  project-a-2-4-phuong: 'For the endless scrolling background, I found a '
  p5-sketch-by-chjno-phuong: p5 sketch by chjno
  project-a-2-5-phuong: >-
    . I set a condition so whenever the word "pew" or a mouse click was
    detected, the scrolling speed would change to make an illusion of Airi
    flying up. When the user does not do anything, the scrolling speed is
    negative, which makes it look like Airi is falling down.
  project-a-2-6-phuong: 'For sound recognition, I used '
  project-a-2-7-phuong: ' (currently, there is a beta version not available in public yet, but it will be very soon!). I added around 120 samples of my classmates saying the word "pew" with different intonations and 80 samples of background noise to train it. Then I integrated the model into the game with '
  project-a-3-1-phuong: >-
    I really love how easily you can create, manipulate, and delete HTML blocks
    and classes with the
  project-a-3-2-phuong: ' via '
  project-a-3-3-phuong: ' etc. But my most favorite function is '
  project-a-3-4-phuong: ', since this is where you create magic.'
  project-a-4-1-phuong: >-
    There were a lot of challenges simply because p5.js was something new to me.
    I did not work much with JavaScript in general before. Reading documentation
    and searching for similar examples helped a lot.
  project-a-5-1-phuong: 'Check out '
  school-of-machines-phuong: School of Machines' courses
  project-a-5-2-phuong: >-
    ! They try hard to connect the most creative people in the world and they do
    it well so far. ❤️
  pronouns-male: (he/him)
  creator-from-chung: 'From Baltimore, Maryland'
  link-1-casey-louise: p5.js Shaders guide
  link-2-casey-louise: Glitch collection of p5.js shader examples
  link-1-chung: View Chillin'
  link-2-chung: Code for Chillin' on GitHub
  link-3-chung: More info in Dae In Chung's Portfolio
  project-a-1-1-chung: >-
    I am a graphic designer and a faculty member at Maryland Institute College
    of Art, where I mainly teach coding (with p5.js and Processing, of course)
    and motion graphics.
  project-a-1-2-chung: 'I have been using '
  project-a-1-3-chung: ' for some time, and when p5.js came along, I started using it without a second thought because it was easy to convert existing Processing code and share projects online.'
  project-a-2-1-chung: >-
    This summer, I gave myself a challenge of making typographic posters with
    coding, and this is one of the posters I made. I didn’t know until very
    recently that I could use motion sensor data with p5.js. I was also watching
  dan-shiffman-matterjs-tutorial: Dan Shiffman’s matter.js tutorial videos
  project-a-2-2-chung: ', so I thought why not combine the two and practice what I was learning?'
  project-a-3-1-chung: >-
    There are many things I love about p5.js such as the online community and
    beginner friendliness. What I really like right now is the
  project-a-3-2-chung: >-
    , with which I can not only work online for myself but also share URLs
    quickly in the present mode. For this project in particular, I had to do a
    lot of testing on my phone, and it was much easier and quicker than
    committing to GitHub.
  project-a-4-1-chung: 'I had some troubles with handling font, alpha channel and z-depth in '
  project-a-4-2-chung: ' mode. I am still not happy with all my decisions. But in general, it was helpful to search the forum and not to forget to break down problems into smaller ones and iterate little by little. Also, I had issues with rendering out video files directly out of p5.js. Screen recording was not an option because of intermittent frame rate drops (my laptop is pretty slow). After doing some research, I decided to learn some basics of '
  project-a-4-3-chung: ' and build a tool for myself.'
  project-a-5-1-chung: >-
    As mentioned above, if you want to render out frames and video files out of
    p5.js sketches, check out my
  project-a-5-2-chung: ' and let me know what you think.'
  creator-from-casey-louise: 'From New York, New York'
  project-a-1-1-casey-louise: >-
    Casey: I'm a student at NYU ITP who's interested in computer graphics and
    interactive spaces, physical and digital.
  project-a-1-2-casey-louise: >-
    Louise: I'm a student at NYU ITP who's interested in computer graphics and
    interactive spaces based on sensor technologies.
  project-a-1-3-casey-louise: >-
    Casey: I started learning p5.js in 2018 in my first semester at ITP, though
    I had been dabbling in
  project-a-1-4-casey-louise: ' since 2012. I was introduced to Processing by my friend Pedro while I was studying graphic design, and it blew my mind. The idea of making my own tools for creating graphics and interactive art piqued my interest, but once I actually tried it, I was hooked. The first project I can remember was an eye that followed you around the screen, and it was sad when you left it alone.'
  project-a-1-5-casey-louise: >-
    Louise: I initially learned p5.js to make a website I was creating more
    playful. I’m a C# programmer, so this was a good segway into JavaScript for
    me.
  project-a-2-1-casey-louise: >-
    Casey: I was putting off learning shaders for a long time, and I was also
    curious if I could use them in p5.js. Then I heard about a grant for open
    source, storytelling, and learning resource projects at ITP called
  project-a-2-2-casey-louise: >-
    . Since I wasn't finding much in the way of p5.js + shader documentation, I
    decided to figure out how they're implemented in p5.js and create a resource
    for others to learn. When I told Louise about the project, she was
    immediately excited about learning and teaching shaders in p5.js. She's been
    great about making sure the project is a learning resource and not just a
    collection of examples.
  project-a-3-1-casey-louise: 'Casey: Does '
  project-a-3-2-casey-louise: ' count as a feature? I also love having the ability to share my programs on the web so that people don''t have to install special software or come to NYC to see my work.'
  project-a-3-3-casey-louise: 'Louise: My favorite feature is '
  project-a-3-4-casey-louise: ' and '
  project-a-3-5-casey-louise: ' for transformation of the coordinate system to make generative visuals.'
  project-a-4-1-casey-louise: >-
    Casey: The beginning of the project (figuring out how things work) was us
    reaching out to amazing people, asking questions, and asking for permission
    to use their examples in our project.
  adam-ferris-repo-casey-louise: Adam Ferriss' GitHub repo
  project-a-4-2-casey-louise: ' really laid the groundwork for us in understanding how shaders work in p5.js and provided a framework of approachable examples for us to build on. For some specific p5.js-related issues we were having, we reached out to '
  project-a-4-3-casey-louise: ' and '
  project-a-4-4-casey-louise: ' (who worked on the '
  webgl-casey-louise: WebGL implementation in p5.js
  project-a-4-5-casey-louise: '), and they were super helpful.'
  project-a-4-6-casey-louise: >-
    Louise: The learning curve was pretty steep for getting shaders into p5.
    Luckily, there were some very well-documented examples on GitHub by Adam
    Ferriss. Our aim was to do so in a way that a complete beginner can
    understand how to implement it, so it was as much a technical challenge as
    it was a challenge in teaching code to strangers and beginners. Here we drew
    inspiration from the way the
  openframeworks-book-casey-louise: openFrameworks book
  project-a-4-7-casey-louise: ' is written. A fun "hey, it’s not hard and you can do it too" approach is what we believe in.'
  project-a-5-1-casey-louise: 'Check out the '
  project-a-5-2-casey-louise: ' to explore our peers'' amazing grant projects!'
  pronouns-nonbinary: (they/them)
  creator-from-moon: 'From Athens, Georgia'
  posters-by: Posters By
  project-a-1-1-moon: >-
    Moon: I'm a graphic designer, visual artist, and design educator. This
    summer, I taught a graphic design course in the University of Georgia
    Cortona program in Italy, introducing some basics of p5.js. This fall, I am
    planning to teach and to study digital platforms at UGA.
  project-a-1-2-moon: 'My former colleague, '
  project-a-1-3-moon: ', invited me to '
  project-a-1-4-moon: ' in '
  pcd-la-moon: LA in January 2019
  project-a-1-5-moon: >-
    . They helped me with the tools and logics of p5.js. It was an excellent
    teaching and learning experience.
  project-a-2-1-moon: 'We followed basic tutorials, '
  codetrain-moon: Daniel's videos on YouTube
  project-a-2-2-moon: ', and '
  p5-reference-moon: Reference on the p5.js website
  project-a-2-3-moon: .
  project-a-3-1-moon: 'My favorite function is related to '
  project-a-3-2-moon: ' and '
  project-a-3-3-moon: ': '
  project-a-3-4-moon: >-
    . I was able to use and to teach this tool to visualize various ideas about
    time in motion.
  project-a-4-1-moon: >-
    It was challenging for me, a beginner, to understand the overall structure
    of p5.js and how code works in general. I had to repeat the p5.js basics a
    couple of times, and then I drew a chart to memorize and to teach the way I
    understood the p5.js structure and code with strong constraints I set up. It
    was an excellent teaching and learning experience.
  project-a-5-1-moon: 'Check out the '
  project-a-5-2-moon: ' in Milan, Italy.'
teach:
  teach-title2: सिखाना
  teach-intro1: 'प्रत्येक शिक्षण के अपने विशिष्ट लक्ष्य, संदेश, शर्तें और वातावरण होते हैं।'
  teach-intro2: >-
    p5 कार्यशालाओं, कक्षाओं और सामग्रियों का दस्तावेज़ीकरण और साझा करके, हम
    दुनिया भर में p5.js शिक्षार्थी और शिक्षक समुदायों को बेहतर ढंग से जोड़ने की
    उम्मीद करते हैं।
  teach-intro3: साझा करें या अनुशंसा करें
  teach-intro4: आपके अपने शिक्षण अनुभव भी!
  teach-heading: p5 शिक्षण संसाधन
  teach-search-filter: Search Filter
  teach-filter1: 'Diversity & Inclusion : '
  teach-filter1-label1: Gender
  teach-filter1-label2: Race & Ethnicity
  teach-filter1-label3: Language
  teach-filter1-label4: Neuro-Type
  teach-filter1-label5: Ability
  teach-filter1-label6: Class
  teach-filter1-label7: Religion
  teach-filter1-label8: (Sub-)Culture
  teach-filter1-label9: Political Opinion
  teach-filter1-label10: Age
  teach-filter1-label11: Skill Level
  teach-filter1-label12: Occupation
  teach-filter1-label13: '#noCodeSnobs'
  teach-filter1-label14: '#newKidLove'
  teach-filter1-label15: '#unassumeCore'
  teach-filter1-label16: '#BlackLivesMatter'
  teach-filter2: 'Venue : '
  teach-filter2-label1: Africa
  teach-filter2-label2: Asia
  teach-filter2-label3: Europe
  teach-filter2-label4: North America
  teach-filter2-label5: Oceania
  teach-filter2-label6: South America
  teach-filter2-label7: 'Virtual-Online '
  teach-filter3: 'Year : '
  teach-filter4: 'Level of Difficulty : '
  teach-filter4-label1: Elementary
  teach-filter4-label2: Intermediate
  teach-filter4-label3: Advanced
  teach-case-subtitle1: Venue & Date
  teach-case-subtitle2: Participants
  teach-case-subtitle3: Level of Difficulty
  teach-case-subtitle4: Goals
  teach-case-subtitle5: Method & Materials
  teach-case1-title: Introduction to Video Game Programming in High School with p5.js
  teach-case1-lead-name: Emanuele Bolognesi
  teach-case1-image-alt: A group photo of 25 students with their teacher
  teach-case1-content1: "\U0001F4CD High School Russell-Newton, Scandicci (FI), Italy. "
  teach-case1-content1-1: '02/06/2022 ~ 04/10/2022 every Saturday 10:00-11:00'
  teach-case1-content2: >-
    25 students (15-16 years old) of an Italian High School. 11 girls and 14
    boys
  teach-case1-content3: ' Elementary'
  teach-case1-content4: >-
    Introduce 10th grade students to simple video game programming using
    javascript and p5.js
  teach-case1-content5: 'Method: p5.js web editor'
  teach-case1-content5-1: The
  teach-case1-content5-2: works
  teach-case1-content5-3: of the students
  teach-case2-title: Fractal implementations
  teach-case2-lead-name: Mariana
  teach-case2-content1: Mars
  teach-case2-content1-1: '06.02.2022 15:00~15:30'
  teach-case2-content2: 15
  teach-case2-content3: ' Advanced'
  teach-case2-content4: Introduce the theme of fractals and use p5js to implement them
  teach-case2-content5: 'Just '
  teach-case3-title: Introduction to Computational Media with p5.js
  teach-case3-lead-name: Barry Voeten
  teach-case3-content1: school
  teach-case3-content1-1: entire course
  teach-case3-content2: 'Dutch school kids, age 14-15'
  teach-case3-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case3-content4: education
  teach-case3-content5: Syllabus
  teach-case4-title: Calculadora de IMC
  teach-case4-lead-name: Dayana
  teach-case4-content1: Youtube
  teach-case4-content1-1: '00h: 30min'
  teach-case4-content2: 'Inscritos no canal do youtube, houveram 18 vizializações.'
  teach-case4-content3: ' Elementary, Iniciante'
  teach-case4-content4: Auxiliar pessoas que estao iniciando na programação.
  teach-case4-content5: 'Editor Web do p5.js , Tutorial no youtube'
  teach-case5-title: Taller de Creative Coding
  teach-case5-lead-name: Federico Santana
  teach-case5-image-alt: Screen shot of the teacher is teaching on p5.js web editor online
  teach-case5-content1: 'https://www.twitch.tv/snowflakeFede'
  teach-case5-content1-1: 'every saturday 19:00-20:30PM (timezone: GMT-3)'
  teach-case5-content2: >-
    Soy yo nada más, pero me gusta invitar personas para programar en vivo
    cuando puedo.
  teach-case5-content3: ' Elementary'
  teach-case5-content4: >-
    Hacer que más personas aprendan sobre el arte creativo y, a su vez, poder ir
    acercandolas al mundo de la matemática, todo en español. El curso está
    fuertemente inspirado en "The coding train" pero con acercamiento que va a
    la matemática y el arte creativo en su conjunto.
  teach-case5-content5: >-
    Sólo una colección de p5js donde subo los ejemplos que se hacen en vivo,
    acá:
  teach-case6-title: "50+ CODING CLUB: MY VERY FIRST CODE ART WITH HANDY(\U0001F590) AND FAMILY(\U0001F469‍\U0001F467‍\U0001F466)"
  teach-case6-lead-name: Inhwa Yeom
  teach-case6-image-alt: In-class photo
  teach-case6-content1: 'Asia Culture Center, Gwangju, South Korea'
  teach-case6-content1-1: '27/11/2020~ 12/2020 every Friday and Saturday 2:00-4:00'
  teach-case6-content2: >-
    People who identify themselves as older adults (average age = 62.54), and
    their companions of all ages.
  teach-case6-content3: ' Elementary'
  teach-case6-content4: >-
    p5 for 50+ aims to enhance the digital literacy and rights of people going
    on 50+
  teach-case6-content5: 'p5 editor, p5for50+ web app, p5js.org, print out of code results'
  teach-case7-title: Introduction to p5js
  teach-case7-lead-name: Bérenger Recoules a.k.a b2renger
  teach-case7-image-alt: example picture
  teach-case7-content1: L'École de Design Nantes Atlantique - France
  teach-case7-content1-1: from 2018 and ongoing
  teach-case7-content2: Students from l'école de design Nantes Atlantique
  teach-case7-content3: ' Elementary'
  teach-case7-content4: 'get to know p5js and its functionalities (dom, audio, webgl etc.)'
  teach-case7-content5: 'github readme : this a text tutorial to read in French.'
  teach-case8-title: I am starting a new one -
  teach-case8-lead-name: Brinder Soin
  teach-case8-content1: New Jersey
  teach-case8-content1-1: 12/28 - 12/30
  teach-case8-content2: >-
    About 100 students from grades 7, 8 and 9 from various schools and
    locations.
  teach-case8-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case8-content4: >-
    Keeping children safe and learning in the time of covid and promote STEM
    education
  teach-case8-content5: Teacher created notes and worksheets and IDE p5 web editor
  teach-case9-title: Programación Aplicada al Arte Visual e Interactivo
  teach-case9-lead-name: Sebastián Zavatarelli
  teach-case9-image-alt: A zoom class sharing p5.js web editor
  teach-case9-content1: 'Buenos Aires, Argentina. Plataforma ZOOM'
  teach-case9-content1-1: '15/09/2020 ~ 14/10/2020 every Wednesday 6:30-9:00PM)'
  teach-case9-content2: Alrededor de 10 personas. La mayoría mujeres.
  teach-case9-content3: ' Elementary,  Intermediate'
  teach-case9-content4: >-
    El curso está destinado a artistas que quieran comenzar a utilizar las
    herramientas tecnológicas actuales para el desarrollo de sus obras. También
    puede ser aprovechado por aquellxs que quieran iniciarse en la programación
    de computadoras a través de un entorno de programación simple, visual,
    accesible y divertido.
  teach-case9-content5: >-
    p5.js web editor. Online a trvés de plataforma ZOOM y material subido en
    moodle
  teach-case10-title: Painting with Code
  teach-case10-lead-name: Andreas Refsgaard
  teach-case10-content1: 'Copenhagen, Denmark'
  teach-case10-content1-1: 22/02/2020
  teach-case10-content2: Participants were people . A wide range of people from
  teach-case10-content3: ' Intermediate'
  teach-case10-content4: >-
    Get creatives, designers, artists and other people who don't typically use
    code introduced to p5.js
  teach-case10-content5: 'Website, p5.js editor'
  teach-case11-title: Signing Coders
  teach-case11-lead-name: Taeyoon Choi
  teach-case11-content1: 'BRIC, New York City.  USA Seoul Museum of Art, Seoul, South Korea.'
  teach-case11-content1-1: '5 Sessions, each 2~3 hours'
  teach-case11-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case11-content3: ' Elementary'
  teach-case11-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case11-content5: >-
    We used p5.js Web editor and code examples on the website.  We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts. 
  teach-case12-title: Digital Weaving & Physical Computing Workshop Series
  teach-case12-lead-name: Qianqian Ye
  teach-case12-image-alt: In-class photo
  teach-case12-content1: 'Women’s Center for Creative Work, Los Angeles, CA, US'
  teach-case12-content1-1: '19/10/2019 ~ 02/11/2019, every Saturday 3-6pm'
  teach-case12-content2: '15 women and non-binary artists, designer, makers, programers.'
  teach-case12-content3: ' Elementary'
  teach-case12-content4: >-
    Over the course of three workshops, we’ll draw and create patterns using
    p5.js, an open-source graphical library; we’ll learn and apply computational
    concepts to transform patterns and finally, we’ll bring a weaving to life
    with electronic microcontrollers.
  teach-case12-content5: >-
    Materials: Slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool Methods: small team session
  teach-case12-content5-1: 'Slides we used for the workshop:'
  teach-case13-title: p5.js à l'Ubuntu Party!
  teach-case13-lead-name: Basile Pesin
  teach-case13-content1: '2020 Ubuntu Party '
  teach-case13-content1-1: 'Cité des Sciences et de l''''Industrie, Paris, France'
  teach-case13-content2: 'Any age, including children and parents, young and older adults.'
  teach-case13-content3: Advanced
  teach-case13-content4: >-
    To introduce a new public to programming through fun and compelling
    examples.
  teach-case13-content5: >-
    Method: in-person workshop, 1 hour per session, with different participant
    each times. The students were using (Ubuntu) machines with the p5.js web
    editor. I was teaching using a video projector as well as a board.
  teach-case13-content5-1: >-
    Materials: The exercises I gave where accessible through p5.js web-editor
    links available in
  teach-case14-title: >-
    Making The Thing that Makes the Thing: Exploring Generative Art & Design
    with p5.js
  teach-case14-lead-name: Priti Pandurangan & Ajith Ranka
  teach-case14-image-alt: >-
    A group of participants collaborating to create some designs using the p5.js
    web editor on their laptops.
  teach-case14-content1: 'National Institute of Design, Bangalore'
  teach-case14-content1-1: '2020 February 8, 2:30-4:00 PM'
  teach-case14-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case14-content3: 'Priti: Intermediate & Ajith: Advanced'
  teach-case14-content4: >-
    To explore generative art &#x0026; design and recreate some classical works
    with p5.js.
  teach-case14-content5: 'Methods: In-person, collaborative, hands-on workshop.'
  teach-case14-content5-1: 'Materials: '
  teach-case14-content5-2: 'course page '
  teach-case14-content5-3: 'linking to sketches on the p5 editor, '
  teach-case14-content5-4: 'interactive reference guide '
  teach-case14-content5-5: to p5 basics
  teach-case15-title: CC Fest (Creative Coding Festival)
  teach-case15-lead-name: Saber
  teach-case15-speech: 'Love p5.js. It has meant so much to me, my students, and this community.'
  teach-case15-content1: ' New York, Los Angeles, San Francisco, Virtual-Online '
  teach-case15-content1-1: ' Twice a year in NYC for four years; once a year in LA for three years; once a year in SF for two years; now virtual'
  teach-case15-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case15-content3: Intermediate
  teach-case15-content4: >-
    To build a teacher and student community around p5 for middle and high
    school.
  teach-case15-content5: >-
    A half-day of workshop led by volunteer teachers. We saw lots of different
    methods and materials. Most used some sort of slides or documentation, some
    live coding using an editor, with work time for participant to remix.
  teach-case15-content5-1: CC Fest Lessons page
  teach-case15-content5-2: ' for teaching materials'
  teach-case15-content5-3: More photos
  teach-case16-title: Taller Introducción a la Programación Creativa con p5.js
  teach-case16-lead-name: Aarón Montoya-Moraga
  teach-case16-image-alt: >-
    A group of 20 people sitting on a large shared table with their laptops
    looking at a projected screen.
  teach-case16-speech: 'p5.js is my happy place '
  teach-case16-content1: ' PlusCode Media Arts Festival, Buenos Aires, Argentina & Virtual-Online '
  teach-case16-content1-1: ' 2018 November 14, 3 hours'
  teach-case16-content2: >-
    I had around 16 students in the workshop, and a team including 3 people from
    the PlusCode festival, and one person at the venue.
  teach-case16-content3: 'Elementary, Intermediate, Advanced'
  teach-case16-content4: >-
    Introduction to beginners and artists of graphic web programming and open
    source, using p5.js, in Spanish :)
  teach-case16-content5: 'I used the material on this '
  teach-case16-content5-1: GitHub repo
  teach-case16-content5-2: ', we used the p5.js web editor, we had a three hour long workshop'
  teach-case16-content5-3: '+CODE electronic art festival 2018, Argentina'
  teach-case16-content5-4: ', Medium'
  teach-case17-title: Introduction to Generative Drawing
  teach-case17-lead-name: Adam Herst
  teach-case17-speech: >-
    My greatest source of uncertainty in developing the workshop was whether it
    was trying to teach art to programmers or to teach programming to artists.
  teach-case17-content1: Inter/Access
  teach-case17-content1-1: ' (artist-run centre), Toronto, Ontario, Canada'
  teach-case17-content1-2: In-person with a self-paced workbook for remote work
  teach-case17-content1-3: ' 2020 February 12, 7PM-9PM'
  teach-case17-content2: 15 artists
  teach-case17-content3: Elementary
  teach-case17-content4: >-
    To introduce p5.js to artists with little or no programming experience and
    to suggest one way an analogue practice can migrate to a digital form.
  teach-case17-content5: >-
    A printed workbook with activities that used the p5.js web editor to show
    how translate an physical drawing into a digital drawing.
  teach-case17-content5-1: 'Processing Community Day 2019: Generative Drawing at Inter/Access'
  teach-case17-content5-2: Introduction to Generative Drawing Letter PDF
  teach-case17-content5-3: Introduction to Generative Drawing Booklet PDF
  teach-case18-title: 'Open Lecture, Creative Coding: 2020'
  teach-case18-lead-name: Shunsuke Takawo
  teach-case18-image-alt: >-
    A table on which there is a laptop, some sheets of papers, colorful pens and
    two automatic machines drawing something with a pen on a sheet.
  teach-case18-speech: >-
    I love p5.js because it's so easy to read and write code in p5.js. Coding in
    your everyday life!
  teach-case18-content1: ' Kyoto University of Art and Design, Kyoto, Japan & Virtual-Online '
  teach-case18-content1-1: ' 2020 March 16-18, 1-7 PM'
  teach-case18-content2: 'Students of Kyoto University of Art and Design, and anyone.'
  teach-case18-content3: Elementary
  teach-case18-content4: Making code as a tool for artistic expression.
  teach-case18-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case18-content5-1: Syllabus
  teach-case18-content5-2: Day 1
  teach-case18-content5-3: Day 2
  teach-case18-content5-4: Day 3
  teach-case18-content5-5: ', YouTube'
  teach-case19-title: Creative Coding for Static Graphics
  teach-case19-lead-name: Shunsuke Takawo
  teach-case19-speech: >-
    Coding in p5.js is a lot of fun. If you haven't started yet, I encourage you
    to give it a try!
  teach-case19-content1: ' FabCafe MTRL, Tokyo, Japan'
  teach-case19-content1-1: ' 2019 September 15, 4-7 PM '
  teach-case19-content2: Anyone who wants to try coding in p5.js.
  teach-case19-content3: Intermediate
  teach-case19-content4: To code from the graphic design's perspective.
  teach-case19-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case19-content5-1: Syllabus & Material
  teach-case20-title: Generative Typography
  teach-case20-lead-name: Dae In Chung
  teach-case20-image-alt: >-
    A image with black background displaying the letter 'b' in 5 different
    styles along with a menu with various styling options to choose.
  teach-case20-content1: ' Baltimore, Maryland, USA & Virtual-Online '
  teach-case20-content1-1: ' 2019 January 21 - May 08, every Wednesday, 4-10 PM'
  teach-case20-content2: 14 undergrads and grad students who had little to no experience in coding.
  teach-case20-content3: Elementary
  teach-case20-content4: Experiment with typographic forms and structures through computation.
  teach-case20-content5: 'Methods: online/offline lectures and critiques.'
  teach-case20-content5-1: 'Materials: p5js online editor, Github, youtube tutorials.'
  teach-case20-content5-2: Works of participants
  teach-case21-title: Machine Learning for the Web
  teach-case21-lead-name: Yining Shi
  teach-case21-image-alt: >-
    A group of 16 people sitting around tables with their laptops, mobile phones
    and some other accessories, facing towards a large television screen.
  teach-case21-content1: ' ITP, NYU, 370 Jay St, Brooklyn, NY 11201, USA'
  teach-case21-content1-1: '2019 March 09 - October 12, every Tuesday, 6:30-9:00 PM'
  teach-case21-content2: >-
    Students at Interactive Telecommunications Program, New York University. 16
    people.
  teach-case21-content3: 'Elementary, Intermediate'
  teach-case21-content4: >-
    The goal of this class is to learn and understand common machine learning
    techniques and apply them to generate creative outputs in the browser using
    ml5.js and p5.js.
  teach-case21-content5: >-
    This class is a mix of lectures, coding sessions, group discussions, and
    presentations. I used
  teach-case21-content5-1: GitHub
  teach-case21-content5-2: ' to host class syllabus and all the coding materials, Google Slides for lectures and p5.js Web Editor for live coding sessions. Every week, there were one-on-one office hours to talk about any difficulties of coming up with an idea for the homework or any coding changes.'
  teach-case21-content5-3: 'Methods: online/offline lectures and critiques.'
  teach-case22-title: Introduction to p5.js and JavaScript
  teach-case22-lead-name: Nico Reski
  teach-case22-content1: ' Currently available as self-study at own pace with accompanying slides, linked below.'
  teach-case22-content3: 'Beginner, Elementary'
  teach-case22-content4: >-
    Introduce learners (potentially with no coding experiences at all) to the
    very basics of p5.js (and JavaScript), in order to encourage creative coding
    and enable them to pursue own projects in a safe environment.
  teach-case22-content5: >-
    p5.js source code (for the introductory project), JavaScript source code
    (illustrating some basic JavaScript functionalities), accompanying slides in
    .pdf format, all hosted publicly on GitHub.
  teach-case22-content5-1: Overview
  teach-case22-content5-2: ' of the workshop and its contents (including all links to the material hosted on GitHub) on my academic webpage.'
  teach-case23-title: Digital Weaving & Physical Computing Workshop Series
  teach-case23-lead-name: Qianqian Ye & Evelyn Masso
  teach-case23-image-alt: >-
    This image is divided in two parts. The left part shows a group of 15 women
    sitting on chairs with their laptops and looking at a presentor who is
    explaining a code on a projected screen. The right part of the image shows a
    person learning weaving using a physical pattern and a weaving tool.
  teach-case23-content1: ' Womens Center for Creative Work (WCCW), Los Angeles, CA, US'
  teach-case23-content1-1: ' 2019 October 19 - November 02, every Saturday 3-6 PM'
  teach-case23-content2: '15 women and non-binary artists, designer, makers, programers. '
  teach-case23-content3: Elementary
  teach-case23-content4: >-
    Over the course of three workshops, we will draw and create patterns using
    p5.js, an open-source graphical library; we will learn and apply
    computational concepts to transform patterns and finally, we will bring a
    weaving to life with electronic microcontrollers.
  teach-case23-content5: 'Methods: small team session'
  teach-case23-content5-1: >-
    Materials: slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool.
  teach-case23-content5-2: 'Workshop Slide #1'
  teach-case23-content5-3: 'Workshop Slide #2'
  teach-case23-content5-4: Workshop Information
  teach-case23-content5-5: ' on WCCW website.'
  teach-case24-title: Signing Coders
  teach-case24-lead-name: Taeyoon Choi
  teach-case24-image-alt: >-
    Two volunteers explaining concepts using a white board and a screen to a
    bunch of deaf and hard of hearing students, each student facing a computer
    screen.
  teach-case24-speech: >-
    I'm working on a new series of coding class for Disabled students in South
    Korea. I'm researching about the pedagogy and translation. I plan to hold
    workshops in December 2020. The project is supported by the Open Society
    Foundation Human Rights Initiative and Korea Disability Arts & Culture
    Center.
  teach-case24-content1: ' WRIC, New York City, USA & Seoul Museum of Art, Seoul, South Korea.'
  teach-case24-content1-1: '5 Sessions, each 2~3 hours'
  teach-case24-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case24-content3: Elementary
  teach-case24-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case24-content5: >-
    We used p5.js Web editor and code examples on the website. We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts.
  teach-case24-content5-1: Syllabus & Material
  teach-case24-content5-2: More photos
  teach-workshops-heading: Upcoming Workshops
  teach-workshop1-title: CC Fest (Creative Coding Festival)
  teach-workshop1-time: Twice a year in NYC
  teach-workshop2-title: Adorable Cat Festival with happy cats and happy people
  teach-workshop2-time: 'March 2023, every Saturday 2-6pm'
  teach-workshop3-title: Adorable Dog Festival with happy dogs and happy people
  teach-workshop3-time: 'May 2023, every Sunday 5-8pm'
